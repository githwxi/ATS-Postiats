%{
//
staload
UN = "prelude/SATS/unsafe.sats"
staload
_ (*anon*) = "prelude/DATS/list.dats"
#define l2l list_of_list_vt
//
staload
STR = "libc/SATS/string.sats"
staload
STDIO = "libc/SATS/stdio.sats"
staload TIME = "libc/SATS/time.sats"
//
dynload "libatsdoc/dynloadall.dats"
//
staload "libatsdoc/SATS/libatsdoc_atext.sats"
//
%}\
%{

fn extrem (
  str: string // extension removal
) : string = let
//
val str = string1_of_string (str)
//
fun loop {n:int}
  {i:nat | i <= n} .<n-i>.
  (str: string n, i: size_t i): string =
  if string_isnot_atend (str, i) then let
    val c = str[i]
  in
    if c = '.' then let
      val str1 = string_make_substring (str, 0, i) in string_of_strbuf (str1)
    end else loop (str, i + 1)
  end else str // end of [if]
//
in
  loop (str, 0)
end // end of [extrem]

fn isSuffix (
  str: string, sfx: string
) : bool = let
  val str = string1_of_string (str)
  val l_str = string1_length (str)
  val sfx = string1_of_string (sfx)
  val l_sfx = string1_length (sfx)
in
  if l_str >= l_sfx then let
    val str1 = $UN.cast{string}($UN.cast2ptr(str)+l_str-l_sfx)
  in
    $STR.strcmp (str1, sfx) = 0
  end else false
end // end of [isSuffix]

macdef isSATS (x) = isSuffix (,(x), ".sats")
macdef isDATS (x) = isSuffix (,(x), ".dats")

fn srcRename
  (str: string): string =
  case+ 0 of
  | _ when isSATS (str) => extrem (str) + "_sats"
  | _ when isDATS (str) => extrem (str) + "_dats"
  | _ => str
// end of [srcRename]
%}\
%{

(*
** HX: pats_main.dats is not include in [SOURCES]
*)
val SOURCES =
  $lst{string} (
//
  "pats_params.hats"
//
, "pats_error.sats"
, "pats_error.dats"
//
, "pats_intinf.sats"
, "pats_intinf.dats"
//
, "pats_counter.sats"
, "pats_counter.dats"
//
, "pats_utils.sats"
, "pats_utils.dats"
//
, "pats_global.sats"
, "pats_global.dats"
//
, "pats_basics.sats"
, "pats_basics.dats"
, "pats_basics.hats"
//
, "pats_comarg.sats"
, "pats_comarg.dats"
//
, "pats_stamp.sats"
, "pats_stamp.dats"
//
, "pats_symbol.sats"
, "pats_symbol.dats"
//
, "pats_filename.sats"
, "pats_filename.dats"
, "pats_filename_reloc.dats"
//
, "pats_location.sats"
, "pats_location.dats"
, "pats_location.cats"
//
, "pats_jsonize.sats"
, "pats_jsonize.dats"
//
, "pats_errmsg.sats"
, "pats_errmsg.dats"
//
, "pats_reader.sats"
, "pats_reader.dats"
, "pats_reader.cats"
//
, "pats_lexbuf.sats"
, "pats_lexbuf.dats"
, "pats_lexbuf.cats"
//
, "pats_lexing.sats"
, "pats_lexing.dats"
, "pats_lexing.cats"
, "pats_lexing_print.dats"
, "pats_lexing_error.dats"
, "pats_lexing_token.dats"
//
, "pats_label.sats"
, "pats_label.dats"
//
, "pats_effect.sats"
, "pats_effect.dats"
//
, "pats_fixity.sats"
, "pats_fixity_prec.dats"
, "pats_fixity_fxty.dats"
//
, "pats_syntax.sats"
, "pats_syntax.dats"
, "pats_syntax_print.dats"
//
, "pats_depgen.sats"
, "pats_depgen.dats"
//
, "pats_taggen.sats"
, "pats_taggen.dats"
//
, "pats_tokbuf.sats"
, "pats_tokbuf.dats"
, "pats_tokbuf.cats"
//
, "pats_parsing.sats"
, "pats_parsing.dats"
, "pats_parsing_error.dats"
, "pats_parsing_util.dats"
, "pats_parsing_kwds.dats"
, "pats_parsing_base.dats"
, "pats_parsing_e0xp.dats"
, "pats_parsing_sort.dats"
, "pats_parsing_staexp.dats"
, "pats_parsing_p0at.dats"
, "pats_parsing_dynexp.dats"
, "pats_parsing_decl.dats"
, "pats_parsing_toplevel.dats"
//
, "pats_symmap.sats"
, "pats_symmap.dats"
, "pats_symmap_avltree.hats" // may be included in [pats_symmap.dats]
, "pats_symmap_htlinprb.hats" // may be included in [pats_symmap.dats]
//
, "pats_symenv.sats"
, "pats_symenv.dats"
//
, "pats_staexp1.sats"
, "pats_staexp1.dats"
, "pats_staexp1_print.dats"
//
, "pats_dynexp1.sats"
, "pats_dynexp1.dats"
, "pats_dynexp1_print.dats"
//
, "pats_trans1.sats"
, "pats_trans1_env.sats"
, "pats_trans1_env.dats"
//
, "pats_e1xpval.sats"
, "pats_e1xpval.dats"
, "pats_e1xpval_error.dats"
//
, "pats_trans1_error.dats"
, "pats_trans1_e0xp.dats"
, "pats_trans1_effect.dats"
, "pats_trans1_sort.dats"
, "pats_trans1_staexp.dats"
, "pats_trans1_p0at.dats"
, "pats_trans1_syndef.dats"
, "pats_trans1_dynexp.dats"
, "pats_trans1_decl.dats"
//
, "pats_staexp2.sats"
, "pats_staexp2.dats"
//
, "pats_stacst2.sats"
, "pats_stacst2.dats"
//
, "pats_staexp2_print.dats"
, "pats_staexp2_pprint.dats"
//
, "pats_staexp2_jsonize.dats"
//
, "pats_staexp2_sort.dats"
//
, "pats_staexp2_scst.dats"
, "pats_staexp2_svar.dats"
, "pats_staexp2_svvar.dats"
//
, "pats_staexp2_hole.dats"
, "pats_staexp2_ctxt.dats"
//
, "pats_staexp2_dcon.dats"
//
, "pats_staexp2_skexp.dats"
, "pats_staexp2_szexp.dats"
//
, "pats_staexp2_util.sats"
, "pats_staexp2_util1.dats"
, "pats_staexp2_util2.dats"
, "pats_staexp2_util3.dats"
//
, "pats_staexp2_error.sats"
, "pats_staexp2_error.dats"
//
, "pats_staexp2_solve.sats"
, "pats_staexp2_solve.dats"
//
, "pats_patcst2.sats"
, "pats_patcst2.dats"
//
, "pats_dynexp2.sats"
, "pats_dynexp2.dats"
//
, "pats_dyncst2.sats"
, "pats_dyncst2.dats"
//
, "pats_dynexp2_print.dats"
//
, "pats_dynexp2_jsonize.dats"
//
, "pats_dynexp2_dcst.dats"
, "pats_dynexp2_dvar.dats"
, "pats_dynexp2_dmac.dats"
, "pats_dynexp2_util.dats"
, "pats_trans2.sats"
//
, "pats_namespace.sats"
, "pats_namespace.dats"
//
, "pats_trans2_env.sats"
, "pats_trans2_env.dats"
, "pats_trans2_error.dats"
, "pats_trans2_sort.dats"
, "pats_trans2_staexp.dats"
, "pats_trans2_p1at.dats"
, "pats_trans2_dynexp.dats"
, "pats_trans2_impdec.dats"
//
, "pats_trans2_decl.dats"
//
, "pats_dynexp3.sats"
, "pats_dynexp3.dats"
, "pats_dynexp3_print.dats"
//
, "pats_trans3.sats"
, "pats_trans3_error.dats"
, "pats_trans3_util.dats"
//
, "pats_trans3_env.sats"
, "pats_trans3_env.dats"
, "pats_trans3_env_print.dats"
, "pats_trans3_env_scst.dats"
, "pats_trans3_env_svar.dats"
, "pats_trans3_env_termet.dats"
, "pats_trans3_env_effect.dats"
, "pats_trans3_env_dvar.dats"
, "pats_trans3_env_lamlp.dats"
, "pats_trans3_env_pfman.dats"
, "pats_trans3_env_lstate.dats"
//
, "pats_dmacro2.sats"
, "pats_dmacro2.dats"
, "pats_dmacro2_print.dats"
, "pats_dmacro2_eval0.dats"
, "pats_dmacro2_eval1.dats"
//
, "pats_trans3_p2at.dats"
, "pats_trans3_patcon.dats"
, "pats_trans3_syncst.dats"
, "pats_trans3_dynexp_up.dats"
, "pats_trans3_dynexp_dn.dats"
, "pats_trans3_appsym.dats"
, "pats_trans3_caseof.dats"
, "pats_trans3_selab.dats"
, "pats_trans3_ptrof.dats"
, "pats_trans3_viewat.dats"
, "pats_trans3_deref.dats"
, "pats_trans3_assgn.dats"
, "pats_trans3_xchng.dats"
, "pats_trans3_lvalres.dats"
, "pats_trans3_fldfrat.dats"
, "pats_trans3_looping.dats"
, "pats_trans3_decl.dats"
//
, "pats_lintprgm.sats"
, "pats_lintprgm.dats"
, "pats_lintprgm_print.dats"
, "pats_lintprgm_myint.cats"
, "pats_lintprgm_myint.dats"
, "pats_lintprgm_solve.dats"
//
, "pats_constraint3.sats"
, "pats_constraint3.dats"
//
, "pats_constraint3_init.dats"
, "pats_constraint3_print.dats"
, "pats_constraint3_jsonize.dats"
, "pats_constraint3_simplify.dats"
, "pats_constraint3_icnstr.dats"
, "pats_constraint3_solve.dats"
//
, "pats_histaexp.sats"
, "pats_histaexp.dats"
, "pats_histaexp_print.dats"
, "pats_histaexp_funlab.dats"
//
, "pats_hidynexp.sats"
, "pats_hidynexp.dats"
, "pats_hidynexp_print.dats"
, "pats_hidynexp_util.dats"
//
, "pats_typerase.sats"
, "pats_typerase_error.dats"
, "pats_typerase_staexp.dats"
, "pats_typerase_dynexp.dats"
, "pats_typerase_decl.dats"
//
, "pats_ccomp.sats"
, "pats_ccomp.dats"
, "pats_ccomp_print.dats"
, "pats_ccomp_hitype.dats"
, "pats_ccomp_tmplab.dats"
, "pats_ccomp_tmpvar.dats"
, "pats_ccomp_d2env.dats"
, "pats_ccomp_funlab.dats"
, "pats_ccomp_funent.dats"
, "pats_ccomp_util.dats"
, "pats_ccomp_ccompenv.dats"
, "pats_ccomp_instrseq.dats"
, "pats_ccomp_hipat.dats"
, "pats_ccomp_dynexp.dats"
, "pats_ccomp_caseof.dats"
, "pats_ccomp_claulst.dats"
, "pats_ccomp_lazyeval.dats"
, "pats_ccomp_trywith.dats"
, "pats_ccomp_looping.dats"
, "pats_ccomp_decl.dats"
, "pats_ccomp_subst.dats"
, "pats_ccomp_environ.dats"
, "pats_ccomp_template.dats"
, "pats_ccomp_emit.dats"
, "pats_ccomp_emit2.dats"
, "pats_ccomp_emit3.dats"
, "pats_ccomp_main.dats"
//
) // end of [SOURCES]

(* ****** ****** *)

fn process_SOURCES
  (): atext = let
  fun f (x: string): atext = let
    val res = sprintf ("  %s \\\n", @(x)) in atext_strptr (res)
  end // end of [f]
  val res = list_map_fun (SOURCES, f)
  val res = list_of_list_vt (res)
in
  atext_concatxt (res)
end // end of [process_SOURCES]

fn process_OBJECTS
  (): atext = let
//
fun aux (
  xs: List(string)
) : atextlst =
  case+ xs of
  | list_cons (x, xs) => (
    case+ 0 of
    | _ when isSATS (x) => let
        val x1 = extrem (x)
        val x2 = sprintf ("  %s_sats.o \\\n", @(x1))
        val res = atext_strptr (x2)
      in
        list_cons (res, aux (xs))
      end
    | _ when isDATS (x) => let
        val x1 = extrem (x)
        val x2 = sprintf ("  %s_dats.o \\\n", @(x1))
        val res = atext_strptr (x2)
      in
        list_cons (res, aux (xs))
      end
    | _ => aux (xs)
    )
  | list_nil () => list_nil ()
// end of [aux]
//
val res = aux (SOURCES)
//
in
  atext_concatxt (res)
end // end of [process_OBJECTS]

(* ****** ****** *)

local

fun fproc
  (src: string): atextopt_vt = let
in
//
case+ 0 of
| _ when
    isSATS (src) => let
    val src1 = extrem (src)
    val line1 = sprintf (
      "%s_sats.c: %s.sats; $(ATSCC) $(DATSCC) -cc $<\n", @(src1, src1)
    ) // end of [val]
    val line1 = atext_strptr (line1)
    val line2 = sprintf (
      "%s_sats.o: %s_sats.c; $(ATSCC) $(CFLAGS) -c $<\n\n", @(src1, src1)
    ) // end of [val]
    val line2 = atext_strptr (line2)
  in
    Some_vt (atext_apptxt2 (line1, line2))
  end
| _ when
    isDATS (src) => let
    val src1 = extrem (src)
    val line1 = sprintf (
      "%s_dats.c: %s.dats; $(ATSCC) $(DATSCC) -cc $<\n", @(src1, src1)
    ) // end of [val]
    val line1 = atext_strptr (line1)
    val line2 = sprintf (
      "%s_dats.o: %s_dats.c; $(ATSCC) $(CFLAGS) -c $<\n\n", @(src1, src1)
    ) // end of [val]
    val line2 = atext_strptr (line2)
  in
    Some_vt (atext_apptxt2 (line1, line2))
  end
| _ => None_vt () // HX: .cats or .hats
//
end // end of [fproc]

in // in of [local]

fun
process_compile_lines () = let
  val ys =
    list_mapopt_fun<string><atext> (SOURCES, fproc)
  val res1 = atext_concatxt ((l2l)ys)
  val- ~Some_vt (res2) = fproc ("pats_main.dats")
in
  atext_apptxt2 (res1, res2)
end // end of [process_compile_lines]

end // end of [local]

%}\
#
#
# This Makefile is automatically generated
# from executing the following command-line:
#
# make -f Makefile.gen
#
#

######

CCOMP=gcc

######

ATSCC=$(ATSHOME)/bin/atscc
ATSOPT=$(ATSHOME)/bin/atsopt

######

CFLAGS=-g
CFLAGS=-g -O
CFLAGS=-g -O2

######

GCFLAG=
GCFLAG=-D_ATS_GCATS

######

C3NSTRINTKND=gmpknd

######

DATSCC=-DATS C3NSTRINTKND=$(C3NSTRINTKND)

######

LIBATS=-lats

######
#
# HX: no [gmp] 
ifeq ($(C3NSTRINTKND),intknd)
LIBGMP=
endif
#
# HX: [gmp] needed
ifeq ($(C3NSTRINTKND),gmpknd)
LIBGMP=-lgmp
endif
#
######

SOURCES := \\
#process_SOURCES()

SOURCESsta := $(filter %.sats, $(SOURCES))
SOURCESdyn := $(filter %.dats, $(SOURCES))

######

OBJECTS := \\
#process_OBJECTS()

######

all:: patsopt

######
#
# AS-20130407: libats depends on libgmp (hence specified earlier);
# link order matters to GNU ld
#
patsopt: \\
  pats_main_dats.o $(OBJECTS) ; \\
  $(ATSCC) $(CFLAGS) $(GCFLAG) -o $@ pats_main_dats.o $(OBJECTS) $(LIBATS) $(LIBGMP)
cleanall:: ; $(RMF) patsopt
#
######
#
# for building patsopt through CMake
#
BUILD/init: ; cd BUILD; cmake ..; cd ..
BUILD/clean: ; make -C BUILD -f Makefile clean
BUILD/patsopt: ; make -C BUILD -j8 -f Makefile patsopt
#
######

CBOOT:: ; $(CPF) pats_*.hats CBOOT
CBOOT:: ; $(CPF) pats_*.cats CBOOT
CBOOT:: ; $(CPF) pats_*_sats.c CBOOT
CBOOT:: ; $(CPF) pats_*_dats.c CBOOT

######

TAGATS:: ; $(RMF) $@
TAGATS:: ; $(ATSOPT) -o $@ --taggen -s $(SOURCESsta) -d $(SOURCESdyn)

######

#process_compile_lines()

######

#
# HX: '-o .depend' means appending instead of overwriting
#
depend::
	$(RMF) .depend
	$(ATSOPT) --output-a .depend --depgen -d pats_main.dats
	$(ATSOPT) --output-a .depend --depgen -s $(SOURCESsta) -d $(SOURCESdyn)
-include .depend

######

DIR=.
CPF=cp -f
RMF=rm -f
WCL=wc -l

######

srclines:: ; $(WCL) pats_main.dats $(SOURCES)
liblines:: ; $(WCL) ../prelude/*.sats ../prelude/?ATS/*.?ats ../libc/?ATS/*.?ats ../libats/?ATS/*.?ats

######

clean:: ; $(RMF) $(DIR)/*~
clean:: ; $(RMF) $(DIR)/*_?ats.o
clean:: ; $(RMF) $(DIR)/*_?ats.c

cleanall:: clean
cleanall:: ; $(RMF) TAGATS

###### end of [Makefile] ######
\
%{
implement main () = fprint_filsub (stdout_ref, "Makefile_atxt.txt")
%}\
