%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"integer.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_GPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/integer.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("January, 2013")
*/

#atscode_separator_for_C()

\#ifndef ATSLIB_PRELUDE_CATS_INTEGER
\#define ATSLIB_PRELUDE_CATS_INTEGER

#atscode_separator_for_C()
//
// HX-2013-09: declared in [stdio.h]
//
\#ifndef fprintf
extern
int fprintf (FILE *stream, const char *format, ...) ;
\#endif // end of [ifndef]
\#ifndef snprintf
extern
int snprintf (char *str, size_t size, const char *format, ...) ;
\#endif // end of [ifndef]
//
#atscode_separator_for_C()
//
\#define atspre_g0int2int_int_int(x) (x)
\#define atspre_g0int2int_int_lint(x) ((atstype_lint)(x))
\#define atspre_g0int2int_int_llint(x) ((atstype_llint)(x))
\#define atspre_g0int2int_int_ssize(x) ((atstype_ssize)(x))
\#define atspre_g1int2int_int_int atspre_g0int2int_int_int
\#define atspre_g1int2int_int_lint atspre_g0int2int_int_lint
\#define atspre_g1int2int_int_llint atspre_g0int2int_int_llint
\#define atspre_g1int2int_int_ssize atspre_g0int2int_int_ssize
//
\#define atspre_g0int2int_lint_int(x) ((atstype_int)(x))
\#define atspre_g0int2int_lint_lint(x) (x)
\#define atspre_g0int2int_lint_llint(x) ((atstype_llint)(x))
\#define atspre_g0int2int_lint_ssize(x) ((atstype_ssize)(x))
\#define atspre_g1int2int_lint_int atspre_g0int2int_lint_int
\#define atspre_g1int2int_lint_lint atspre_g0int2int_lint_lint
\#define atspre_g1int2int_lint_llint atspre_g0int2int_lint_llint
\#define atspre_g1int2int_lint_ssize atspre_g0int2int_lint_ssize
//
\#define atspre_g0int2int_ssize_int(x) ((atstype_int)(x))
\#define atspre_g0int2int_ssize_lint(x) ((atstype_lint)(x))
\#define atspre_g0int2int_ssize_llint(x) ((atstype_llint)(x))
\#define atspre_g0int2int_ssize_ssize(x) (x)
\#define atspre_g1int2int_ssize_int atspre_g0int2int_ssize_int
\#define atspre_g1int2int_ssize_lint atspre_g0int2int_ssize_lint
\#define atspre_g1int2int_ssize_llint atspre_g0int2int_ssize_llint
\#define atspre_g1int2int_ssize_ssize atspre_g0int2int_ssize_ssize
//
#atscode_separator_for_C()
//
\#define atspre_g0int2int_sint_int(x) ((atstype_int)(x))
//
#atscode_separator_for_C()
//
\#define atspre_g0int2uint_int_uint(x) ((atstype_uint)(x))
\#define atspre_g0int2uint_int_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0int2uint_int_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0int2uint_int_size(x) ((atstype_size)(x))
\#define atspre_g1int2uint_int_uint atspre_g0int2uint_int_uint
\#define atspre_g1int2uint_int_ulint atspre_g0int2uint_int_ulint
\#define atspre_g1int2uint_int_ullint atspre_g0int2uint_int_ullint
\#define atspre_g1int2uint_int_size atspre_g0int2uint_int_size
//
\#define atspre_g0int2uint_lint_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0int2uint_lint_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0int2uint_lint_size(x) ((atstype_size)(x))
\#define atspre_g1int2uint_lint_ulint atspre_g0int2uint_lint_ulint
\#define atspre_g1int2uint_lint_ullint atspre_g0int2uint_lint_ullint
\#define atspre_g1int2uint_lint_size atspre_g0int2uint_lint_size
//
\#define atspre_g0int2uint_llint_ullint(x) ((atstype_ullint)(x))
\#define atspre_g1int2uint_llint_ullint atspre_g0int2uint_llint_ullint
//
\#define atspre_g0int2uint_ssize_size(x) ((atstype_size)(x))
\#define atspre_g1int2uint_ssize_size atspre_g0int2uint_ssize_size
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2int_uint_int(x) ((atstype_int)(x))
\#define atspre_g0uint2int_uint_lint(x) ((atstype_lint)(x))
\#define atspre_g0uint2int_uint_llint(x) ((atstype_llint)(x))
\#define atspre_g0uint2int_uint_ssize(x) ((atstype_ssize)(x))
\#define atspre_g1uint2int_uint_int atspre_g0uint2int_uint_int
\#define atspre_g1uint2int_uint_lint atspre_g0uint2int_uint_lint
\#define atspre_g1uint2int_uint_llint atspre_g0uint2int_uint_llint
\#define atspre_g1uint2int_uint_ssize atspre_g0uint2int_uint_ssize
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2int_size_int(x) ((atstype_int)(x))
\#define atspre_g0uint2int_size_lint(x) ((atstype_lint)(x))
\#define atspre_g0uint2int_size_llint(x) ((atstype_llint)(x))
\#define atspre_g0uint2int_size_ssize(x) ((atstype_ssize)(x))
\#define atspre_g1uint2int_size_int atspre_g0uint2int_size_int
\#define atspre_g1uint2int_size_lint atspre_g0uint2int_size_lint
\#define atspre_g1uint2int_size_llint atspre_g0uint2int_size_llint
\#define atspre_g1uint2int_size_ssize atspre_g0uint2int_size_ssize
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2uint_uint_uint(x) (x)
\#define atspre_g0uint2uint_uint_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0uint2uint_uint_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0uint2uint_uint_size(x) ((atstype_size)(x))
\#define atspre_g1uint2uint_uint_uint atspre_g0uint2uint_uint_uint
\#define atspre_g1uint2uint_uint_ulint atspre_g0uint2uint_uint_ulint
\#define atspre_g1uint2uint_uint_ullint atspre_g0uint2uint_uint_ullint
\#define atspre_g1uint2uint_uint_size atspre_g0uint2uint_uint_size
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2uint_ulint_uint(x) ((atstype_uint)(x))
\#define atspre_g0uint2uint_ulint_ulint(x) (x)
\#define atspre_g0uint2uint_ulint_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0uint2uint_ulint_size(x) ((atstype_size)(x))
\#define atspre_g1uint2uint_ulint_uint atspre_g0uint2uint_ulint_uint
\#define atspre_g1uint2uint_ulint_ulint atspre_g0uint2uint_ulint_ulint
\#define atspre_g1uint2uint_ulint_ullint atspre_g0uint2uint_ulint_ullint
\#define atspre_g1uint2uint_ulint_size atspre_g0uint2uint_ulint_size
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2uint_size_uint(x) ((atstype_uint)(x))
\#define atspre_g0uint2uint_size_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0uint2uint_size_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0uint2uint_size_size(x) (x)
\#define atspre_g1uint2uint_size_uint atspre_g0uint2uint_size_uint
\#define atspre_g1uint2uint_size_ulint atspre_g0uint2uint_size_ulint
\#define atspre_g1uint2uint_size_ullint atspre_g0uint2uint_size_ullint
\#define atspre_g1uint2uint_size_size atspre_g0uint2uint_size_size
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2uint_usint_uint(x) ((atstype_uint)(x))
//
#atscode_separator_for_C()
//
ATSinline()
atstype_string
atspre_g0int2string_int
  (atstype_int x)
{
  size_t n0 ;
  char *res ;
  size_t ntot ;
  n0 = 4 ;
  res = ATS_MALLOC(n0) ;
  ntot = snprintf(res, n0, "%i", x) ;
  if (ntot >= n0)
  {
    ATS_MFREE(res) ;
    res = (char*)ATS_MALLOC(ntot+1) ;
    ntot = snprintf(res, ntot+1, "%i", x) ;
  }
  return res ;
}
//
ATSinline()
atstype_string
atspre_g0int2string_lint
  (atstype_lint x)
{
  size_t n0 ;
  char *res ;
  size_t ntot ;
  n0 = 4 ;
  res = ATS_MALLOC(n0) ;
  ntot = snprintf(res, n0, "%li", x) ;
  if (ntot >= n0)
  {
    ATS_MFREE(res) ;
    res = (char*)ATS_MALLOC(ntot+1) ;
    ntot = snprintf(res, ntot+1, "%li", x) ;
  }
  return res ;
}
//
ATSinline()
atstype_string
atspre_g0int2string_llint
  (atstype_llint x)
{
  size_t n0 ;
  char *res ;
  size_t ntot ;
  n0 = 8 ;
  res = ATS_MALLOC(n0) ;
  ntot = snprintf(res, n0, "%lli", x) ;
  if (ntot >= n0)
  {
    ATS_MFREE(res) ;
    res = (char*)ATS_MALLOC(ntot+1) ;
    ntot = snprintf(res, ntot+1, "%lli", x) ;
  }
  return res ;
}
//
#atscode_separator_for_C()
//
extern int atoi (const char *inp) ;
extern long int atol (const char *inp) ;
extern long long int atoll (const char *inp) ;
//
ATSinline()
atstype_int
atspre_g0string2int_int
  (atstype_string inp) { return atoi((char*)inp) ; }
ATSinline()
atstype_lint
atspre_g0string2int_lint
  (atstype_string inp) { return atol((char*)inp) ; }
ATSinline()
atstype_llint
atspre_g0string2int_llint
  (atstype_string inp) { return atoll((char*)inp) ; }
ATSinline()
atstype_ssize
atspre_g0string2int_ssize
  (atstype_string inp) { return atol((char*)inp) ; }
//
#atscode_separator_for_C()
//
extern
unsigned long int
strtoul(const char *nptr, char **endptr, int base);
extern
unsigned long long int
strtoull(const char *nptr, char **endptr, int base);
//
ATSinline()
atstype_uint
atspre_g0string2uint_uint
  (atstype_string inp) { return strtoul((char*)inp, NULL, 10) ; }
ATSinline()
atstype_ulint
atspre_g0string2uint_ulint
  (atstype_string inp) { return strtoul((char*)inp, NULL, 10) ; }
ATSinline()
atstype_ullint
atspre_g0string2uint_ullint
  (atstype_string inp) { return strtoull((char*)inp, NULL, 10) ; }
ATSinline()
atstype_size
atspre_g0string2uint_size
  (atstype_string inp) { return strtoul((char*)inp, NULL, 10) ; }
//
#atscode_separator_for_C()

%{
local
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun
fun_neg_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_neg_%s
  (atstype_%s x) { return (-x) ; }
// end of [atspre_g0int_neg_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_neg_decl]
//
fun
fun_abs_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_abs_%s
  (atstype_%s x) { return (x >= 0 ? x : -x) ; }
// end of [atspre_g0int_abs_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_abs_decl]
//
fun
fun_succ_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_succ_%s
  (atstype_%s x) { return (x + 1) ; }
// end of [atspre_g0int_succ_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_succ_decl]
//
fun
fun_pred_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_pred_%s
  (atstype_%s x) { return (x - 1) ; }
// end of [atspre_g0int_pred_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_pred_decl]
//
fun
fun_half_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_half_%s
  (atstype_%s x) { return (x / 2) ; }
// end of [atspre_g0int_half_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_half_decl]
//
fun
fun_aop_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "add" => "+"
  | "sub" => "-"
  | "mul" => "*"
  | "div" => "/"
  | "mod" => "%"
  | "nmod" => "%"
  | _(*rest*) => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2) ; }
// end of [atspre_g0int_%s_%s]\n\
", @(
 knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_aop_decl]
//
fun
fun_asx_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr =
(
  case+ opr of
  | "asl" => "<<" | "asr" => ">>" | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_%s_%s
  (atstype_%s x, atstype_int n) { return (x %s n) ; }
// end of [atspre_g0int_%s_%s]\n\
", @(
  knd, opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [fun_asz_decl]
//
fun
fun_cmpz_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr =
(
  case+ opr of
  | "isltz" => "<" | "isltez" => "<="
  | "isgtz" => ">" | "isgtez" => ">="
  | "iseqz" => "==" | "isneqz" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_bool
atspre_g0int_%s_%s (atstype_%s x)
{
  return (x %s 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0int_%s_%s]\n\
", @(
  opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmpz_decl]
//
fun
fun_cmp_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr =
(
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_bool
atspre_g0int_%s_%s
(
  atstype_%s x1, atstype_%s x2
) {
  return (x1 %s x2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0int_%s_%s]\n\
", @(
  opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmp_decl]
//
fun
fun_compare_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_int
atspre_g0int_compare_%s
(
  atstype_%s x1, atstype_%s x2
) {
  if (x1 < x2) return -1 ; else if (x1 > x2) return 1 ; else return 0 ;
} // end of [atspre_g0int_compare_%s]\n\
", @(
  knd, knd, knd, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_compare_decl]
//
fun
fun_maxmin_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "min" => "<=" | "max" => ">=" | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0int_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2 ? x1 : x2) ; }
// end of [atspre_g0int_%s_%s]\n\
", @(
  knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_maxmin_decl]

in (* in of [local] *)

fun g0int_implist
  (tnm: string): atext = let
//
var res: atextlst = list_nil
//
val () = res := list_cons (fun_neg_decl(tnm), res)
val () = res := list_cons (fun_abs_decl(tnm), res)
//
val () = res := list_cons (fun_succ_decl(tnm), res)
val () = res := list_cons (fun_pred_decl(tnm), res)
//
val () = res := list_cons (fun_half_decl(tnm), res)
//
val () = res := list_cons (fun_aop_decl("add", tnm), res)
val () = res := list_cons (fun_aop_decl("sub", tnm), res)
val () = res := list_cons (fun_aop_decl("mul", tnm), res)
val () = res := list_cons (fun_aop_decl("div", tnm), res)
val () = res := list_cons (fun_aop_decl("mod", tnm), res)
val () = res := list_cons (fun_aop_decl("nmod", tnm), res)
//
val () = res := list_cons (fun_asx_decl("asl", tnm), res)
val () = res := list_cons (fun_asx_decl("asr", tnm), res)
//
val () = res := list_cons (fun_cmpz_decl("isltz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isltez", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isgtz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isgtez", tnm), res)
val () = res := list_cons (fun_cmpz_decl("iseqz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isneqz", tnm), res)
//
val () = res := list_cons (fun_cmp_decl("lt", tnm), res)
val () = res := list_cons (fun_cmp_decl("lte", tnm), res)
val () = res := list_cons (fun_cmp_decl("gt", tnm), res)
val () = res := list_cons (fun_cmp_decl("gte", tnm), res)
val () = res := list_cons (fun_cmp_decl("eq", tnm), res)
val () = res := list_cons (fun_cmp_decl("neq", tnm), res)
//
val () = res := list_cons (fun_compare_decl(tnm), res)
//
val () = res := list_cons (fun_maxmin_decl("max", tnm), res)
val () = res := list_cons (fun_maxmin_decl("min", tnm), res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0int_implist]

end // end of [local]
//
%}\
\
#g0int_implist("int")\
//
#g0int_implist("lint")\
//
#g0int_implist("llint")\
//
#g0int_implist("ssize")\
//
#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_int
(
  atstype_ref out, atstype_int x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%i", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_int] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_int]
\#define atspre_print_int(x) atspre_fprint_int(stdout, (x))
\#define atspre_prerr_int(x) atspre_fprint_int(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_lint
(
  atstype_ref out, atstype_lint x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%li", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_lint] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_lint]
\#define atspre_print_lint(x) atspre_fprint_lint(stdout, (x))
\#define atspre_prerr_lint(x) atspre_fprint_lint(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_llint
(
  atstype_ref out, atstype_llint x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%lli", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_llint] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_llint]
\#define atspre_print_llint(x) atspre_fprint_llint(stdout, (x))
\#define atspre_prerr_llint(x) atspre_fprint_llint(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_ssize
(
  atstype_ref out, atstype_ssize x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%li", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_ssize] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_ssize]
\#define atspre_print_ssize(x) atspre_fprint_ssize(stdout, (x))
\#define atspre_prerr_ssize(x) atspre_fprint_ssize(stderr, (x))

#atscode_separator_for_C()

\#define atspre_g1int_neg_int atspre_g0int_neg_int
\#define atspre_g1int_abs_int atspre_g0int_abs_int
\#define atspre_g1int_succ_int atspre_g0int_succ_int
\#define atspre_g1int_pred_int atspre_g0int_pred_int
\#define atspre_g1int_half_int atspre_g0int_half_int
\#define atspre_g1int_add_int atspre_g0int_add_int
\#define atspre_g1int_sub_int atspre_g0int_sub_int
\#define atspre_g1int_mul_int atspre_g0int_mul_int
\#define atspre_g1int_div_int atspre_g0int_div_int
\#define atspre_g1int_nmod_int atspre_g0int_nmod_int
\#define atspre_g1int_isltz_int atspre_g0int_isltz_int
\#define atspre_g1int_isltez_int atspre_g0int_isltez_int
\#define atspre_g1int_isgtz_int atspre_g0int_isgtz_int
\#define atspre_g1int_isgtez_int atspre_g0int_isgtez_int
\#define atspre_g1int_iseqz_int atspre_g0int_iseqz_int
\#define atspre_g1int_isneqz_int atspre_g0int_isneqz_int
\#define atspre_g1int_lt_int atspre_g0int_lt_int
\#define atspre_g1int_lte_int atspre_g0int_lte_int
\#define atspre_g1int_gt_int atspre_g0int_gt_int
\#define atspre_g1int_gte_int atspre_g0int_gte_int
\#define atspre_g1int_eq_int atspre_g0int_eq_int
\#define atspre_g1int_neq_int atspre_g0int_neq_int
\#define atspre_g1int_compare_int atspre_g0int_compare_int
\#define atspre_g1int_max_int atspre_g0int_max_int
\#define atspre_g1int_min_int atspre_g0int_min_int

#atscode_separator_for_C()

\#define atspre_g1int_neg_lint atspre_g0int_neg_lint
\#define atspre_g1int_succ_lint atspre_g0int_succ_lint
\#define atspre_g1int_pred_lint atspre_g0int_pred_lint
\#define atspre_g1int_half_lint atspre_g0int_half_lint
\#define atspre_g1int_add_lint atspre_g0int_add_lint
\#define atspre_g1int_sub_lint atspre_g0int_sub_lint
\#define atspre_g1int_mul_lint atspre_g0int_mul_lint
\#define atspre_g1int_div_lint atspre_g0int_div_lint
\#define atspre_g1int_nmod_lint atspre_g0int_nmod_lint
\#define atspre_g1int_isltz_lint atspre_g0int_isltz_lint
\#define atspre_g1int_isltez_lint atspre_g0int_isltez_lint
\#define atspre_g1int_isgtz_lint atspre_g0int_isgtz_lint
\#define atspre_g1int_isgtez_lint atspre_g0int_isgtez_lint
\#define atspre_g1int_iseqz_lint atspre_g0int_iseqz_lint
\#define atspre_g1int_isneqz_lint atspre_g0int_isneqz_lint
\#define atspre_g1int_lt_lint atspre_g0int_lt_lint
\#define atspre_g1int_lte_lint atspre_g0int_lte_lint
\#define atspre_g1int_gt_lint atspre_g0int_gt_lint
\#define atspre_g1int_gte_lint atspre_g0int_gte_lint
\#define atspre_g1int_eq_lint atspre_g0int_eq_lint
\#define atspre_g1int_neq_lint atspre_g0int_neq_lint
\#define atspre_g1int_compare_lint atspre_g0int_compare_lint
\#define atspre_g1int_max_lint atspre_g0int_max_lint
\#define atspre_g1int_min_lint atspre_g0int_min_lint

#atscode_separator_for_C()

\#define atspre_g1int_neg_llint atspre_g0int_neg_llint
\#define atspre_g1int_succ_llint atspre_g0int_succ_llint
\#define atspre_g1int_pred_llint atspre_g0int_pred_llint
\#define atspre_g1int_half_llint atspre_g0int_half_llint
\#define atspre_g1int_add_llint atspre_g0int_add_llint
\#define atspre_g1int_sub_llint atspre_g0int_sub_llint
\#define atspre_g1int_mul_llint atspre_g0int_mul_llint
\#define atspre_g1int_div_llint atspre_g0int_div_llint
\#define atspre_g1int_nmod_llint atspre_g0int_nmod_llint
\#define atspre_g1int_isltz_llint atspre_g0int_isltz_llint
\#define atspre_g1int_isltez_llint atspre_g0int_isltez_llint
\#define atspre_g1int_isgtz_llint atspre_g0int_isgtz_llint
\#define atspre_g1int_isgtez_llint atspre_g0int_isgtez_llint
\#define atspre_g1int_iseqz_llint atspre_g0int_iseqz_llint
\#define atspre_g1int_isneqz_llint atspre_g0int_isneqz_llint
\#define atspre_g1int_lt_llint atspre_g0int_lt_llint
\#define atspre_g1int_lte_llint atspre_g0int_lte_llint
\#define atspre_g1int_gt_llint atspre_g0int_gt_llint
\#define atspre_g1int_gte_llint atspre_g0int_gte_llint
\#define atspre_g1int_eq_llint atspre_g0int_eq_llint
\#define atspre_g1int_neq_llint atspre_g0int_neq_llint
\#define atspre_g1int_compare_llint atspre_g0int_compare_llint
\#define atspre_g1int_max_llint atspre_g0int_max_llint
\#define atspre_g1int_min_llint atspre_g0int_min_llint

#atscode_separator_for_C()

\#define atspre_g1int_neg_ssize atspre_g0int_neg_ssize
\#define atspre_g1int_succ_ssize atspre_g0int_succ_ssize
\#define atspre_g1int_pred_ssize atspre_g0int_pred_ssize
\#define atspre_g1int_half_ssize atspre_g0int_half_ssize
\#define atspre_g1int_add_ssize atspre_g0int_add_ssize
\#define atspre_g1int_sub_ssize atspre_g0int_sub_ssize
\#define atspre_g1int_mul_ssize atspre_g0int_mul_ssize
\#define atspre_g1int_div_ssize atspre_g0int_div_ssize
\#define atspre_g1int_nmod_ssize atspre_g0int_nmod_ssize
\#define atspre_g1int_isltz_ssize atspre_g0int_isltz_ssize
\#define atspre_g1int_isltez_ssize atspre_g0int_isltez_ssize
\#define atspre_g1int_isgtz_ssize atspre_g0int_isgtz_ssize
\#define atspre_g1int_isgtez_ssize atspre_g0int_isgtez_ssize
\#define atspre_g1int_iseqz_ssize atspre_g0int_iseqz_ssize
\#define atspre_g1int_isneqz_ssize atspre_g0int_isneqz_ssize
\#define atspre_g1int_lt_ssize atspre_g0int_lt_ssize
\#define atspre_g1int_lte_ssize atspre_g0int_lte_ssize
\#define atspre_g1int_gt_ssize atspre_g0int_gt_ssize
\#define atspre_g1int_gte_ssize atspre_g0int_gte_ssize
\#define atspre_g1int_eq_ssize atspre_g0int_eq_ssize
\#define atspre_g1int_neq_ssize atspre_g0int_neq_ssize
\#define atspre_g1int_compare_ssize atspre_g0int_compare_ssize
\#define atspre_g1int_max_ssize atspre_g0int_max_ssize
\#define atspre_g1int_min_ssize atspre_g0int_min_ssize

#atscode_separator_for_C()

%{
local
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun
fun_succ_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_succ_%s
  (atstype_%s x) { return (x + 1) ; }
// end of [atspre_g0uint_succ_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_succ_decl]
//
fun
fun_pred_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_pred_%s
  (atstype_%s x) { return (x - 1) ; }
// end of [atspre_g0uint_pred_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_pred_decl]
//
fun
fun_half_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_half_%s
  (atstype_%s x) { return (x >> 1) ; }
// end of [atspre_g0uint_half_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_half_decl]
//
fun
fun_aop_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "add" => "+" | "sub" => "-"
  | "mul" => "*" | "div" => "/" | "mod" => "%"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2) ; }
// end of [atspre_g0uint_%s_%s]\n\
", @(
 knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_aop_decl]
//
fun
fun_lsx_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lsl" => "<<" | "lsr" => ">>" | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_%s_%s
  (atstype_%s x, atstype_int n) { return (x %s n) ; }
// end of [atspre_g0uint_%s_%s]\n\
", @(
  knd, opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [fun_lsx_decl]
//
fun
fun_lnot_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_lnot_%s
  (atstype_%s x) { return ~(x) ; }
// end of [atspre_g0uint_lnot_%s]\n\
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_lnot_decl]
//
fun
fun_bitop_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lor" => "|" | "land" => "&" | "lxor" => "^" | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_%s_%s
  (atstype_%s x, atstype_%s y) { return (x %s y) ; }
// end of [atspre_g0uint_%s_%s]\n\
", @(
  knd, opr, knd, knd, knd, fopr, knd, knd
)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [fun_bitop_decl]
//
fun
fun_cmpz_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "isgtz" => ">"
  | "iseqz" => "=="
  | "isneqz" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_bool
atspre_g0uint_%s_%s (atstype_%s x)
{
  return (x %s 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0uint_%s_%s]\n\
", @(
  opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmpz_decl]
//
fun
fun_cmp_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<"
  | "lte" => "<="
  | "gt" => ">"
  | "gte" => ">="
  | "eq" => "=="
  | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_bool
atspre_g0uint_%s_%s
(
  atstype_%s x1, atstype_%s x2
) {
  return (x1 %s x2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0uint_%s_%s]\n\
", @(
  opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmp_decl]
//
fun
fun_compare_decl
  (knd: string): atext = let
//
val ent = sprintf
("\
ATSinline()
atstype_int
atspre_g0uint_compare_%s
(
  atstype_%s x1, atstype_%s x2
) {
  if (x1 < x2) return -1 ; else if (x1 > x2) return 1 ; else return 0 ;
} // end of [atspre_g0uint_compare_%s]\n\
", @(
  knd, knd, knd, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_compare_decl]
//
fun
fun_maxmin_decl
(
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "min" => "<=" | "max" => ">=" | _ => opr
) : string // end of [val]
//
val ent = sprintf
("\
ATSinline()
atstype_%s
atspre_g0uint_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2 ? x1 : x2) ; }
// end of [atspre_g0uint_%s_%s]\n\
", @(
  knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_maxmin_decl]

in (* in of [local] *)

fun g0uint_implist
  (tnm: string): atext = let
//
var res: atextlst = list_nil
//
val () = res := list_cons (fun_succ_decl(tnm), res)
val () = res := list_cons (fun_pred_decl(tnm), res)
//
val () = res := list_cons (fun_half_decl(tnm), res)
//
val () = res := list_cons (fun_aop_decl("add", tnm), res)
val () = res := list_cons (fun_aop_decl("sub", tnm), res)
val () = res := list_cons (fun_aop_decl("mul", tnm), res)
val () = res := list_cons (fun_aop_decl("div", tnm), res)
val () = res := list_cons (fun_aop_decl("mod", tnm), res)
//
val () = res := list_cons (fun_lsx_decl("lsl", tnm), res)
val () = res := list_cons (fun_lsx_decl("lsr", tnm), res)
//
val () = res := list_cons (fun_lnot_decl(tnm), res)
val () = res := list_cons (fun_bitop_decl("lor", tnm), res)
val () = res := list_cons (fun_bitop_decl("land", tnm), res)
val () = res := list_cons (fun_bitop_decl("lxor", tnm), res)
//
val () = res := list_cons (fun_cmpz_decl("isgtz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("iseqz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isneqz", tnm), res)
//
val () = res := list_cons (fun_cmp_decl("lt", tnm), res)
val () = res := list_cons (fun_cmp_decl("lte", tnm), res)
val () = res := list_cons (fun_cmp_decl("gt", tnm), res)
val () = res := list_cons (fun_cmp_decl("gte", tnm), res)
val () = res := list_cons (fun_cmp_decl("eq", tnm), res)
val () = res := list_cons (fun_cmp_decl("neq", tnm), res)
//
val () = res := list_cons (fun_compare_decl(tnm), res)
//
val () = res := list_cons (fun_maxmin_decl("max", tnm), res)
val () = res := list_cons (fun_maxmin_decl("min", tnm), res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0uint_implist]

end // end of [local]
%}\
\
#g0uint_implist("uint")\
//
#g0uint_implist("ulint")\
//
#g0uint_implist("ullint")\
//
#g0uint_implist("size")\
//
#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_uint
(
  atstype_ref out, atstype_uint x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%u", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_uint] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_uint]

\#define atspre_print_uint(x) atspre_fprint_uint(stdout, (x))
\#define atspre_prerr_uint(x) atspre_fprint_uint(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_ulint
(
  atstype_ref out, atstype_ulint x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%lu", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_ulint] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_ulint]

\#define atspre_print_ulint(x) atspre_fprint_ulint(stdout, (x))
\#define atspre_prerr_ulint(x) atspre_fprint_ulint(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_ullint
(
  atstype_ref out, atstype_ullint x
) {
  int err = 0 ;
  err += fprintf((FILE*)out, "%llu", x) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_ullint] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_ullint]

\#define atspre_print_ullint(x) atspre_fprint_ullint(stdout, (x))
\#define atspre_prerr_ullint(x) atspre_fprint_ullint(stderr, (x))

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_size
(
  atstype_ref out, atstype_size x
) {
  int err = 0 ;
  atstype_ulint x2 = x ;
  err += fprintf((FILE*)out, "%lu", x2) ;
/*
  if (err < 0) {
    fprintf(stderr, "exit(ATS): [fprint_size] failed.") ; exit(1) ;
  } // end of [if]
*/
  return ;
} // end [atspre_fprint_size]

\#define atspre_print_size(x) atspre_fprint_size(stdout, (x))
\#define atspre_prerr_size(x) atspre_fprint_size(stderr, (x))

#atscode_separator_for_C()

\#define atspre_g1uint_succ_uint atspre_g0uint_succ_uint
\#define atspre_g1uint_pred_uint atspre_g0uint_pred_uint
\#define atspre_g1uint_half_uint atspre_g0uint_half_uint
\#define atspre_g1uint_add_uint atspre_g0uint_add_uint
\#define atspre_g1uint_sub_uint atspre_g0uint_sub_uint
\#define atspre_g1uint_mul_uint atspre_g0uint_mul_uint
\#define atspre_g1uint_div_uint atspre_g0uint_div_uint
\#define atspre_g1uint_mod_uint atspre_g0uint_mod_uint
\#define atspre_g1uint_isgtz_uint atspre_g0uint_isgtz_uint
\#define atspre_g1uint_iseqz_uint atspre_g0uint_iseqz_uint
\#define atspre_g1uint_isneqz_uint atspre_g0uint_isneqz_uint
\#define atspre_g1uint_lt_uint atspre_g0uint_lt_uint
\#define atspre_g1uint_lte_uint atspre_g0uint_lte_uint
\#define atspre_g1uint_gt_uint atspre_g0uint_gt_uint
\#define atspre_g1uint_gte_uint atspre_g0uint_gte_uint
\#define atspre_g1uint_eq_uint atspre_g0uint_eq_uint
\#define atspre_g1uint_neq_uint atspre_g0uint_neq_uint
\#define atspre_g1uint_compare_uint atspre_g0uint_compare_uint
\#define atspre_g1uint_max_uint atspre_g0uint_max_uint
\#define atspre_g1uint_min_uint atspre_g0uint_min_uint

#atscode_separator_for_C()

\#define atspre_g1uint_succ_ulint atspre_g0uint_succ_ulint
\#define atspre_g1uint_pred_ulint atspre_g0uint_pred_ulint
\#define atspre_g1uint_half_ulint atspre_g0uint_half_ulint
\#define atspre_g1uint_add_ulint atspre_g0uint_add_ulint
\#define atspre_g1uint_sub_ulint atspre_g0uint_sub_ulint
\#define atspre_g1uint_mul_ulint atspre_g0uint_mul_ulint
\#define atspre_g1uint_div_ulint atspre_g0uint_div_ulint
\#define atspre_g1uint_mod_ulint atspre_g0uint_mod_ulint
\#define atspre_g1uint_isgtz_ulint atspre_g0uint_isgtz_ulint
\#define atspre_g1uint_iseqz_ulint atspre_g0uint_iseqz_ulint
\#define atspre_g1uint_isneqz_ulint atspre_g0uint_isneqz_ulint
\#define atspre_g1uint_lt_ulint atspre_g0uint_lt_ulint
\#define atspre_g1uint_lte_ulint atspre_g0uint_lte_ulint
\#define atspre_g1uint_gt_ulint atspre_g0uint_gt_ulint
\#define atspre_g1uint_gte_ulint atspre_g0uint_gte_ulint
\#define atspre_g1uint_eq_ulint atspre_g0uint_eq_ulint
\#define atspre_g1uint_neq_ulint atspre_g0uint_neq_ulint
\#define atspre_g1uint_compare_ulint atspre_g0uint_compare_ulint
\#define atspre_g1uint_max_ulint atspre_g0uint_max_ulint
\#define atspre_g1uint_min_ulint atspre_g0uint_min_ulint

#atscode_separator_for_C()

\#define atspre_g1uint_succ_ullint atspre_g0uint_succ_ullint
\#define atspre_g1uint_pred_ullint atspre_g0uint_pred_ullint
\#define atspre_g1uint_half_ullint atspre_g0uint_half_ullint
\#define atspre_g1uint_add_ullint atspre_g0uint_add_ullint
\#define atspre_g1uint_sub_ullint atspre_g0uint_sub_ullint
\#define atspre_g1uint_mul_ullint atspre_g0uint_mul_ullint
\#define atspre_g1uint_div_ullint atspre_g0uint_div_ullint
\#define atspre_g1uint_mod_ullint atspre_g0uint_mod_ullint
\#define atspre_g1uint_isgtz_ullint atspre_g0uint_isgtz_ullint
\#define atspre_g1uint_iseqz_ullint atspre_g0uint_iseqz_ullint
\#define atspre_g1uint_isneqz_ullint atspre_g0uint_isneqz_ullint
\#define atspre_g1uint_lt_ullint atspre_g0uint_lt_ullint
\#define atspre_g1uint_lte_ullint atspre_g0uint_lte_ullint
\#define atspre_g1uint_gt_ullint atspre_g0uint_gt_ullint
\#define atspre_g1uint_gte_ullint atspre_g0uint_gte_ullint
\#define atspre_g1uint_eq_ullint atspre_g0uint_eq_ullint
\#define atspre_g1uint_neq_ullint atspre_g0uint_neq_ullint
\#define atspre_g1uint_compare_ullint atspre_g0uint_compare_ullint
\#define atspre_g1uint_max_ullint atspre_g0uint_max_ullint
\#define atspre_g1uint_min_ullint atspre_g0uint_min_ullint

#atscode_separator_for_C()

\#define atspre_g1uint_succ_size atspre_g0uint_succ_size
\#define atspre_g1uint_pred_size atspre_g0uint_pred_size
\#define atspre_g1uint_half_size atspre_g0uint_half_size
\#define atspre_g1uint_add_size atspre_g0uint_add_size
\#define atspre_g1uint_sub_size atspre_g0uint_sub_size
\#define atspre_g1uint_mul_size atspre_g0uint_mul_size
\#define atspre_g1uint_div_size atspre_g0uint_div_size
\#define atspre_g1uint_mod_size atspre_g0uint_mod_size
\#define atspre_g1uint_isgtz_size atspre_g0uint_isgtz_size
\#define atspre_g1uint_iseqz_size atspre_g0uint_iseqz_size
\#define atspre_g1uint_isneqz_size atspre_g0uint_isneqz_size
\#define atspre_g1uint_lt_size atspre_g0uint_lt_size
\#define atspre_g1uint_lte_size atspre_g0uint_lte_size
\#define atspre_g1uint_gt_size atspre_g0uint_gt_size
\#define atspre_g1uint_gte_size atspre_g0uint_gte_size
\#define atspre_g1uint_eq_size atspre_g0uint_eq_size
\#define atspre_g1uint_neq_size atspre_g0uint_neq_size
\#define atspre_g1uint_compare_size atspre_g0uint_compare_size
\#define atspre_g1uint_max_size atspre_g0uint_max_size
\#define atspre_g1uint_min_size atspre_g0uint_min_size

#atscode_separator_for_C()

\#endif // ifndef ATSLIB_PRELUDE_CATS_INTEGER

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "integer_atxt.txt")
%}\
