%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"pointer.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_GPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/pointer.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")
*/

#atscode_separator_for_C()

\#ifndef ATSLIB_PRELUDE_CATS_POINTER
\#define ATSLIB_PRELUDE_CATS_POINTER

#atscode_separator_for_C()

\#ifndef memset
extern
void *memset(void *bufp, int c, size_t n) ;
\#endif // \#ifndef

#atscode_separator_for_C()

\#ifndef fprintf
extern
int fprintf (FILE *stream, const char *format, ...) ;
\#endif // end of [ifndef]

#atscode_separator_for_C()

ATSinline()
atstype_ptr
atspre_ptr_null () { return (void*)0 ; }

#atscode_separator_for_C()

ATSinline()
atstype_bool
atspre_ptr_is_null
  (atstype_ptr p) {
  return (p == (void*)0) ? atsbool_true : atsbool_false ;
} // end of [atspre_ptr_is_null]
\#define atspre_ptr0_is_null atspre_ptr_is_null
\#define atspre_ptr1_is_null atspre_ptr_is_null

ATSinline()
atstype_bool
atspre_ptr_isnot_null
  (atstype_ptr p) {
  return (p != (void*)0) ? atsbool_true : atsbool_false ;
} // end of [atspre_ptr_isnot_null]
\#define atspre_ptr0_isnot_null atspre_ptr_isnot_null
\#define atspre_ptr1_isnot_null atspre_ptr_isnot_null

#atscode_separator_for_C()

ATSinline()
atstype_ptr
atspre_add_ptr_bsz
  (atstype_ptr p, atstype_size ofs) { return ((char*)p + ofs) ; }
// end of [atspre_add_ptr_bsz]
\#define atspre_add_ptr0_bsz atspre_add_ptr_bsz
\#define atspre_add_ptr1_bsz atspre_add_ptr_bsz

ATSinline()
atstype_ptr
atspre_sub_ptr_bsz
  (atstype_ptr p, atstype_size ofs) { return ((char*)p - ofs) ; }
// end of [atspre_sub_ptr_bsz]
\#define atspre_sub_ptr0_bsz atspre_sub_ptr_bsz
\#define atspre_sub_ptr1_bsz atspre_sub_ptr_bsz

#atscode_separator_for_C()

ATSinline()
atstype_ssize
atspre_sub_ptr_ptr
  (atstype_ptr p1, atstype_ptr p2) { return (p1 - p2) ; }
// end of [atspre_sub_ptr_ptr]
\#define atspre_sub_ptr0_ptr0 atspre_sub_ptr_ptr
\#define atspre_sub_ptr1_ptr1 atspre_sub_ptr_ptr

#atscode_separator_for_C()

%{
fun
fun_pointer_cmp0_decl (
  opr: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_%s_ptr_ptr
  (atstype_ptr p1, atstype_ptr p2) {
  return (p1 %s p2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_%s_ptr_ptr]
#define atspre_%s_ptr0_ptr0 atspre_%s_ptr_ptr
#define atspre_%s_ptr1_ptr1 atspre_%s_ptr_ptr
", @(
 opr, fopr, opr, opr, opr, opr, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_pointer_cmp0_decl]
%}\
\
#fun_pointer_cmp0_decl("lt")
#fun_pointer_cmp0_decl("lte")
#fun_pointer_cmp0_decl("gt")
#fun_pointer_cmp0_decl("gte")
#fun_pointer_cmp0_decl("eq")
#fun_pointer_cmp0_decl("neq")

ATSinline()
atstype_int
atspre_compare_ptr_ptr
(
  atstype_ptr p1, atstype_ptr p2
) {
  if (p1 >= p2) {
    if (p1 > p2) return 1 ; else return 0 ;
  } else return (-1) ;
} // end of [atspre_compare_ptr_ptr]
\#define atspre_compare_ptr0_ptr0 atspre_compare_ptr_ptr
\#define atspre_compare_ptr1_ptr1 atspre_compare_ptr_ptr

#atscode_separator_for_C()

ATSinline()
atstype_bool
atspre_gt_ptr_intz
  (atstype_ptr p, atstype_int _)
{
  return (p > 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_gt_ptr_intz]
\#define atspre_gt_ptr0_intz atspre_gt_ptr_intz
\#define atspre_gt_ptr1_intz atspre_gt_ptr_intz

ATSinline()
atstype_bool
atspre_eq_ptr_intz
  (atstype_ptr p, atstype_int _)
{
  return (p == 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_eq_ptr_intz]
\#define atspre_eq_ptr0_intz atspre_eq_ptr_intz
\#define atspre_eq_ptr1_intz atspre_eq_ptr_intz

ATSinline()
atstype_bool
atspre_neq_ptr_intz
  (atstype_ptr p, atstype_int _)
{
  return (p != 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_neq_ptr_intz]
\#define atspre_neq_ptr0_intz atspre_neq_ptr_intz
\#define atspre_neq_ptr1_intz atspre_neq_ptr_intz

#atscode_separator_for_C()

\#define atspre_cptr_null() atsptr_null

#atscode_separator_for_C()

\#define atspre_cptr_is_null atspre_ptr_is_null
\#define atspre_cptr_isnot_null atspre_ptr_isnot_null

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_ptr_nullize_tsz
(
  atstype_ptr p, atstype_size tsz
) {
  memset (p, 0, tsz) ; return /*void*/ ;
} // end of [atspre_ptr_nullize_tsz]

#atscode_separator_for_C()

\#define \\
atspre_ptr_alloc_tsz atspre_malloc_gc

#atscode_separator_for_C()

\#define atspre_ptr_free(p) atspre_mfree_gc(p)

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_ptr (
  atstype_ref out, atstype_ptr x
) {
  int err ;
  err = fprintf((FILE*)out, "%p", x) ;
  return ;
} // end [atspre_fprint_ptr]

\#define atspre_print_ptr(x) atspre_fprint_ptr(stdout, (x))
\#define atspre_prerr_ptr(x) atspre_fprint_ptr(stderr, (x))

#atscode_separator_for_C()

\#endif // ifndef ATSLIB_PRELUDE_CATS_POINTER

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "pointer_atxt.txt")
%}\
