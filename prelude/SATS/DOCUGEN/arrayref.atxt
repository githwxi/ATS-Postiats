(* ****** ****** *)

%{
implement srcfilename_get () = "../arrayref.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_arrayref")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/arrayref\
")

(* ****** ****** *)

#declpreamble("\

#para("\

This package contains functions for creating and manipulating persistent
arrays.  ")

#para("\

Given a type T, the type #stacode("arrayref(T, N)") is for a plain array
containing N cells in which elements of the type T are stored.
Array-subscripting on an arrayref-value requires static verification that
the subscripting index is within the bounds of the subscripted array.  Note
that the type T can be linear.  However, it is somewhat unwieldy in
practice to make use of an arrayref-value containing linear elements. ")

#para("\

Given a type T, the type #stacode("arrszref(T)") is for an array paired
with its own size in which elements of the type T are
stored. Array-subscripting on an arrszref-value is internally combined with
array-bounds checking at run-time to prevent the use of illegal
array-indexes (at the expense of raising probably unattended exceptions). ")

#para("\

In safe programming languages such as Java and ML, plain and ungarnished
arrays cannot be safely supported due to the limitation of the underlying
type systems. Instead, arrszref-values (or something similar) are used to
represent arrays so that array-bounds checking can be performed at
run-time.  ")

")#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("arrayref")
#decldescrpt("\

Given a type T and an integer N, the type #stacode("arrayref(T, N)") is for
persistent arrays of size N in which each element is of the type T.

")

(* ****** ****** *)

#declnamesynop("arrayref_vt0ype_int_type")

(* ****** ****** *)

#declnamesynop("arrayptr_refize")

(* ****** ****** *)

#declnamesynop("arrayref_get_viewptr")

(* ****** ****** *)

#declnamesynop("arrayref_make_elt")

(* ****** ****** *)

#declnamesynop("arrayref_get_at")
#declnamesynop("arrayref_get_at_gint")
#declnamesynop("arrayref_get_at_guint")

(* ****** ****** *)

#declnamesynop("arrayref_set_at")
#declnamesynop("arrayref_set_at_gint")
#declnamesynop("arrayref_set_at_guint")

(* ****** ****** *)

#declnamesynop("arrayref_exch_at")
#declnamesynop("arrayref_exch_at_gint")
#declnamesynop("arrayref_exch_at_guint")

(* ****** ****** *)

#declnamesynop("fprint_arrayref")
#declnamesynop("fprint_arrayref_sep")
#decldescrpt("\

This function prints the elements in a given array to the output channel
provided as its first argument, interspersing the string #dyncode('sep')
between the printed array elements. Note that printing each array element is
handled by calling the function #dyncode("fprint_ref").

")

(* ****** ****** *)

#declnamesynop("arrayref_copy")

(* ****** ****** *)

#declnamesynop("arrayref_tabulate")

(* ****** ****** *)
//
// Arrays with size information
//
(* ****** ****** *)

#declnamesynop("arrszref")
#declnamesynop("arrszref_vt0ype_type")

(* ****** ****** *)

#declnamesynop("arrszref_make_arrpsz")
#declnamesynop("arrszref_make_arrayref")
#decldescrpt("\

This function combines an arrayref-value and its size into an
arrszref-value. ")

(* ****** ****** *)

#declnamesynop("arrszref_get_ref")
#decldescrpt("\

This function returns the pointer to the arrayref-value inside a given
arrszref-value.\

")

(* ****** ****** *)

#declnamesynop("arrszref_get_size")
#decldescrpt("This function returns the size of a given arrszref-value.")

(* ****** ****** *)

#declnamesynop("arrszref_get_refsize")
#decldescrpt("\

This function obtains the arrayref-value and its size in a given
arrszref-value. ")

(* ****** ****** *)

#declnamesynop("arrszref_make_elt")

(* ****** ****** *)

#declnamesynop("arrszref_get_at")
#declnamesynop("arrszref_get_at_gint")
#declnamesynop("arrszref_get_at_guint")

(* ****** ****** *)

#declnamesynop("arrszref_set_at")
#declnamesynop("arrszref_set_at_gint")
#declnamesynop("arrszref_set_at_guint")

(* ****** ****** *)

#declnamesynop("arrszref_exch_at")
#declnamesynop("arrszref_exch_at_gint")
#declnamesynop("arrszref_exch_at_guint")

(* ****** ****** *)

#declnamesynop("fprint_arrszref")
#declnamesynop("fprint_arrszref_sep")

(* ****** ****** *)

#declnamesynop("arrszref_tabulate")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop(".size")

(* ****** ****** *)

#declnamesynop(".head")
#declnamesynop(".tail")

(* ****** ****** *)

#declnamesynop("ptrcast")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [arrayref.atxt] *)
