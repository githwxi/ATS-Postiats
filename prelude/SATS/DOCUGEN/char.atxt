(* ****** ****** *)

%{
implement srcfilename_get () = "../char.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_char")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/char\
")

(* ****** ****** *)

#declpreamble('\
#para('\
This package contains various functions on (signed) chars and unsigned chars.
')
')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("g0ofg1_char")
#declnamesynop("g1ofg0_char")

(* ****** ****** *)

#declnamesynop("add_char0_int0")

(* ****** ****** *)

#declnamesynop("sub_char0_int0")
#declnamesynop("sub_char0_char0")

(* ****** ****** *)

#declnamesynop("lt_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is less than that of its second argument.
')
#declnamesynop("lt_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("lt_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("lte_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is less than or equal to that of its second argument.
')
#declnamesynop("lte_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("lte_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("gt_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is greater than that of its second argument.
')
#declnamesynop("gt_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("gt_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("gte_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is greater than or equal to that of its second argument.
')
#declnamesynop("gte_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("gte_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("eq_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is equal to that of its second argument.
')
#declnamesynop("eq_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("eq_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("neq_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is unequal to that of its second argument.
')
#declnamesynop("neq_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("neq_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("compare_char0_char0")
#decldescrpt('\

This function returns ~1, 0, and 1 if if the ascii code of its first
argument is less than, equal to, and greater than that of its second
argument.

')
#declnamesynop("compare_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("compare_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("print_char")
#declnamesynop("prerr_char")
#declnamesynop("fprint_char")

(* ****** ****** *)

#declnamesynop("isalpha")

#declnamesynop("isalpha_int")
#decldescrpt("
This function directly corresponds to the libc-function isalpha.
")
#declnamesynop("isalpha_char")
#decldescrpt("
This function is a slight variant of #dyncode("isalpha_int").
")

(* ****** ****** *)

#declnamesynop("isalnum")

#declnamesynop("isalnum_int")
#decldescrpt("
This function directly corresponds to the libc-function isalnum.
")
#declnamesynop("isalnum_char")
#decldescrpt("
This function is a slight variant of #dyncode("isalnum_int").
")

(* ****** ****** *)

#declnamesynop("isascii")

#declnamesynop("isascii_int")
#decldescrpt("
This function directly corresponds to the libc-function isascii.
")
#declnamesynop("isascii_char")
#decldescrpt("
This function is a slight variant of #dyncode("isascii_int").
")

(* ****** ****** *)

#declnamesynop("isblank")

#declnamesynop("isblank_int")
#decldescrpt("
This function directly corresponds to the libc-function isblank.
")
#declnamesynop("isblank_char")
#decldescrpt("
This function is a slight variant of #dyncode("isblank_int").
")

(* ****** ****** *)

#declnamesynop("isspace")

#declnamesynop("isspace_int")
#decldescrpt("
This function directly corresponds to the libc-function isspace.
")
#declnamesynop("isspace_char")
#decldescrpt("
This function is a slight variant of #dyncode("isspace_int").
")

(* ****** ****** *)

#declnamesynop("iscntrl")

#declnamesynop("iscntrl_int")
#decldescrpt("
This function directly corresponds to the libc-function iscntrl.
")
#declnamesynop("iscntrl_char")
#decldescrpt("
This function is a slight variant of #dyncode("iscntrl_int").
")

(* ****** ****** *)

#declnamesynop("isdigit")

#declnamesynop("isdigit_int")
#decldescrpt("
This function directly corresponds to the libc-function isdigit.
")
#declnamesynop("isdigit_char")
#decldescrpt("
This function is a slight variant of #dyncode("isdigit_int").
")

(* ****** ****** *)

#declnamesynop("isxdigit")

#declnamesynop("isxdigit_int")
#decldescrpt("
This function directly corresponds to the libc-function isxdigit.
")
#declnamesynop("isxdigit_char")
#decldescrpt("
This function is a slight variant of #dyncode("isxdigit_int").
")

(* ****** ****** *)

#declnamesynop("isgraph")

#declnamesynop("isgraph_int")
#decldescrpt("
This function directly corresponds to the libc-function isgraph.
")
#declnamesynop("isgraph_char")
#decldescrpt("
This function is a slight variant of #dyncode("isgraph_int").
")

(* ****** ****** *)

#declnamesynop("isprint")

#declnamesynop("isprint_int")
#decldescrpt("
This function directly corresponds to the libc-function isprint.
")
#declnamesynop("isprint_char")
#decldescrpt("
This function is a slight variant of #dyncode("isprint_int").
")

(* ****** ****** *)

#declnamesynop("ispunct")

#declnamesynop("ispunct_int")
#decldescrpt("
This function directly corresponds to the libc-function ispunct.
")
#declnamesynop("ispunct_char")
#decldescrpt("
This function is a slight variant of #dyncode("ispunct_int").
")

(* ****** ****** *)

#declnamesynop("islower")

#declnamesynop("islower_int")
#decldescrpt("
This function directly corresponds to the libc-function islower.
")
#declnamesynop("islower_char")
#decldescrpt("
This function is a slight variant of #dyncode("islower_int").
")

(* ****** ****** *)

#declnamesynop("isupper")

#declnamesynop("isupper_int")
#decldescrpt("
This function directly corresponds to the libc-function isupper.
")
#declnamesynop("isupper_char")
#decldescrpt("
This function is a slight variant of #dyncode("isupper_int").
")

(* ****** ****** *)

#declnamesynop("toascii")
#decldescrpt("
This function directly corresponds to the libc-function toascii.
")

(* ****** ****** *)

#declnamesynop("tolower")

#declnamesynop("tolower_int")
#decldescrpt("
This function directly corresponds to the libc-function tolower.
")
#declnamesynop("tolower_char")
#decldescrpt("
This function is a slight variant of #dyncode("tolower_int").
")

(* ****** ****** *)

#declnamesynop("toupper")

#declnamesynop("toupper_int")
#decldescrpt("
This function directly corresponds to the libc-function toupper.
")
#declnamesynop("toupper_char")
#decldescrpt("
This function is a slight variant of #dyncode("toupper_int").
")

(* ****** ****** *)

#declnamesynop("int2digit")
#decldescrpt("
This function turns a single decimal digit integer into the character
representing it.\
")
#declnamesynop("int2xdigit")
#decldescrpt("
This function turns a single hexadecimal digit integer into the (lowercase)
character representing it.\
")
#declnamesynop("int2xxdigit")
#decldescrpt("
This function turns a single hexadecimal digit integer into the (uppercase)
character representing it.\
")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("g0ofg1")
#declnamesynop("g1ofg0")

(* ****** ****** *)

#declnamesynop("+")
#declnamesynop("-")

(* ****** ****** *)

#declnamesynop("<")
#declnamesynop("<=")
#declnamesynop(">")
#declnamesynop(">=")
#declnamesynop("=")
#declnamesynop("!=")

(* ****** ****** *)

#declnamesynop("compare")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [char.atxt] *)
