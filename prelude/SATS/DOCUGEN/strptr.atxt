(* ****** ****** *)

%{
implement srcfilename_get () = "../strptr.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_strptr")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/strptr\
")

(* ****** ****** *)

#declpreamble('\

#para("\
This package contains common functions for processing linear strings.\
")

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("lemma_strptr_param")
#declnamesynop("lemma_strnptr_param")

(* ****** ****** *)

#declnamesynop("strptr2ptr")
#declnamesynop("strnptr2ptr")
#declnamesynop("strptr2strnptr")
#declnamesynop("strnptr2strptr")

(* ****** ****** *)

#declnamesynop("strptr2string")
#declnamesynop("strnptr2string")
#declnamesynop("strptr2stropt")
#declnamesynop("strnptr2stropt")

(* ****** ****** *)

#declnamesynop("strptr_is_null")
#declnamesynop("strptr_isnot_null")

(* ****** ****** *)

#declnamesynop("lt_strptr_strptr")
#declnamesynop("lte_strptr_strptr")
#declnamesynop("gt_strptr_strptr")
#declnamesynop("gte_strptr_strptr")
#declnamesynop("eq_strptr_strptr")
#declnamesynop("neq_strptr_strptr")

#declnamesynop("compare_strptr_strptr")

(* ****** ****** *)

#declnamesynop("print_strptr")
#declnamesynop("prerr_strptr")
#declnamesynop("fprint_strptr")

(* ****** ****** *)

#declnamesynop("strnptr_get_at")
#declnamesynop("strnptr_get_at_gint")
#declnamesynop("strnptr_get_at_guint")

(* ****** ****** *)

#declnamesynop("strnptr_set_at")
#declnamesynop("strnptr_set_at_gint")
#declnamesynop("strnptr_set_at_guint")

(* ****** ****** *)

#declnamesynop("strptr_length")
#decldescrpt("\

This function returns the length of a given linear string. In the special
case where the argument is the null-pointer, the function returns ~1
(negative 1).

")

#declnamesynop("strnptr_length")
#decldescrpt("\

This function does the same as #dyncode("strptr_length") but it is
assigned a more informative type.

")

(* ****** ****** *)

#declnamesynop("strptr_append")
#decldescrpt("\

This function returns a linear string that is the concatenation of its two
arguments. In the case where both of the arguments are null, the function
returns the null-pointer.

")
#declnamesynop("strnptr_append")
#decldescrpt("\

This function returns a linear string that is the concatenation of its two
arguments. Note that neither of the two arguments can be null.

")

(* ****** ****** *)

#declnamesynop("strptrlst_concat")
#decldescrpt("\

This function returns a linear string that is the concatenation of the
linear strings in its argument. Note that the argument (including all of
the linear strings in it) is freed or consumed after a call to the function
returns. ")

(* ****** ****** *)

#declnamesynop("strnptr_foreach$cont")
#declnamesynop("strnptr_foreach$fwork")

#declnamesynop("strnptr_foreach")
#decldescrpt('\

This function traverses a given linear string from left to right and
applies to each encountered char-cell the function implemented by
#dyncode("strnptr_foreach$fwork"). The traversal stops if the function
implemented by #dyncode("strnptr_foreach$cont") returns false.  ')
#declexample("\

The following code implements a function that captializes each letter in a
given linear string:

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
fun strnptr_upperize
  {n:nat} (str: !strnptr n): void = let
//
implement(env)
strnptr_foreach$fwork<env>
  (c, env) = c := $UN.cast{charNZ}(toupper_char(c))
//
val _(*n*) = strnptr_foreach (str)
//
in
  // nothing
end // end of [strnptr_upperize]
')
")

#declnamesynop("strnptr_foreach_env")

(* ****** ****** *)

#declnamesynop("strnptr_rforeach$cont")
#declnamesynop("strnptr_rforeach$fwork")
#declnamesynop("strnptr_rforeach")
#declnamesynop("strnptr_rforeach_env")

(* ****** ****** *)

//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("<")
#declnamesynop("<=")
#declnamesynop(">")
#declnamesynop(">=")
#declnamesynop("=")
#declnamesynop("!=")

(* ****** ****** *)

#declnamesynop("compare")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("length")

(* ****** ****** *)

#declnamesynop("copy")
#declnamesynop("free")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [strptr.atxt] *)
