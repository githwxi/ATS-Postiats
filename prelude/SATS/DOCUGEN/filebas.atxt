(* ****** ****** *)

%{
implement srcfilename_get () = "../filebas.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_filebas")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/filebas\
")

(* ****** ****** *)

#declpreamble('\
#para("\

The functions declared in this package are mostly provided
for the sake of convenience.  For full-fledged IO support,
please see [ATSLIB/libc/SATS/stdio.sats].\

") ')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("dirsep_get")
#decldescrpt('\
This function returns the character for separating directory names
in a vaild path. In Unix-like systems, this character is the slash
symbol (/).
')

(* ****** ****** *)

#declnamesynop("dirname_self")
#decldescrpt('\
This function returns the name referring to the self directory, which
is "." by default.
')

#declnamesynop("dirname_parent")
#decldescrpt('\
This function returns the name referring to the self directory, which
is ".." by default.
')

(* ****** ****** *)

#declnamesynop("filename_get_ext")
#declnamesynop("filename_get_base")

(* ****** ****** *)

#declnamesynop("test_file_exists")
#decldescrpt('\
This function tests whether a given path refers to a file in existence.
')

(* ****** ****** *)

#declnamesynop("test_file_mode")
#decldescrpt("\

This function calls [stat] to obtain the mode of a given file and then
applies its second argument f to the mode to return an integer: ~1/0/1
means error/false/true, respectively.

")
#declnamesynop("test_file_isblk")
#declnamesynop("test_file_ischr")
#declnamesynop("test_file_isdir")
#declnamesynop("test_file_isfifo")
#declnamesynop("test_file_isreg")

(* ****** ****** *)

#declnamesynop("fileref_open_exn")
#decldescrpt('\

This function calls the libc-function fclose (declared in [stdio.h]) to create
a handle for the file referred to by its first argument #dyncode("path")
and then set the mode of the created handle according to its second
argument #dyncode("fm"). In case of a failure, a fatal non-catchable
exception is raised.

')

#declnamesynop("fileref_open_opt")
#decldescrpt('\

This function is the optional version of #dyncode("fileref_open_exn"): The
returned value is an option that indicates whether a call to
#dyncode("fileref_open_opt") successfully yields a file handle or not.

')

(* ****** ****** *)

#declnamesynop("fileref_close")
#decldescrpt('\

This function calls the libc-function fclose (declared in [stdio.h]) to close a
given file handle. Note that #dyncode("fileref_close") does not report any
errors. ')

(* ****** ****** *)

#declnamesynop("fileref_flush")
#decldescrpt('\

This function calls the libc-function fflush (declared in [stdio.h]) to flush a
given file handle. Note that #dyncode("fileref_flush") does not report any
errors.

')

(* ****** ****** *)

#declnamesynop("fileref_getc")
#decldescrpt('\

This function reads a char from a given file handle. Note that the function
is based on the libc-function #dyncode("fgetc"), and it returns a negative
integer (EOF) as an indication of error.

')

(* ****** ****** *)

#declnamesynop("fileref_putc")

(* ****** ****** *)

#declnamesynop("fileref_putc_int")
#decldescrpt('\

This function, which overloads the symbol #dyncode("fileref_putc"), casts
its first argument into a char and then write the char to a given file
handle. Note that the function is based on the libc-function #dyncode("fputc"),
and it does not report any errors.\

')
#declnamesynop("fileref_putc_char")
#decldescrpt('\

This function, which  overloads the symbol #dyncode("fileref_putc"), writes
a char  to a  given file  handle. Note that  the function  is based  on the
libc-function #dyncode("fputc"), and it does not report any errors.\

')

(* ****** ****** *)

#declnamesynop("fileref_puts")
#decldescrpt('\

This function writes a string to a given file handle. Note that the
function is based on the libc-function #dyncode("fputs"), and it does not
report any errors. The following code gives a reference implementation of
the function:

#pats2xhtmld_tryit('\
implement
fileref_puts
  (out, str) = let
//
val str = g1ofg0_string(str)
//
implement{env}
string_foreach$cont (c, env) = true
implement{env}
string_foreach$fwork (c, env) = fileref_putc (out, c)
//
val _ = string_foreach (str)
//
in
  // nothing
end // end of [fileref_puts]
')\

')

(* ****** ****** *)

#declnamesynop("fileref_is_eof")
#decldescrpt('\

This function tests whether the end of a given file handle is reached.  It
is based on the libc-function #dyncode("feof") declared in [stdio.h].\

')
#declexample('\

The following code gives a naive implementation of file-copying:

#pats2xhtmld_tryit('\
fun fprint_fileref
(
  out: FILEref, inp: FILEref
) : void = let
in
  if ~fileref_is_eof(inp) then let
    val () = fileref_putc (out, fileref_getc (inp))
  in
    fprint_fileref (out, inp)
  end else () // end of [if]
end // end of [fprint_fileref]

implement
main () = let
  val () = fprint_fileref (stdout_ref, stdin_ref) in 0(*normal*)
end // end of [main]
')
')

(* ****** ****** *)

#declnamesynop("fileref_load_type")

(* ****** ****** *)

#declnamesynop("fileref_load")
#decldescrpt('\

This function loads a value from a given file handle into a given variable,
and returns a boolean to indicate whether loading is successful or not. It
is only implemented for certain template arguments.

')

#declnamesynop("fileref_load_int")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a integer.
')
#declnamesynop("fileref_load_char")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a character.
')
#declnamesynop("fileref_load_double")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a double-precision float.
')
#declnamesynop("fileref_load_string")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a doubly-quoted string.
')

(* ****** ****** *)

#declnamesynop("fileref_get_optval")
#decldescrpt('\

This function reads a value from a given file handle. It is only
implemented for certain template arguments.  ')

(* ****** ****** *)

#declnamesynop("fileref_get_line_charlst")
#decldescrpt('\

This function reads chars from a given file handle until a newline
symbol or EOF is reached and it then returns a linear list of the chars in
the order they were read. Note that the newline symbol is not included in
the chars returned.  ')

(* ****** ****** *)

#declnamesynop("fileref_get_lines_charlstlst")
#decldescrpt('\

This function returns a linear list consisting of all the lines read from a
given file handle. Note that each of the returned lines is obtained by
calling #dyncode("fileref_get_line_charlst").

')

(* ****** ****** *)

#declnamesynop("fileref_get_line_string")
#decldescrpt('\

This function returns a line read from a given file handle.
It is just a specialization of #dyncode("fileref_get_line_string_main"),
and its implementation is given as follows:

#pats2xhtmld_tryit('\
implement{}
fileref_get_line_string
  (filr) = let
  var n: int // uninitialized
  val str = fileref_get_line_string_main (filr, n)
  prval () = lemma_strnptr_param (str)
in
  strnptr2strptr (str)
end // end of [fileref_get_line_string]
')
')

(* ****** ****** *)

#declnamesynop("fileref_get_line_string_main")
#decldescrpt('\

This function returns a line read from a given file handle and records
the length of the line in its second (call-by-reference) argument. Note
that the length information can only be trusted if there are no occurrences
of the NUL char in the line.\

')

(* ****** ****** *)

#declnamesynop("fileref_get_lines_stringlst")
#decldescrpt('\

This function returns a linear list consisting of all the lines read from a
given file handle. Note that each of the returned lines is obtained by
calling #dyncode("fileref_get_line_string").

')

(* ****** ****** *)

#declnamesynop("fileref_get_line_string$bufsize")
#decldescrpt('\

This function returns the size of the initial buffer to be used by
#dyncode("fileref_get_line_string"). Note that
#dyncode("fileref_get_line_string") can automatically increase the size of
the buffer it uses if the buffer is not large enough.

')

(* ****** ****** *)

#declnamesynop("fileref_get_file_charlst")
#decldescrpt('\

This function reads chars from a given file handle until none is left
and it then returns a linear list of the chars in the order they were read.

')
#declexample('\

The following code prints out the content of a given file backwardly:

#pats2xhtmld_tryit('\
fun fprint_fileref_back
  (out: FILEref, inp: FILEref): void = let
  fun loop (cs: List_vt (char)):<cloref1> void =
    case+ cs of
    | ~list_vt_cons
        (c, cs) => let
        val () = fileref_putc (out, c) in loop (cs)
      end // end of [list_vt_cons]
    | ~list_vt_nil () => ()
  // end of [loop]
  val cs = fileref_get_file_charlst (inp)
in
  loop (list_vt_reverse (cs))
end // end of [fprint_fileref_back]

implement
main () = let
  val () = fprint_fileref_back (stdout_ref, stdin_ref) in 0(*normal*)
end // end of [main]
')
')

(* ****** ****** *)

#declnamesynop("fileref_get2_file_charlst")
#decldescrpt('\

This function reads chars from a given file handle until either the number
of chars being read reaches n (the value of the second argument) or no
char is left. It then returns a linear list consisting of the chars in the
order they were read and also updates the second argument with the length
of the returned list, that is, the number of chars being actually read.\

')

(* ****** ****** *)

#declnamesynop("fileref_put_charlst")
#decldescrpt('\

This function prints out the chars in its second argument to the file
handle provided as its first argument. Note that it does not report any
errors. ')

#declexample("\

The following code removes every empty line in a given file:

#pats2xhtmld_tryit("\
//
staload UN = \"prelude/SATS/unsafe.sats\"
//
fun remove_empty_lines
(
  out: FILEref, inp: FILEref, isfst: bool
) : void = let
  val EOL = '\\\n'
  val iseof = fileref_is_eof (inp)
in
//
if ~iseof then let
  var isfst: bool = isfst
  val cs =
    fileref_get_line_charlst (inp)
  // end of [val]
  val iscons = list_vt_is_cons (cs)
  val () = if iscons then {
    val () = if isfst then (isfst := false) else fileref_putc (out, EOL)
    val () = fileref_put_charlst (out, $UN.list_vt2t (cs))
  } // end of [if] // end of [val]
  val () = list_vt_free (cs)
in
  remove_empty_lines (out, inp, isfst)
end else () // end of [if]
//
end // end of [remove_empty_lines]

implement
main () = let
  val () = remove_empty_lines (stdout_ref, stdin_ref, true(*isfst*))
in
  0(*normal*)
end // end of [main]
")

Clearly, this is a wasteful and inefficient way of removing empty lines.

")

(* ****** ****** *)

#declnamesynop("fileref_foreach")
#decldescrpt('\

This function reads from a given file handle multiple characters and then
applies to them the function implemented by
#dyncode("fileref_foreach$fworkv"). It does so repeatedly until it can read
no more characters from the file handle.

')

#declnamesynop("fileref_foreach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("fileref_foreach")
except for taking an additional argument that serves as an environment.
Actually, #dyncode("fileref_foreach") is implemented as a special case of
#dyncode("fileref_foreach_env").

')

#declnamesynop("fileref_foreach$bufsize")
#decldescrpt('\

This function determines the size of the buffer allocated for storing
characters during the evaluation of a call to #dyncode("fileref_foreach_env").\

')

#declnamesynop("fileref_foreach$fwork")
#decldescrpt('\

This function is used in the default implementation of #dyncode("fileref_foreach$fworkv").\

')

#declnamesynop("fileref_foreach$fworkv")
#decldescrpt('\

This function is directly called in the implementation of #dyncode("fileref_foreach_env").\

')

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

(* end of [filebas.atxt] *)
