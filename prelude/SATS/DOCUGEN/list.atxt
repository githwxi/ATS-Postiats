(* ****** ****** *)

%{
implement srcfilename_get () = "../list.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_list")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/list\
")

(* ****** ****** *)

#declpreamble('\

#para('
This package contains a variety of common functions for creating and
manipulationg functional lists.
')

#para('\

A functional data structure is one that is immutable after creation; the
memory it occupies is heap-allocated, which can only be safely freed by a
garbage collector (GC).  The type for a singly-linked functional list
containing N elements of type T is denoted by #stacode("list(T, N)"), where
T is nonlinear. Note that the type constructor #stacode("list") is
co-variant in its first argument, that is, #stacode("list(T1, N)") is a
subtype of #stacode("list(T2, N)") if T1 is a subtype of T2.\

')

#para('\

Please see
#myatscodelink("prelude/SATS/list.sats", "list.sats") and
#myatscodelink("prelude/DATS/list.dats", "list.dats") for
the SATS file and DATS file in ATSLIB where the functions in this package
are declared and implemented.\

')

')#comment("declpreamble")

(* ****** ****** *)

#declname("list")
#declsynop2('\
#para('\
The full name for the list-type constructor #stacode("list") is
#stacode("list_t0ype_int_type"), which is given to the datatype declared as
follows:
#pats2xhtmls('\
datatype // t@ype+: covariant
list_t0ype_int_type
  (a:t@ype+, int) =
  | list_nil (a, 0) of ()
  | {n:int | n >= 0}
    list_cons (a, n+1) of (a, list_t0ype_int_type (a, n))
 // end of [list_t0ype_int_type]
')\
')')
#decldescrpt('\

There are two data constructors #dyncode("list_nil") and
#dyncode("list_cons") associated with #stacode("list"); the former
constructs a list of length 0, that is, an empty list while the latter
takes an element x and a list xs of length n to construct a list of length n+1
such that x and xs are the head and tail of the newly constructed list,
respectively.\

')

(* ****** ****** *)

#declnamesynop("List")
#decldescrpt('This type is for lists of unspecified length.')

(* ****** ****** *)

#declnamesynop("List0")
#decldescrpt('\

This type is for lists of unspecified length that is greater than or equal
to 0. Note that #stacode("List0") is essentially equivalent to
#stacode("List") since the length of a list can never be negative.  The
proof function #prfcode("lemma_list_param") can be called explicitly to
cast from #stacode("List") to #stacode("List0").\

')

(* ****** ****** *)

#declnamesynop("List1")
#decldescrpt('This type is for lists of unspecified positive length.')

(* ****** ****** *)

#declnamesynop("listLt")
#declnamesynop("listLte")
#declnamesynop("listGt")
#declnamesynop("listGte")
#declnamesynop("listBtw")
#declnamesynop("listBtwe")

(* ****** ****** *)

#declnamesynop("ListSubscriptExn")
#decldescrpt('\

By convention, this exception is raised to indicate a situation where a
list expected to be non-empty is actually empty.\

')

(* ****** ****** *)

#declnamesynop("lemma_list_param")
#decldescrpt('\

This proof function establishes that the integer n in any list type
#stacode("list(T, n)") is a natural number, where T is a nonlinear type.\

')

(* ****** ****** *)

#declnamesynop("list_cast")
#decldescrpt("\
This function can be employed to explicitly cast a list containing
elements of type T1 into another list containing elements of type T2
whenever T1 is a subtype of T2.
")

(* ****** ****** *)

#declnamesynop("list_vt2t")
#decldescrpt("\
This function does the same as #dyncode("list_of_list_vt")
")
#declnamesynop("list_of_list_vt")
#decldescrpt("\
This function casts a linear list-value into a nonlinear list-value.
")

(* ****** ****** *)

#declnamesynop("list_make_sing")
#decldescrpt("\

This function returns a list consisting of a single given value.\

")

#declnamesynop("list_make_pair")
#decldescrpt("\

This function returns a list consisting of a pair of given values.\

")

(* ****** ****** *)

#declnamesynop("list_make_elt")
#decldescrpt('\

Given a natural number n and an element x, this function returns a list
consisting of n occurrences of x.\

')

(* ****** ****** *)

#declnamesynop("list_make_intrange")
#decldescrpt('\

Given integers l and r satisfying l <= r, this function returns a list of
integers ranging from l until r-1, inclusive.

')
#declexample("\

The following code demonstrates two ways of constructing the same list of
digits:

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
implement
main0 () =
{
//
typedef T = int
//
val xs1 = list_make_intrange (0, 10)
val xs2 = (list)$arrpsz{T}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
val ((*void*)) = assertloc ($UN.list_vt2t{T}(xs1) = $UN.list_vt2t(xs2))
val ((*void*)) = list_vt_free (xs1)
val ((*void*)) = list_vt_free (xs2)
//
} (* end of [main0] *)
')
")

(* ****** ****** *)

#declnamesynop("list_make_array")
#decldescrpt('\

Given an array of size n, this function returns a linear list of length n
such that element i in the list is the element stored in cell i of the
array, where i ranges from 0 until n-1, inclusive.  ')

(* ****** ****** *)

#declnamesynop("list_make_arrpsz")
#decldescrpt("\

This function, which overloads the symbol #dyncode("list"), is often
conveniently employed to build a list of some fixed length. Note that the
argument of #dyncode("list_make_arrpsz") is a linear arrpsz-value, which is
consumed after #dyncode("list_make_arrpsz") returns.

")
#declexample("\

The following code demonstrates two ways of constructing lists of fixed
length:

#pats2xhtmld_tryit('\
implement
main0 () = {
  typedef T = int
  val xs1 = $list{T}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  val xs2 = (list)$arrpsz{T}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  val ((*void*)) = assertloc (xs1 = list_vt2t(xs2))
} // end of [main0]
')
")

(* ****** ****** *)

#declnamesynop("fprint_list")
#decldescrpt("\

This function prints the elements in a given list to the output
channel provided as its first argument, and it calls the function
#dyncode("fprint_list$sep") before printing an element as long as the
element is not the first one.  Note that printing each list element is
handled by calling the function #dyncode("fprint_val").\

")
#declexample("\

The following code builds a list of digits and then prints them onto the
standard output channel:

#pats2xhtmld_tryit('\
implement
main0 () =
{
//
typedef T = int
//
val out = stdout_ref
val digits =
  $list{T}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
val ((*void*)) = fprint_list<T> (out, digits)
val ((*void*)) = fprint_newline (out)
//
} (* end of [main0] *)
')
")

(* ****** ****** *)

#declnamesynop("fprint_list$sep")
#decldescrpt('\

This function is called by #dyncode("fprint_list") to print a separator
between two consecutive list elements. By default, it prints the comma
symbol (,).

')

(* ****** ****** *)

#declnamesynop("fprint_list_sep")
#decldescrpt('\

This function prints the elements in a given list to the output channel
provided as its first argument, interspersing the string #dyncode('sep')
between the printed list elements. Note that printing each list element is
handled by calling the function #dyncode("fprint_val").

')

(* ****** ****** *)

%{
(*
#declnamesynop("fprintlst_mac")
*)
%}

(* ****** ****** *)

%{
(*
#declnamesynop("fprint_listlist_sep")
*)
%}

(* ****** ****** *)

#declnamesynop("list_head")
#decldescrpt("\

This function returns the head of a given non-empty list. It is O(1)-time.

")

#declnamesynop("list_head_exn")
#decldescrpt("\

This function returns the head of a given list if the list is not
empty. Otherwise, it raise a run-time exception (#dyncode("ListSubscriptExn")).\

")

(* ****** ****** *)

#declnamesynop("list_tail")
#decldescrpt("\

This function returns the tail of a given non-empty list. It is O(1)-time.\

")

#declnamesynop("list_tail_exn")
#decldescrpt("\

This function returns the tail of a given list if the list is not
empty. Otherwise, it raise a run-time exception (#dyncode("ListSubscriptExn")).\

")

(* ****** ****** *)

#declnamesynop("list_last")
#decldescrpt("\

This function returns the last element of a given non-empty list. It is
O(n)-time, when n is the length of the given list.\

")

#declnamesynop("list_last_exn")
#decldescrpt("\

This function returns the last element of a given list if the list is not
empty. Otherwise, it raise a run-time exception (#dyncode("ListSubscriptExn")).\

")

(* ****** ****** *)

#declnamesynop("list_nth")
#decldescrpt("\

Given a list of length n and a natural number i less than n, this function
returns xs[i], that is, element i in xs.\

")

(* ****** ****** *)

#declnamesynop("list_get_at")
#decldescrpt("This function does the same as #dyncode("list_nth").")

(* ****** ****** *)

#declnamesynop("list_set_at")
#decldescrpt("

Given a list xs of length n, a natural number i less than n, and an element
x, this function returns another list obtained from replacing element i in
xs with x. \

")

(* ****** ****** *)

#declnamesynop("list_exch_at")
#decldescrpt("

Given a list xs of length n, a natural number i less than n, and an element
x, this function returns another list and another element such that the
list is obtained from replacing element i in xs with x and the element is
xs[i]. \

")

(* ****** ****** *)

#declnamesynop("list_insert_at")
#decldescrpt("\

Given a list xs of length n, a natural number i <= n, and an element x, this
function inserts x into xs so that x becomes element i in the returned list.\

")

(* ****** ****** *)

#declnamesynop("list_remove_at")
#decldescrpt("\

Given a list xs of length n and a natural number i < n, this function
returns a list obtained from removing xs[i] from xs.\

")

(* ****** ****** *)

#declnamesynop("list_takeout_at")
#decldescrpt("\

This function does the same as #dyncode("list_remove_at") except for
storing the removed element in its third call-by-reference argument.\

")

(* ****** ****** *)

#declnamesynop("list_length")
#decldescrpt("This function returns the length of a given list.")

(* ****** ****** *)

#declnamesynop("list_copy")
#decldescrpt("\

Given a list xs, this function returns a copy of xs. Note that the returned
copy is a linear list.\

")

(* ****** ****** *)

#declnamesynop("list_append")
#decldescrpt('\

This function, which overloads the symbol #dyncode("+"), returns a
concatenation of its first argument xs and second argument ys.  The
time-complexity of this function is O(m), where m is the length of xs. What
is special about the implementation of this function in ATSLIB is that it
is tail-recursive.

')
#declexample("\

The following code makes a simple use of #dyncode("list_append"):

#pats2xhtmld_tryit('\
implement
main0 () =
{
//
typedef T = int
//
val xs1 = $list{T} (0, 1, 2, 3, 4)
val xs2 = $list{T} (5, 6, 7, 8, 9)
val xs12 = $list{T} (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
val ((*void*)) = assertloc (xs1+xs2 = xs12)
//
} // end of [main0]
')

")

#declnamesynop("list_append1_vt")
#decldescrpt('\

Given a linear list xs and a list ys, this function returns a concatenation
of xs and ys. Note that the linear list xs is consumed in the construction of
the concatenation.

')

#declnamesynop("list_append2_vt")
#decldescrpt('\

Given a list xs and a linear list ys, this function returns a concatenation
of xs and ys. Note that the linear list ys is consumed in the construction of
the concatenation.

')

(* ****** ****** *)

#declnamesynop("list_extend")
#decldescrpt('\

Given a list xs and an element x, this function returns a list that is the
concatenation of xs and [x], which [x] refers to the singleton list
consisting of x alone. Note that the time-complexity of this is function is
O(n), where n is the length of xs.

')

#declnamesynop("list_snoc")

(* ****** ****** *)

#declnamesynop("list_reverse")
#decldescrpt('\

This function returns a list that is the reverse of its argument.

')

(* ****** ****** *)

#declnamesynop("list_reverse_append")
#decldescrpt('\

This function returns a list that is the concatenation of the reverse of
its first argument and its second argument.

')

#declnamesynop("list_reverse_append1_vt")
#decldescrpt('\

Given a linear list xs and a list ys, this function returns a concatenation
of the reverse of xs and ys. Note that the linear list xs is consumed in
the construction of the concatenation.

')

#declnamesynop("list_reverse_append2_vt")
#decldescrpt('\

Given a list xs and a linear list ys, this function returns a concatenation
of the reverse of xs and ys. Note that the linear list ys is consumed in
the construction of the concatenation.

')

(* ****** ****** *)

#declnamesynop("list_concat")
#decldescrpt("\

Given a list xss, this function builds a concatenation of xss[0],
xss[1], ..., and xss[n-1], where n is the length of xss and each xss[i]
refers to element i in xss.
")
#declexample("\

The following code makes a simple use of #dyncode("list_concat"):

#pats2xhtmld_tryit('\
implement
main0 () =
{
//
typedef T = int
//
val xs1 = $list{T}(1)
val xs2 = $list{T}(2)
val xs3 = $list{T}(3)
val xss = $list{List(T)}(xs1, xs2, xs3)
val xs123 = list_concat (xss) // xs123 = [1, 2, 3]
//
val out = stdout_ref
val ((*void*)) = fprintln! (out, "xs123 = ", xs123) // output 1,2,3
val ((*void*)) = list_vt_free (xs123)
//
} (* end of [main0] *)
')
")

(* ****** ****** *)

#declnamesynop("list_take")
#decldescrpt('\

This function returns a prefix of its first argument, where the length of
the prefix is specified by its second argument.

')
#declexample("\

The following code makes a simple use of #dyncode("list_take"):

#pats2xhtmld_tryit('\
implement
main0 () =
{
//
typedef T = int
//
val out = stdout_ref
val xs1 = $list{T}(0, 1, 2, 3, 4)
val n1 = list_length (xs1)
val xs2 = $list{T}(5, 6, 7, 8, 9)
//
val ((*void*)) = assertloc (xs1 = list_vt2t(list_take (xs1 + xs2, n1)))
//
} (* end of [main0] *)
')
")

#declnamesynop("list_take_exn")
#decldescrpt('\

This function is like #dyncode("list_take") except that it raises an
exception (#dyncode("ListSubscriptExn")) if its second argument exceeds the
length of its first argument.

')

(* ****** ****** *)

#declnamesynop("list_drop")
#decldescrpt('\

This function returns a suffix of its first argument, where the length of
the suffix is the length of the first argument minus the integer provided
as its second argument.  ')
#declexample("\

The following code makes a simple use of #dyncode("list_drop"):

#pats2xhtmld_tryit('\
implement
main0 () =
{
//
typedef T = int
//
val out = stdout_ref
val xs1 = $list{T}(0, 1, 2, 3, 4)
val n1 = list_length (xs1)
val xs2 = $list{T}(5, 6, 7, 8, 9)
//
val () = assertloc (xs2 = list_drop (xs1 + xs2, n1))
//
} (* end of [main0] *)
')
")

#declnamesynop("list_drop_exn")
#decldescrpt('\

This function is like #dyncode("list_drop") except that it raises an
exception (#dyncode("ListSubscriptExn")) if its second argument exceeds the
length of its first argument.

')

(* ****** ****** *)

#declnamesynop("list_split_at")
#decldescrpt('\

Given a list xs of length n and an integer i between 0 and n, inclusive,
this function returns a pair of lists of length i and n-i such that the
concatenation of the pair equals the given list xs.

')

(* ****** ****** *)

#declnamesynop("list_exists")
#decldescrpt('\

Given a list xs, this function returns true if and only if there exists an
element in xs that satisfies the predicate implemented by
#dyncode("list_exists$pred").

')

#declexample('\

The following code implements a function for removing the duplicates in a
given list:

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
fun{a:t0p}
list_remove_dup (
  xs: List (a), eq: (a, a) -<0> bool
) : List_vt (a) = let
  fun loop (
    xs: List (a), ys: List0_vt (a)
  ) : List_vt (a) =
    case+ xs of
    | list_cons (x, xs) => let
        implement
        list_exists$pred<a> (y) = eq (x, y)
        val found = list_exists<a> ($UN.list_vt2t(ys))
      in
        if found then loop (xs, ys) else loop (xs, list_vt_cons (x, ys))
      end // end of [list_cons]
    | list_nil () => ys
  // end of [loop]
in
  list_vt_reverse (loop (xs, list_vt_nil))
end // end of [list_remove_dup]
')\

Note that the order of elements in the returned list is consistent with
their order in the original list.

')

#declnamesynop("list_exists$pred")

(* ****** ****** *)

#declnamesynop("list_forall")
#decldescrpt('\

Given a list xs, this function returns true if and only if every element in
xs satisfies the predicate implemented by #dyncode("list_forall$pred").

')

#declnamesynop("list_forall$pred")

(* ****** ****** *)

#declnamesynop("list_equal")
#decldescrpt('\

Given two lists xs1 and xs2 of length n1 and n2, respectively, this
function returns true if and only if xs1 and xs2 are of the same length and
the predicate implemented by #dyncode("list_equal$pred") holds on each
pair (xs1[i], xs2[i]), where i ranges from 0 until n1-1, inclusive, and
xs1[i] (xs2[i]) refers to element i in xs1 (xs2). ')

#declnamesynop("list_equal$eqfn")
#decldescrpt("\

This function is called in the implementation of #dyncode("list_equal") to
perform equality test on list elements, and its default implementation is
based on #dyncode("gequal_val"):

#pats2xhtmld_tryit("\
implement{a}
list_equal$eqfn (x, y) = gequal_val<a> (x, y)
")
")

(* ****** ****** *)

#declnamesynop("list_find")

#declnamesynop("list_find$pred")

#declnamesynop("list_find_exn")
#decldescrpt('\

Given a list xs, this function returns xs[i] (element i in xs) for the
least index i such that xs[i] satisfies the predicate implemented by
#dyncode("list_find$pred"). In case there is no such an element, the
function raises an exception (#dyncode("NotFoundExn")).

')
#declexample("\

The following code finds the first odd number in a give list:

#pats2xhtmld_tryit("\
implement
main () = 0 where {
//
val xs = $list{int}(0, 1, 2, 3, 4)
//
implement
list_find$pred<int> (x) = x mod 2 = 1
//
val () = assertloc (1 = list_find_exn<int> (xs))
} // end of [main]
")
")

#declnamesynop("list_find_opt")
#decldescrpt('\

This function is the optional version of #dyncode("list_find_exn").

')

(* ****** ****** *)

#declnamesynop("list_assoc")
#declnamesynop("list_assoc$eqfn")

#declnamesynop("list_assoc_exn")
#declnamesynop("list_assoc_opt")

(* ****** ****** *)

#declnamesynop("list_filter")
#decldescrpt('\

Given a list xs, this function returns a linear list consisting elements in
xs that satisfy the predicate implemented by #dyncode("list_filter$pred").
The implementation of this function in ATSLIB is tail-recursive.\

')

#declnamesynop("list_filter$pred")

(* ****** ****** *)

#declnamesynop("list_labelize")
#decldescrpt('\

Given a list xs of length n, this function returns a linear list consisting
pairs (i, xs[i]), where i ranges from 0 until n-1, inclusive, and xs[i]
refers to element i in xs.  The implementation of this function in ATSLIB
is tail-recursive.\

')

(* ****** ****** *)

#declnamesynop("list_app")
#decldescrpt('\

This function traverses a given list, applying to each encountered element
the function implemented by #dyncode("list_app$fwork").\

')
#declexample("\

The following code tallies all the integers in a given list:

#pats2xhtmld_tryit('\
//
staload
UN = "prelude/SATS/unsafe.sats"
//
implement
main () = 0 where {
//
var sum: int = 0
val p_sum = addr@sum
//
local
//
implement
list_app$fwork<int> (x) =
  $UN.ptr0_addby<int> (p_sum, x)
//
in (*in-of-local*)
//
val () = list_app<int> ($list{int}(1, 2, 3, 4, 5))
//
end // end of [local]
//
val () = assertloc (sum = 1+2+3+4+5)
//
} // end of [main]
')
")

#declnamesynop("list_app$fwork")

(* ****** ****** *)

#declnamesynop("list_map")
#decldescrpt('\

Given a list xs of length n, this function returns a linear list consisting
f(xs[i]), where i ranges from 0 until n-1, xs[i] refers to element i in xs
and f is the function implemented by #dyncode("list_map$fopr").  The
implementation of this function in ATSLIB is tail-recursive.\

')

#declnamesynop("list_map$fopr")

(* ****** ****** *)

#declnamesynop("list_imap")
#decldescrpt('\

Given a list xs of length n, this function returns a linear list consisting
f(i, xs[i]), where i ranges from 0 until n-1, xs[i] refers to element i in
xs, and f is the function implemented by #dyncode("list_imap$fopr").  The
implementation of this function in ATSLIB is tail-recursive.

')

#declnamesynop("list_imap$fopr")

(* ****** ****** *)

#declnamesynop("list_mapopt")
#decldescrpt('\

Given a list xs, this function applies the function implemented by
#dyncode("list_mapopt$fopr") to each element x in xs; if the application
returns an optional value of the form #dyncode("Some(y)") for some y, then
y is collected in the linear list returned by #dyncode("list_mapopt").
The implementation of this function in ATSLIB is tail-recursive.

')

#declnamesynop("list_mapopt$fopr")

(* ****** ****** *)

#declnamesynop("list_map2")
#decldescrpt('\

Given lists xs1 and xs2 of length n1 and n2, respectively, this function
returns a linear list consisting f(xs1[i], xs2[i]), where i ranges from 0
until min(n1,n2)-1, xs1[i] (xs2[i]) refers to element i in xs1 (xs2) and f is
the function implemented by #dyncode("list_map2$fopr").  The
implementation of this function in ATSLIB is tail-recursive.

')

#declnamesynop("list_map2$fopr")

(* ****** ****** *)

#declnamesynop("list_tabulate")
#decldescrpt('\

Given a natural number n, this function returns a linear list consisting of
f(i) for i ranging from 0 until n-1, inclusive, where f is the function
implemented by #dyncode("list_tabulate$fwork"). The implementation of this
function in ATSLIB is tail-recursive.

')
#declexample('\

The following code implements a function that returns a list of integers
between two given arguments:

#pats2xhtmld_tryit('\
fun list_make_intrange
  {l,r:int | l <= r} (
  l: int l, r: int r
) : list_vt (int, r-l) = let
//
implement
list_tabulate$fopr<int> (i) = l + i
//
in
  list_tabulate<int> (r-l)
end // end of [list_make_intrange]
')
')

#declnamesynop("list_tabulate$fopr")

(* ****** ****** *)

#declnamesynop("list_zip")
#decldescrpt('\

Given two lists xs and ys of length m and n, respectively, this function
zips them into a linear list xys of length min(m,n) such that element i in
xys is the pair of element i in xs and element i in ys, where i ranges from
0 until min(m,n)-1, inclusive.  The implementation of this function in
ATSLIB is tail-recursive.

')

(* ****** ****** *)

#declnamesynop("list_zipwith")
#decldescrpt('\

Given two lists xs and ys of length m and n, respectively, this function
returns a linear list consisting of f (xs[i], ys[i]), where f is the
function implemented by #dyncode("list_zipwith$fopr") and i ranges from 0
until min(m,n)-1, inclusive.  The implementation of this function in ATSLIB
is tail-recursive.

')

#declnamesynop("list_zipwith$fopr")

(* ****** ****** *)

#declnamesynop("list_cross")
#decldescrpt("\

Given two lists xs and ys of length m and n, respectively, this function
returns a linear list xys of length m*n that is the cross-product of xs and
ys. More specifically, element k in xys (for each k between 0 and m*n-1,
inclusive) equals (xs[i], ys[j]), where i = k/n and j=k-i*n.

")

(* ****** ****** *)

#declnamesynop("list_crosswith")
#decldescrpt("\

Given two lists xs and ys of length m and n, respectively, this function
returns a linear list xys of length m*n such that element k in xys (for
each k between 0 and m*n-1, inclusive) is the return value of f (xs[i],
ys[j]), where f is the function implemented by
#dyncode("list_crosswith$fopr"), and i = k/n and j=k-i*n. ")

#declexample("\

The following code builds a list of natural numbers by calling
#dyncode("list_crosswith"):

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
implement
main0 () =
{
//
typedef T = int
//
val xs = $list{int}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
val ys = $list{int}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
//
val xys = list_make_intrange (0, 100) // = 0, 1, 2, ..., 99
//
implement
list_crosswith$fopr<T,T><T> (x, y) = 10 * x + y
val xys2 = list_crosswith<T,T><T> (xs, ys) // = 0, 1, ..., 99
//
val () = assertloc ($UN.list_vt2t{T}(xys) = $UN.list_vt2t(xys2))
//
val () = list_vt_free<T> (xys)
val () = list_vt_free<T> (xys2)
//
} (* end of [main0] *)
')
")

#declnamesynop("list_crosswith$fopr")

(* ****** ****** *)

#declnamesynop("list_foreach")
#decldescrpt("\

Given a list xs of length n, this function applies to xs[i] the function
implemented by #dyncode("list_foreach$fwork"), where i ranges from 0 until
n-1, inclusive, and xs[i] refers to element i in xs.  ")

#declnamesynop("list_foreach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("list_foreach")
except for taking an additional argument that serves as an environment.  ')

#declexample("\
#pats2xhtmld_tryit('\
//
staload "contrib/libats-hwxi/testing/SATS/randgen.sats"
//
implement
main () = let
//
typedef T = int
\#define N 1000000
//
val xs = randgen_list<T> (N)
//
typedef env = T
implement
list_foreach$fwork<T><env> (x, env) = env := env + x
//
var res: env = 0
val () = list_foreach_env<T><env> (xs, res)
//  
val () = (
  print ("The total equals "); print res; print_newline ()
) // end of [val]
//
in
  0(*normal*)
end // end of [main]
')
")

#declnamesynop("list_foreach$cont")
#decldescrpt('\
The default implementation of this function always returns true.\
')

#declnamesynop("list_foreach$fwork")

(* ****** ****** *)

#declnamesynop("list_foreach2")
#decldescrpt("\

Given two lists xs and ys of length m and n, respectively, this function
applies to each pair (xs[i], ys[i]) the function implemented by
#dyncode("list_foreach2$fwork"), where i ranges from 0 until min(m, n)-1,
inclusive, and xs[i] (ys[i]) refers to element i in xs (ys).  ")

#declnamesynop("list_foreach2_env")

#declnamesynop("list_foreach2$cont")
#decldescrpt('\
The default implementation of this function always returns true.\
')

#declnamesynop("list_foreach2$fwork")

(* ****** ****** *)

#declnamesynop("list_iforeach")
#decldescrpt("\

Given a list xs of length n, this function applies to each pair (i, xs[i])
the function implemented by #dyncode("list_iforeach$fwork"), where i
ranges from 0 until n-1, inclusive, and xs[i] refers to element i in xs.
")
#declnamesynop("list_iforeach_env")

#declnamesynop("list_iforeach$cont")
#decldescrpt('\
The default implementation of this function always returns true.\
')
#declnamesynop("list_iforeach$fwork")

(* ****** ****** *)

#declnamesynop("list_iforeach2")
#decldescrpt("\

Given two lists xs and ys of length m and n, respectively, this function
applies to each tuple (i, xs[i], ys[i]) the function implemented by
#dyncode("list_iforeach2$fwork"), where i ranges from 0 until min(m, n)-1,
inclusive, and xs[i] (ys[i]) refers to element i in xs (ys).  ")

#declnamesynop("list_iforeach2_env")

(* ****** ****** *)

#declnamesynop("list_foldleft")
#decldescrpt("\

Given a list xs of length n, this function return the value of f(...f(ini,
xs[0])..., xs[n-1]), where the notation xs[i] refers element i in xs and f
is the function implemented by #dyncode("list_foldleft$fopr").

")
#declexample("\

The following code computes factorial of n for a given natural number n:\

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
fun factorial
  {n:nat} (n: int n): int = let
//
val xs = list_make_intrange (0, n)
implement
list_foldleft$fopr<int><int> (acc, x) = acc * (x+1)
val res = list_foldleft<int><int> ($UN.list_vt2t(xs), 1(*ini*))
val ((*void*)) = list_vt_free (xs)
//
in
  res
end // end of [factorial]
')
")

#declnamesynop("list_foldleft$fopr")

(* ****** ****** *)

#declnamesynop("list_mergesort")
#decldescrpt('\

Mergesort is of time-complexity O(n(log(n))), and it is a stable sorting
algorithm.  This function mergesorts its argument according to the
ordering implemented by #dyncode("list_mergesort$cmp") and returns a
linear list that is a sorted permutation of the argument. ')

#declexample('\

The following code mergesorts a given list of integers into a list of
ascending integers and a list of descending integers.\

#pats2xhtmld_tryit('\
implement
main () = let
//
val N = 10
val out = stdout_ref
//
typedef T = int
//
val xs =
  $list{T}(0, 9, 2, 7, 4, 5, 6, 3, 8, 1)
val ((*void*)) = fprint_list<T> (out, xs)
val ((*void*)) = fprint_newline (out)
//
implement
list_mergesort$cmp<T> (x1, x2) = compare (x1, x2)
//
val ys_inc = list_mergesort<T> (xs)
val ((*void*)) = fprintln! (out, "ys_inc = ", ys_inc)
val ((*void*)) = list_vt_free<T> (ys_inc)
//
implement
list_mergesort$cmp<T> (x1, x2) = ~compare (x1, x2)
//
val zs_dec = list_mergesort<T> (xs)
val ((*void*)) = fprintln! (out, "zs_inc = ", zs_dec)
val ((*void*)) = list_vt_free<T> (zs_dec)
//
in
  0(*normal*)
end // end of [main]
')')

#declnamesynop("list_mergesort$cmp")
#decldescrpt("\

This function is called in the implementation of #dyncode("list_mergesort") to
perform comparison test on list elements, and its default implementation is
based on #dyncode("gcompare_val"):

#pats2xhtmld_tryit("\
implement{a}
list_mergesort$cmp (x, y) = gcompare_val<a> (x, y)
")
")

(* ****** ****** *)

#declnamesynop("list_quicksort")
#decldescrpt('\

Quicksort is of time-complexity O(n(log(n))) on average (but can be O(n^2)
in the worse case), and it is not a stable sorting algorithm.  This
function quicksorts its argument according to the ordering implemented by
#dyncode("list_quicksort$cmp") and returns a linear list that is a sorted
permutation of the argument. ')

#declexample('\

The following code quicksorts a given list of integers into a list of
ascending integers and a list of descending integers.\

#pats2xhtmld_tryit('\
implement
main () = let
//
val N = 10
val out = stdout_ref
//
typedef T = int
val xs = $list{T}
  (0, 9, 2, 7, 4, 5, 6, 3, 8, 1)
val () =
  fprint_list<T> (out, xs)
val () = fprint_newline (out)
//
implement
list_quicksort$cmp<T> (x1, x2) = compare (x1, x2)
//
val ys_inc = list_quicksort<T> (xs)
val ((*void*)) = fprintln! (out, "ys_inc = ", ys_inc)
val ((*void*)) = list_vt_free<T> (ys_inc)
//
implement
list_quicksort$cmp<T> (x1, x2) = ~compare (x1, x2)
//
val zs_dec = list_quicksort<T> (xs)
val ((*void*)) = fprintln! (out, "zs_dec = ", zs_dec)
val ((*void*)) = list_vt_free<T> (zs_dec)
//
in
  0(*normal*)
end // end of [main]
')')

#declnamesynop("list_quicksort$cmp")
#decldescrpt("\

This function is called in the implementation of #dyncode("list_quicksort") to
perform comparison test on list elements, and its default implementation is
based on #dyncode("gcompare_val"):

#pats2xhtmld_tryit("\
implement{a}
list_quicksort$cmp (x, y) = gcompare_val<a> (x, y)
")
")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("+")
#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop(".head")
#declnamesynop(".tail")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("length")

(* ****** ****** *)

#declnamesynop("copy")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [list.atxt] *)
