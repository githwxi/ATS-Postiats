(* ****** ****** *)

%{
implement srcfilename_get () = "../integer.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_integer")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/integer\
")

(* ****** ****** *)

#declpreamble('\

#para("\
This package contains common functions on signed and unsigned integers of
various finite precision.
")

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("g0int2int")
#declnamesynop("g1int2int")

(* ****** ****** *)

#declnamesynop("g1ofg0_int")
#decldescrpt('\

This cast function is called to assign a dependent (or indexed) type to
an integer of a non-dependent (or un-indexed) type. It is for signed integers.

')

(* ****** ****** *)

#declnamesynop("g0string2int")
#decldescrpt('\

Given a string representation of an integer, this function, which is based
on the function #dyncode("atoi") in libc, returns the value of the integer.\

')

(* ****** ****** *)

#declnamesynop("g1int_get_index")

(* ****** ****** *)

#declnamesynop("g0int_neg")
#declnamesynop("g1int_neg")
#declnamesynop("g0int_succ")
#declnamesynop("g1int_succ")
#declnamesynop("g0int_pred")
#declnamesynop("g1int_pred")

(* ****** ****** *)

#declnamesynop("g0int_add")
#declnamesynop("g1int_add")

(* ****** ****** *)

#declnamesynop("g0int_sub")
#declnamesynop("g1int_sub")

(* ****** ****** *)

#declnamesynop("g0int_mul")
#declnamesynop("g1int_mul")
#declnamesynop("g1int_mul2")

(* ****** ****** *)

#declnamesynop("g0int_div")
#declnamesynop("g1int_div")
#declnamesynop("g1int_ndiv")
#declnamesynop("g1int_ndiv2")

(* ****** ****** *)

#declnamesynop("g0int_mod")
#declnamesynop("g1int_mod")
#declnamesynop("g1int_nmod")
#declnamesynop("g1int_nmod2")

(* ****** ****** *)

#declnamesynop("g0int_gcd")
#declnamesynop("g1int_gcd")
#declnamesynop("g1int_ngcd")
#declnamesynop("g1int_ngcd2")

(* ****** ****** *)

#declnamesynop("g0int_lt")
#decldescrpt('\
This function returns true if and only if its first argument is
less than its second argument. It is for signed integers.
')
#declnamesynop("g1int_lt")
#decldescrpt('\
This function does the same as #dyncode("g0int_lt") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_lte")
#decldescrpt('\
This function returns true if and only if its first argument is
less than or equal to its second argument. It is for signed integers.
')
#declnamesynop("g1int_lte")
#decldescrpt('\
This function does the same as #dyncode("g0int_lte") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_gt")
#decldescrpt('\
This function returns true if and only if its first argument is
greater than its second argument. It is for signed integers.
')
#declnamesynop("g1int_gt")
#decldescrpt('\
This function does the same as #dyncode("g0int_gt") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_gte")
#decldescrpt('\
This function returns true if and only if its first argument is
greater than or equal to its second argument. It is for signed integers.
')
#declnamesynop("g1int_gte")
#decldescrpt('\
This function does the same as #dyncode("g0int_gte") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_eq")
#decldescrpt('\
This function returns true if and only if its first argument is
equal to its second argument. It is for signed integers.
')
#declnamesynop("g1int_eq")
#decldescrpt('\
This function does the same as #dyncode("g0int_eq") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_neq")
#decldescrpt('\
This function returns true if and only if its first argument is
unequal to its second argument. It is for signed integers.
')
#declnamesynop("g1int_neq")
#decldescrpt('\
This function does the same as #dyncode("g0int_neq") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_compare")
#decldescrpt('\
This function returns -1, 0, and 1 if its first argument is
less than, equal to, and greater than its second argument, respectively.
It is for signed integers.
')
#declnamesynop("g1int_compare")
#decldescrpt('\
This function does the same as #dyncode("g0int_compare") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_max")
#decldescrpt('\
This function returns the maximum of its two arguments.
It is for signed integers.
')
#declnamesynop("g1int_max")
#decldescrpt('\
This function does the same as #dyncode("g0int_max") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("g0int_min")
#decldescrpt('\
This function returns the minimum of its two arguments.
It is for signed integers.
')
#declnamesynop("g1int_min")
#decldescrpt('\
This function does the same as #dyncode("g0int_min") but is assigned
a more informative dependent type.
')

(* ****** ****** *)

#declnamesynop("fprint_int")
#declnamesynop("fprint_lint")
#declnamesynop("fprint_llint")
#declnamesynop("fprint_ssize")

(* ****** ****** *)

#declnamesynop("g0int2uint")
#declnamesynop("g0uint2int")
#declnamesynop("g0uint2uint")

(* ****** ****** *)

#declnamesynop("g1int2uint")
#declnamesynop("g1uint2int")
#declnamesynop("g1uint2uint")

(* ****** ****** *)

#declnamesynop("g1ofg0_uint")

(* ****** ****** *)

#declnamesynop("g0string2uint")

(* ****** ****** *)

#declnamesynop("g1uint_get_index")

(* ****** ****** *)

#declnamesynop("g0uint_succ")
#declnamesynop("g1uint_succ")
#declnamesynop("g0uint_pred")
#declnamesynop("g1uint_pred")

(* ****** ****** *)

#declnamesynop("g0uint_add")
#declnamesynop("g1uint_add")
#declnamesynop("g0uint_sub")
#declnamesynop("g1uint_sub")
#declnamesynop("g0uint_mul")
#declnamesynop("g1uint_mul")
#declnamesynop("g1uint_mul2")
#declnamesynop("g0uint_div")
#declnamesynop("g1uint_div")
#declnamesynop("g0uint_mod")
#declnamesynop("g1uint_mod")

(* ****** ****** *)

#declnamesynop("g0uint_lt")
#decldescrpt('\
This function returns true if and only if its first argument is
less than its second argument. It is for unsigned integers.
')
#declnamesynop("g1uint_lt")

(* ****** ****** *)

#declnamesynop("g0uint_lte")
#decldescrpt('\
This function returns true if and only if its first argument is
less than or equal to its second argument. It is for unsigned integers.
')
#declnamesynop("g1uint_lte")

(* ****** ****** *)

#declnamesynop("g0uint_gt")
#decldescrpt('\
This function returns true if and only if its first argument is
greater than its second argument. It is for unsigned integers.
')
#declnamesynop("g1uint_gt")

(* ****** ****** *)

#declnamesynop("g0uint_gte")
#decldescrpt('\
This function returns true if and only if its first argument is
greater than or equal to its second argument. It is for unsigned integers.
')
#declnamesynop("g1uint_gte")

(* ****** ****** *)

#declnamesynop("g0uint_eq")
#decldescrpt('\
This function returns true if and only if its first argument is
equal to its second argument. It is for unsigned integers.
')
#declnamesynop("g1uint_eq")

(* ****** ****** *)

#declnamesynop("g0uint_neq")
#decldescrpt('\
This function returns true if and only if its first argument is
unequal to its second argument. It is for unsigned integers.
')
#declnamesynop("g1uint_neq")

(* ****** ****** *)

#declnamesynop("g0uint_compare")
#declnamesynop("g1uint_compare")

(* ****** ****** *)

#declnamesynop("g0uint_max")
#declnamesynop("g1uint_max")
#declnamesynop("g0uint_min")
#declnamesynop("g1uint_min")

(* ****** ****** *)

#declnamesynop("fprint_uint")
#declnamesynop("fprint_ulint")
#declnamesynop("fprint_ullint")
#declnamesynop("fprint_size")

(* ****** ****** *)
//
// HX: various macdro definitions
//
(* ****** ****** *)

#declname("Macro Definitions")

(* ****** ****** *)
//
#declnamesynop("g0i2i")
#declnamesynop("g1i2i")
//
#declnamesynop("g0i2u")
#declnamesynop("g1i2u")
//
#declnamesynop("g0u2i")
#declnamesynop("g1u2i")
//
#declnamesynop("g0u2u")
#declnamesynop("g1u2u")
//
(* ****** ****** *)
//
#declnamesynop("i2u")
#declnamesynop("i2sz")
#declnamesynop("i2ssz")
//
#declnamesynop("u2i")
#declnamesynop("u2sz")
//
#declnamesynop("sz2i")
#declnamesynop("sz2u")
//
(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("g0ofg1")
#declnamesynop("g1ofg0")

(* ****** ****** *)

#declnamesynop("~")
#declnamesynop("neg")
#declnamesynop("abs")

(* ****** ****** *)

#declnamesynop("succ")
#declnamesynop("pred")
#declnamesynop("half")

(* ****** ****** *)

#declnamesynop("+")
#declnamesynop("-")
#declnamesynop("*")
#declnamesynop("/")
#declnamesynop("mod")

(* ****** ****** *)

#declnamesynop("isltz")
#declnamesynop("isltez")
#declnamesynop("isgtz")
#declnamesynop("isgtez")
#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("<")
#declnamesynop("<=")
#declnamesynop(">")
#declnamesynop(">=")
#declnamesynop("=")
#declnamesynop("!=")
#declnamesynop("compare")

(* ****** ****** *)

#declnamesynop("max")
#declnamesynop("min")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [integer.atxt] *)
