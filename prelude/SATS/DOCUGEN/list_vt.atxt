(* ****** ****** *)

%{
implement srcfilename_get () = "../list_vt.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_list_vt")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/list_vt\
")

(* ****** ****** *)

#declpreamble('\

#para('\

This package contains a variety of common functions for creating/freeing
and manipulating linear lists.  ')

#para('\

The type for a singly-linked linear list containing N elements of type T is
denoted by #stacode("list_vt(T, N)"), where T can be linear. The suffix
\"vt\" in the name list_vt stands for viewtype, which is the formal name
for linear type in ATS.  Note that the type constructor #stacode("list_vt")
is co-variant in its first argument, that is, #stacode("list_vt(T1, N)") is
a subtype of #stacode("list_vt(T2, N)") if T1 is a subtype of T2. The
low-level representation for list_vt is the same as that for a standard
singly-linked list in C, and it is fairly straightforward to implement
functions in C that can directly manipulate linear lists in ATS and vice
versa.\

')

#para('\

Please see
#myatscodelink("prelude/SATS/list_vt.sats", "list_vt.sats") and
#myatscodelink("prelude/DATS/list_vt.dats", "list_vt.dats")
(plus
#myatscodelink("prelude/DATS/list_vt_mergesort.dats", "list_vt_mergesort.dats"),
#myatscodelink("prelude/DATS/list_vt_quicksort.dats", "list_vt_quicksort.dats"))
for the SATS file and DATS files in ATSLIB where the functions in this
package are declared and implemented.\

')

')#comment("declpreamble")

(* ****** ****** *)

#declname("list_vt")
#declsynop2('\
#para('\
The full name for the list-type constructor #stacode("list_vt") is
#stacode("list_viewt0ype_int_viewtype"), which is given to the
linear datatype (dataviewtype) declared as follows:
#pats2xhtmls('\
dataviewtype // viewt@ype+: covariant
list_viewt0ype_int_viewtype
  (a:viewt@ype+, int) =
  | list_vt_nil (a, 0) of ()
  | {n:int | n >= 0}
    list_vt_cons (a, n+1) of (a, list_viewt0ype_int_viewtype (a, n))
// end of [list_viewt0ype_int_viewtype]
')')
')
#decldescrpt('\

There are two data constructors #dyncode("list_vt_nil") and
#dyncode("list_vt_cons") associated with #stacode("list_vt"); the former
constructs a list of length 0, that is, an empty list while the latter
takes an element x and a list xs of length n to construct a list of length n+1
such that x and xs are the head and tail of the newly constructed list,
respectively.\

')

(* ****** ****** *)

#declnamesynop("List_vt")
#decldescrpt('This type is for linear lists of unspecified length.')

(* ****** ****** *)

#declnamesynop("List0_vt")
#decldescrpt('\

This type is for linear lists of unspecified length that is greater than or
equal to 0. Note that #stacode("List0_vt") is essentially equivalent to
#stacode("List_vt") since the length of a list can never be negative.  The
proof function #prfcode("lemma_list_vt_param") can be called explicitly to
cast from #stacode("List_vt") to #stacode("List0_vt").\

')

(* ****** ****** *)

#declnamesynop("List1_vt")
#decldescrpt('This type is for linear lists of unspecified positive length.')

(* ****** ****** *)

#declnamesynop("listLt_vt")
#declnamesynop("listLte_vt")
#declnamesynop("listGt_vt")
#declnamesynop("listGte_vt")
#declnamesynop("listBtw_vt")
#declnamesynop("listBtwe_vt")

(* ****** ****** *)

#declnamesynop("lemma_list_vt_param")
#decldescrpt('\
This proof function establishes that the integer n in any linear list type
#stacode("list_vt(T, n)") is a natural number, where T can be a linear type.
')

(* ****** ****** *)

#declnamesynop("list_vt_cast")
#decldescrpt("\
This function can be employed to explicitly cast a linear list containing
elements of type T1 into another linear list containing elements of type T2
whenever T1 is a subtype of T2.
")

(* ****** ****** *)

#declnamesynop("list_vt_make_sing")
#decldescrpt("This function returns a linear list consisting of a given value.")
#declnamesynop("list_vt_make_pair")
#decldescrpt("This function returns a linear list consisting of two given values.")

(* ****** ****** *)

#declnamesynop("fprint_list_vt")
#decldescrpt("\

This function prints the elements in a given linear list to the output
channel provided as its first argument, and it calls the function
#dyncode("fprint_list_vt$sep") before printing an element as long as the
element is not the first one.  Note that printing each list element is
handled by calling the function #dyncode("fprint_ref").  ")

#declnamesynop("fprint_list_vt$sep")

(* ****** ****** *)

#declnamesynop("list_vt_is_nil")
#decldescrpt('\
This function returns true if and only if its argument is a linear list of
length 0.
')
#declnamesynop("list_vt_is_cons")
#decldescrpt('\
This function returns true if and only if its argument is a linear list of
some positive length.
')
#declnamesynop("list_vt_is_sing")
#decldescrpt('\
This function returns true if and only if its argument is a linear list of
length 1, that is, a singleton linear list.
')
#declnamesynop("list_vt_is_pair")
#decldescrpt('\
This function returns true if and only if its argument is a linear list of
length 2.
')

(* ****** ****** *)

#declnamesynop("list_vt_unnil")
#declnamesynop("list_vt_uncons")

(* ****** ****** *)

#declnamesynop("fprint_list_vt_sep")
#decldescrpt("\

This function prints the elements in a given linear list to the output
channel provided as its first argument, interspersing the string
#dyncode('sep') between the printed list elements. Note that printing each
list element is handled by calling the function #dyncode("fprint_ref").

")

(* ****** ****** *)

#declnamesynop("list_vt_length")
#decldescrpt('\
This function returns the length of a given linear list.
')

(* ****** ****** *)

#declnamesynop("list_vt_getref_at")
#decldescrpt('\

Given a linear list xs of length n and a natural number i <= n, this
function returns a pointer that points to the suffix of xs of length n-i.
While this function itself is safe, any subsequent use of the returned
pointer requires great caution. ')

(* ****** ****** *)

#declnamesynop("list_vt_get_at")
#declnamesynop("list_vt_set_at")
#declnamesynop("list_vt_exch_at")

(* ****** ****** *)

#declnamesynop("list_vt_insert_at")
#decldescrpt('\

Given a linear list xs of length n, a natural number i <= n, and an element
x, this inserts x into xs immediately after the first i elements so that x
becomes element i+1 in the returned list.\

')

(* ****** ****** *)

#declnamesynop("list_vt_takeout_at")
#decldescrpt('\

Given a linear list xs of length n and a natural number i < n, this function
takes out element i from xs.\

')

(* ****** ****** *)

#declnamesynop("list_vt_copy")
#decldescrpt('\

Given a linear list xs, this function returns a copy of xs.
Note that the elements of xs are required to be of a linear type.\

')
#declnamesynop("list_vt_copylin")
#decldescrpt('\

Given a linear list xs, this function returns a copy of xs.
Note that the elements of xs are copied by callig the function
#dyncode("list_vt_copylin$copy").\

')

(* ****** ****** *)

#declnamesynop("list_vt_free")
#decldescrpt('\

This function frees the memory occupied by a given linear list.
Note that the elements contained in the list must be nonlinear.\

')
#declnamesynop("list_vt_freelin")
#decldescrpt('\

This function frees the memory occupied by a given linear list.
Note that the elements contained in the list are freed by calling the
function #dyncode("list_vt_freelin$clear").\

')
#declnamesynop("list_vt_freelin$clear")

(* ****** ****** *)

#declnamesynop("list_vt_uninitize")
#declnamesynop("list_vt_uninitize_fun")
#decldescrpt('\
This function frees the elements in a given linear list (but keeps
the list itself).
')
#declnamesynop("list_vt_uninitize$clear")

(* ****** ****** *)

#declnamesynop("list_vt_append")
#decldescrpt('\

This functions appends its first list argument to its second list argument.
Note that the two list arguments are consumed in the construction of the
resulting list and thus no longer available after the function returns.
There is no memory allocation/deallocation involved.

')

(* ****** ****** *)

#declnamesynop("list_vt_extend")
#decldescrpt('\

Given a list xs and an element x, this function extends xs with x at the
end.  Note that the time-complexity of this is function is O(n), where n is
the length of xs.  ')

#declnamesynop("list_vt_snoc")

(* ****** ****** *)

#declnamesynop("list_vt_reverse")
#declnamesynop("list_vt_reverse_append")

(* ****** ****** *)

#declnamesynop("list_vt_concat")
#decldescrpt("\

Given a linear list xss, this function builds a concatenation of xss[0],
xss[1], ..., and xss[n-1], where n is the length of xss and each xss[i]
refers to element i in xss.  Note that xss is freed and all of its elements
are consumed in the construction of the returned list. In particular, there
is no memory allocation involved in a call to #dyncode("list_vt_concat").
")
#declexample("\

The following code makes a simple use of #dyncode("list_vt_concat"):

#pats2xhtmld_tryit('\
implement
main0 () = () where
{
//
typedef T = int
val xs1 = $list_vt{T}(1)
val xs2 = $list_vt{T}(2)
val xs3 = $list_vt{T}(3)
val xss = $list_vt{List_vt(T)}(xs1, xs2, xs3)
val xs123 = list_vt_concat (xss) // xs123 = [1, 2, 3]
//
val out = stdout_ref
val () = fprint_list_vt<T> (out, xs123) // printing out 1, 2, 3
val () = fprint_newline (out)
//
val () = list_vt_free<T> (xs123)
//
} // end of [main]
')
")

(* ****** ****** *)

#declnamesynop("list_vt_split_at")
#decldescrpt('\

Given a linear list xs of length n and an integer i between 0 and n,
inclusive, the function returns a prefix and a suffix of xs of length
i and n-i, respectively.\

')

(* ****** ****** *)

#declnamesynop("list_vt_separate")
#decldescrpt('\

This function splits a given linear list xs into two according to the
predicate implemented by #dyncode("list_vt_separate$pred"): the elements
left in xs satisfy the predicate while those in the returned list do not.

')
#declexample('\

The following code implements the standard quicksort on linear lists:

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
fun{a:vt0p}
list_vt_qsort
  {n:nat} .<n>.
(
  xs: list_vt (a, n), cmp: cmpref(a)
) : list_vt (a, n) = let
in
//
case+ xs of
| @list_vt_cons
    (x0, xs1) => let
    val p_x0 = addr@(x0)
//
    implement
    list_vt_separate$pred<a> (x) = let
      val (
        pf, fpf | p_x0
      ) = $UN.ptr_vtake{a}(p_x0)
      val ans = cmp (x, !p_x0) <= 0 // ascending order
      prval ((*void*)) = fpf (pf)
    in
      ans
    end // end of [list_vt_separate$pred]
//
    var xs11 = xs1
    // HX: xs11/xs12: <= x0 / > x0
    val xs12 =
      list_vt_separate<a> (xs11)
    val xs11 = list_vt_qsort<a> (xs11, cmp)
    val xs12 = list_vt_qsort<a> (xs12, cmp)
    val () = xs1 := xs12
    prval () = fold@ (xs)
  in
    list_vt_append (xs11, xs)
  end // end of [list_vt_cons]
| ~list_vt_nil () => list_vt_nil ()
//
end // end of [list_vt_qsort]
')

Note that there is no memory allocation/deallocation involved in this
implementation. It is formally verified in the type system of ATS that the
list returned by #dyncode("list_vt_qsort") is of the same length as its input.  On
a meta-level, it is evident that the returned list must be a permutation of
the input as linear elements cannot be either discarded or duplicated.

')

#declnamesynop("list_vt_separate$pred")

(* ****** ****** *)

#declnamesynop("list_vt_filter")
#declnamesynop("list_vt_filter$pred")

(* ****** ****** *)

#declnamesynop("list_vt_filterlin")
#declnamesynop("list_vt_filterlin$pred")
#declnamesynop("list_vt_filterlin$clear")

(* ****** ****** *)

#declnamesynop("list_vt_app")
#declnamesynop("list_vt_appfree")
#decldescrpt("\

This function is similar to #dyncode("list_vt_app"). However, it frees each
list node after applying to the node the function implemented by
#dyncode("list_vt_appfree$fwork").  ")

#declnamesynop("list_vt_app$fwork")
#declnamesynop("list_vt_appfree$fwork")

(* ****** ****** *)

#declnamesynop("list_vt_map")
#decldescrpt("\

Given a linear list xs of length n, this function returns a linear list
consisting f(xs[i]), where i ranges from 0 until n-1, xs[i] refers to
element i in xs and f is the function implemented by
#dyncode("list_map_vt$fopr"). Note that the given list xs is kept after the
function returns.  The implementation of this function in ATSLIB is
tail-recursive.\

")

#declnamesynop("list_vt_map$fopr")

(* ****** ****** *)

#declnamesynop("list_vt_mapfree")
#decldescrpt("\

This function is similar to #dyncode("list_vt_map"). However, it frees each
list node after applying to the node the function implemented by
#dyncode("list_vt_mapfree$fopr").\

")

#declnamesynop("list_vt_mapfree$fopr")

(* ****** ****** *)

#declnamesynop("list_vt_foreach")
#decldescrpt("\

Given a list xs of length n, this function traverses xs, applying to xs[i]
the function implemented by #dyncode("list_vt_foreach$fwork"), where i
ranges from 0 until n-1, inclusive, and xs[i], treated as a left-value,
refers to element i in xs.  The traversal stops if the function implemented
by #dyncode("list_vt_foreach$cont") returns false.  ")

#declnamesynop("list_vt_foreach_env")

#declnamesynop("list_vt_foreach$cont")
#decldescrpt('\
The default implementation of this function always returns true.\
')

#declnamesynop("list_vt_foreach$fwork")

(* ****** ****** *)

#declnamesynop("list_vt_iforeach")
#decldescrpt("\

Given a linear list xs of length n, this function traverses xs, applying to
(i, xs[i]) the function implemented by #dyncode("list_vt_iforeach$fwork"),
where i ranges from 0 until n-1, inclusive, and xs[i], treated as a
left-value, refers to element i in xs.  The traversal stops if the function
implemented by #dyncode("list_vt_foreach$cont") returns false.  ")

#declnamesynop("list_vt_iforeach_env")

#declnamesynop("list_vt_iforeach$cont")
#decldescrpt('\
The default implementation of this function always returns true.\
')

#declnamesynop("list_vt_iforeach$fwork")

(* ****** ****** *)

#declnamesynop("list_vt_mergesort")
#decldescrpt('\

Mergesort is of time-complexity O(n(log(n))), and it is a stable sorting
algorithm.  This function mergesorts its list argument according to the
ordering implemented by #dyncode("list_vt_mergesort$cmp"). Note that the
list argument is consumed in the construction of the resulting sorted list
and thus no longer available after the function returns.  There is no
memory allocation/deallocation involved in the implementation of
#dyncode("list_vt_mergesort").

')
#declexample('\

The following code mergesorts a list of integers into a list of ascending
integers:\

#pats2xhtmld_tryit('\
implement
main () = let
//
val N = 10
val out = stdout_ref
//
typedef T = int
val xs =
  $list_vt{T}(0, 9, 2, 7, 4, 5, 6, 3, 8, 1)
val () = fprint_list_vt_sep<T> (out, xs, "; ")
val () = fprint_newline (out)
//
implement
list_vt_mergesort$cmp<T> (x1, x2) = compare (x1, x2)
//
val ys =
  list_vt_mergesort<T> (xs)
val () = fprint_list_vt<T> (out, ys)
val () = fprint_newline (out)
val () = list_vt_free<T> (ys)
//
in
  0(*normal*)
end // end of [main]
')
')

#declnamesynop("list_vt_mergesort$cmp")
#decldescrpt("\

This function is called in the implementation of
#dyncode("list_vt_mergesort") to perform comparison test on list elements,
and its default implementation is based on #dyncode("gcompare_ref"):

#pats2xhtmld_tryit("\
implement{a}
list_vt_mergesort$cmp (x, y) = gcompare_ref<a> (x, y)
")
")

(* ****** ****** *)

#declnamesynop("list_vt_mergesort_fun")
#decldescrpt('\
This function does essentially the same as #dyncode("list_vt_mergesort")
except for allowing the comparison function to be provided as an argument.
')

(* ****** ****** *)

#declnamesynop("list_vt_quicksort")
#decldescrpt('\

Quicksort is of time-complexity O(n(log(n))) on average (but can be O(n^2)
in the worse case), and it is not a stable sorting algorithm.  This
function quicksorts its list argument according to the ordering implemented
by #dyncode("list_vt_quicksort$cmp"). Note that the list argument is
consumed in the construction of the resulting sorted list and thus no
longer available after the function returns. An implementation of this
function may copy the list into an array, sort the array, copy the array
back into the list, and then free the array.

')
#declexample('\

The following code quicksorts a list of integers into a list of ascending
integers:\

#pats2xhtmld_tryit('\
implement
main () = let
//
val N = 10
val out = stdout_ref
//
typedef T = int
val xs =
  $list_vt{T}(0, 9, 2, 7, 4, 5, 6, 3, 8, 1)
val () = fprint_list_vt_sep<T> (out, xs, "; ")
val () = fprint_newline (out)
//
implement
list_quicksort$cmp<T> (x1, x2) = compare (x1, x2)
//
val ys =
  list_vt_quicksort<T> (xs)
val () = fprint_list_vt<T> (out, ys)
val () = fprint_newline (out)
val () = list_vt_free<T> (ys)
//
in
  0(*normal*)
end // end of [main]
')
')

#declnamesynop("list_vt_quicksort$cmp")
#decldescrpt("\

This function is called in the implementation of
#dyncode("list_vt_quicksort") to perform comparison test on list elements,
and its default implementation is based on #dyncode("gcompare_ref"):

#pats2xhtmld_tryit("\
implement{a}
list_vt_quicksort$cmp (x, y) = gcompare_ref<a> (x, y)
")
")

(* ****** ****** *)

#declnamesynop("list_vt_quicksort_fun")
#decldescrpt('\
This function does essentially the same as #dyncode("list_vt_quicksort")
except for allowing the comparison function to be provided as an argument.
')

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("length")

(* ****** ****** *)

#declnamesynop("copy")
#declnamesynop("free")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [list_vt.atxt] *)
