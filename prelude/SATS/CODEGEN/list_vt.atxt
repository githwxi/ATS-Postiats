%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list_vt.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/list_vt.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

vtypedef
RD(a:vt0p) = a // for commenting: read-only
\#define NSH (x) x // for commenting: no sharing
\#define SHR (x) x // for commenting: it is shared

#atscode_separator()

\#if(0)
//
// HX: these decls are available in [basic_dyn.sats]
//
datavtype // vt@ype+: covariant
list_vt0ype_int_vtype (a:vt@ype+, int) =
  | {n:int | n >= 0}
    list_vt_cons (a, n+1) of (a, list_vt0ype_int_vtype (a, n))
  | list_vt_nil (a, 0) of ((*void*))
// end of [list_vt0ype_int_vtype]
//
stadef list_vt = list_vt0ype_int_vtype
vtypedef
List_vt (a:vt0p) = [n:int] list_vt (a, n)
vtypedef
List0_vt (a:vt0p) = [n:int | n >= 0] list_vt (a, n)
vtypedef
List1_vt (a:vt0p) = [n:int | n >= 1] list_vt (a, n)
vtypedef listLt_vt
  (a:vt0p, n:int) = [k:nat | k < n] list_vt (a, k)
vtypedef listLte_vt
  (a:vt0p, n:int) = [k:nat | k <= n] list_vt (a, k)
vtypedef listGt_vt
  (a:vt0p, n:int) = [k:int | k > n] list_vt (a, k)
vtypedef listGte_vt
  (a:vt0p, n:int) = [k:int | k >= n] list_vt (a, k)
vtypedef listBtw_vt
  (a:vt0p, m:int, n:int) = [k:int | m <= k; k < n] list_vt (a, k)
vtypedef listBtwe_vt
  (a:vt0p, m:int, n:int) = [k:int | m <= k; k <= n] list_vt (a, k)
//
\#endif

#atscode_separator()

\#define nil_vt list_vt_nil
\#define cons_vt list_vt_cons

#atscode_separator()

prfun
lemma_list_vt_param
  {x:vt0p}{n:int}
  (xs: !list_vt (INV(x), n)): [n >= 0] void
// end of [lemma_list_vt_param]

#atscode_separator()

castfn
list_vt_cast
  {x:vt0p}{n:int}
  (xs: list_vt (INV(x), n)):<> list_vt (x, n)
// end of [list_vt_cast]

#atscode_separator()

\#define list_vt_sing(x)
  list_vt_cons(x, list_vt_nil())
\#define list_vt_pair(x1, x2)
  list_vt_cons(x1, list_vt_cons (x2, list_vt_nil()))

#atscode_separator()

fun{x:vt0p}
list_vt_make_sing (x: x):<!wrt> list_vt (x, 1)
fun{x:vt0p}
list_vt_make_pair (x1: x, x2: x):<!wrt> list_vt (x, 2)

#atscode_separator()
//
fun{x:vt0p}
print_list_vt (xs: !List_vt (INV(x))): void
fun{x:vt0p}
prerr_list_vt (xs: !List_vt (INV(x))): void
//
fun{x:vt0p}
fprint_list_vt
  (out: FILEref, xs: !List_vt (INV(x))): void
fun{} fprint_list_vt$sep (out: FILEref): void
//
fun{x:vt0p}
fprint_list_vt_sep (
  out: FILEref, xs: !List_vt (INV(x)), sep: NSH(string)
) : void // end of [fprint_list_vt_sep]
//
#atscode_separator()
//
fun{x:vt0p}
list_vt_is_nil
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n==0)
//
fun{x:vt0p}
list_vt_is_cons
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n > 0)
//
#atscode_separator()

fun{x:vt0p}
list_vt_is_sing
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n==1)
// end of [list_vt_is_sing]

fun{x:vt0p}
list_vt_is_pair
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n==2)
// end of [list_vt_is_pair]

#atscode_separator()

fun{}
list_vt_unnil{x:vt0p} (xs: list_vt (x, 0)):<> void

#atscode_separator()

fun{x:vt0p}
list_vt_uncons{n:pos}
  (xs: &list_vt (INV(x), n) >> list_vt (x, n-1)):<!wrt> x
// end of [list_vt_uncons]

#atscode_separator()

fun{x:vt0p}
list_vt_length{n:int} (xs: !list_vt (INV(x), n)):<> int n

#atscode_separator()

fun{x:vt0p}
list_vt_getref_at
  {n:int}{i:nat | i <= n}
  (xs: &list_vt (INV(x), n), i: int i):<> cPtr1 (list_vt (x, n-i))
// end of [list_vt_getref_at]

#atscode_separator()
//
fun{x:t0p}
list_vt_get_at{n:int}
  (xs: !list_vt (INV(x), n), i: natLt n):<> x
//
fun{x:t0p}
list_vt_set_at{n:int}
  (xs: !list_vt (INV(x), n), i: natLt n, x: x):<!wrt> void
//
#atscode_separator()

fun{x:vt0p}
list_vt_exch_at{n:int}
  (xs: !list_vt (INV(x), n), i: natLt n, x: &x>>_):<!wrt> void
// end of [list_vt_exch_at]

#atscode_separator()

fun{x:vt0p}
list_vt_insert_at{n:int}
(
  xs: &list_vt (INV(x), n) >> list_vt (x, n+1), i: natLte n, x: x
) :<!wrt> void // end of [list_vt_insert_at]

fun{x:vt0p}
list_vt_takeout_at{n:int}
  (xs: &list_vt (INV(x), n) >> list_vt (x, n-1), i: natLt n):<!wrt> x
// end of [list_vt_takeout_at]

#atscode_separator()

fun{x:t0p}
list_vt_copy{n:int}
  (xs: !list_vt (INV(x), n)):<!wrt> list_vt (x, n)
// end of [list_vt_copy]

#atscode_separator()

fun{x:vt0p}
list_vt_copylin{n:int}
  (xs: !list_vt (INV(x), n)):<!wrt> list_vt (x, n)
fun{x:vt0p}
list_vt_copylin$copy (x: &RD(x)): (x)

#atscode_separator()

fun{x:t0p}
list_vt_free (xs: List_vt (INV(x))):<!wrt> void

#atscode_separator()

fun{x:vt0p}
list_vt_freelin (xs: List_vt (INV(x))):<!wrt> void
fun{x:vt0p}
list_vt_freelin$clear (x: &x >> x?):<!wrt> void

#atscode_separator()
//
fun{
x:vt0p
} list_vt_uninitize
  {n:int} (
  xs: !list_vt (INV(x), n) >> list_vt (x?, n)
) :<!wrt> void // end of [list_vt_uninitize]
//
fun{x:vt0p}
list_vt_uninitize$clear (x: &(x)>>x?):<!wrt> void
//
fun{
x:vt0p
} list_vt_uninitize_fun
  {n:int}{fe:eff} (
  xs: !list_vt (INV(x), n) >> list_vt (x?, n), f: (&x>>x?) -<fe> void
) :<fe> void // end of [list_vt_uninitize_fun]
//
#atscode_separator()

fun{
a:vt0p
} list_vt_append
  {n1,n2:int} (
  xs1: list_vt (INV(a), n1), xs2: list_vt (a, n2)
) :<!wrt> list_vt (a, n1+n2) // endfun

#atscode_separator()

fun{
x:vt0p
} list_vt_extend
  {n:int} (xs1: list_vt (INV(x), n), x2: x):<!wrt> list_vt (x, n+1)
// end of [list_vt_extend]

fun{x:vt0p}
list_vt_unextend{n:pos}
  (xs: &list_vt (INV(x), n) >> list_vt (x, n-1)):<!wrt> x
// end of [list_vt_unextend]

#atscode_separator()

macdef list_vt_snoc = list_vt_extend
macdef list_vt_unsnoc = list_vt_unextend

#atscode_separator()

fun{x:vt0p}
list_vt_reverse{n:int}
  (xs: list_vt (INV(x), n)):<!wrt> list_vt (x, n)
// end of [list_vt_reverse]

fun{a:vt0p}
list_vt_reverse_append{m,n:int}
  (list_vt (INV(a), m), list_vt (a, n)):<!wrt> list_vt (a, m+n)
// end of [list_vt_reverse_append]

#atscode_separator()

fun{x:vt0p}
list_vt_split_at
  {n:int}{i:nat | i <= n}
  (list_vt (INV(x), n), int i):<!wrt> (list_vt (x, i), list_vt (x, n-i))
// end of [list_vt_split_at]

#atscode_separator()

fun{x:vt0p}
list_vt_concat
  (xss: List_vt (List_vt (INV(x)))):<!wrt> List0_vt (x)
// end of [list_vt_concat]

#atscode_separator()

fun{x:vt0p}
list_vt_separate{n:int}
(
  xs: &list_vt (INV(x), n) >> list_vt (x, n1)
) : \#[n1:nat|n1 <= n] list_vt (x, n-n1)

fun{x:vt0p}
list_vt_separate$pred (x: &RD(x)): bool

#atscode_separator()

fun{x:t0p}
list_vt_filter{n:int}
  (x: list_vt (INV(x), n)):<!wrt> listLte_vt (x, n)
// end of [list_vt_filter]

fun{x:t0p}
list_vt_filter$pred (x: &RD(x)):<> bool

#atscode_separator()
//
fun{x:vt0p}
list_vt_filterlin
  {n:int} (list_vt (INV(x), n)):<!wrt> listLte_vt (x, n)
//
fun{x:vt0p}
list_vt_filterlin$pred (x: &RD(x)):<> bool
fun{x:vt0p}
list_vt_filterlin$clear (x: &x>>x?):<!wrt> void
//
#atscode_separator()

fun{x:vt0p}
list_vt_app (xs: !List_vt (INV(x))): void
fun{x:vt0p}
list_vt_app$fwork (x: &x >> _): void

#atscode_separator()

fun{x:vt0p}
list_vt_appfree (xs: List_vt (INV(x))): void
fun{x:vt0p}
list_vt_appfree$fwork (x: &x >> x?): void

#atscode_separator()

fun{
x:vt0p}{y:vt0p
} list_vt_map{n:int} (!list_vt (INV(x), n)): list_vt (y, n)
fun{
x:vt0p}{y:vt0p
} list_vt_map$fopr (x: &x >> _): (y)

#atscode_separator()

fun{
x:vt0p}{y:vt0p
} list_vt_map_fun{n:int}
  (xs: !list_vt (INV(x), n), f: (&x) -<fun1> y): list_vt(y, n)

fun{
x:vt0p}{y:vt0p
} list_vt_map_cloref{n:int}
  (xs: !list_vt (INV(x), n), f: (&x) -<cloref1> y): list_vt(y, n)

fun{
x:vt0p}{y:vt0p
} list_vt_map_clo{n:int}
  (xs: !list_vt (INV(x), n), f: &(&x) -<clo1> y): list_vt(y, n)

#atscode_separator()

fun{
x:vt0p}{y:vt0p
} list_vt_mapfree{n:int}
  (list_vt (INV(x), n)): list_vt (y, n)
fun{
x:vt0p}{y:vt0p
} list_vt_mapfree$fopr (x: x): (y)

#atscode_separator()
//
fun{
x:vt0p
} list_vt_foreach (xs: !List_vt (INV(x))): void
//
fun{
x:vt0p}{env:vt0p
} list_vt_foreach_env (xs: !List_vt (INV(x)), env: &(env) >> _): void
//
fun{
x:vt0p}{env:vt0p
} list_vt_foreach$cont (x: &x, env: &env): bool
fun{
x:vt0p}{env:vt0p
} list_vt_foreach$fwork (x: &x >> _, env: &(env) >> _): void
//
#atscode_separator()

fun{
x:vt0p
} list_vt_foreach_fun
  {fe:eff} (
  xs: !List_vt (INV(x)), f: (&x) -<fe> void
) :<fe> void // end of [list_vt_foreach_fun]
fun{
x:vt0p
} list_vt_foreach_funenv
  {v:view}{vt:viewtype}{fe:eff} (
  pfv: !v
| xs: !List_vt (INV(x)), f: (!v | &x, !vt) -<fe> void, env: !vt
) :<fe> void // end of [list_vt_foreach_funenv]

#atscode_separator()
//
fun{
x:vt0p
} list_vt_iforeach
  {n:int} (xs: !list_vt (INV(x), n)): natLte(n)
//
fun{
x:vt0p}{env:vt0p
} list_vt_iforeach_env
  {n:int} (xs: !list_vt (INV(x), n), env: &(env) >> _): natLte(n)
//
fun{
x:vt0p}{env:vt0p
} list_vt_iforeach$cont
  (i: intGte(0), x: &x, env: &env): bool
fun{
x:vt0p}{env:vt0p
} list_vt_iforeach$fwork
  (i: intGte(0), x: &x >> _, env: &(env) >> _): void
//
#atscode_separator()
//
fun{
a:vt0p
} list_vt_mergesort
  {n:int} (xs: list_vt (INV(a), n)):<!wrt> list_vt (a, n)
fun{
a:vt0p
} list_vt_mergesort$cmp (x1: &RD(a), x2: &RD(a)):<> int(*sgn*)
//
fun{
a:vt0p
} list_vt_mergesort_fun
  {n:int} (
  xs: list_vt (INV(a), n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_mergesort_fun]
//
#atscode_separator()
//
fun{
a:vt0p
} list_vt_quicksort
  {n:int} (xs: list_vt (INV(a), n)):<!wrt> list_vt (a, n)
fun{
a:vt0p
} list_vt_quicksort$cmp (x1: &RD(a), x2: &RD(a)):<> int(*sgn*)
//
fun{
a:vt0p
} list_vt_quicksort_fun
  {n:int} (
  xs: list_vt (INV(a), n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_quicksort_fun]
//
#atscode_separator()
//
// overloading for certain symbols
//
#atscode_separator()
//
overload [] with list_vt_get_at
overload [] with list_vt_set_at
//
overload iseqz with list_vt_is_nil
overload isneqz with list_vt_is_cons
//
overload length with list_vt_length
//
overload copy with list_vt_free
overload free with list_vt_free
//
overload print with print_list_vt
overload prerr with prerr_list_vt
overload fprint with fprint_list_vt
overload fprint with fprint_list_vt_sep
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_vt_atxt.txt")
%}\
