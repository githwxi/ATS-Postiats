%{
//
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"integer.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
//
#include "prelude_SATS_atext.hats"
//
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/integer.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()
//
// HX: for unindexed integer types
//
#atscode_separator()

sortdef tk = tkind

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()
//
stadef intknd = int_kind
stadef lintknd = lint_kind
stadef llintknd = llint_kind
stadef ssizeknd = ssize_kind
//
stadef uintknd = uint_kind
stadef ulintknd = ulint_kind
stadef ullintknd = ullint_kind
stadef sizeknd = size_kind
//
#atscode_separator()
//
fun{k1,k2:tk}
g0int2int (x: g0int (k1)):<> g0int (k2)
//
fun g0int2int_int_int (x: int):<> int = "mac\#%"
fun g0int2int_int_lint (x: int):<> lint = "mac\#%"
fun g0int2int_int_llint (x: int):<> llint = "mac\#%"
fun g0int2int_int_ssize (x: int):<> ssize_t = "mac\#%"
//
fun g0int2int_lint_int (x: int):<> int = "mac\#%"
fun g0int2int_lint_lint (x: int):<> lint = "mac\#%"
fun g0int2int_lint_llint (x: int):<> llint = "mac\#%"
fun g0int2int_lint_ssize (x: int):<> ssize_t = "mac\#%"
//
fun g0int2int_ssize_int (x: int):<> int = "mac\#%"
fun g0int2int_ssize_lint (x: int):<> lint = "mac\#%"
fun g0int2int_ssize_llint (x: int):<> llint = "mac\#%"
fun g0int2int_ssize_ssize (x: int):<> ssize_t = "mac\#%"
//
fun g0int2int_sint_int (x: sint):<> int = "mac\#%"
//
#atscode_separator()
//
fun{tk:tk}
g0int2string (x: g0int (tk)):<!wrt> Strptr1
//
fun g0int2string_int (x: int):<!wrt> Strptr1 = "mac\#%"
fun g0int2string_lint (x: lint):<!wrt> Strptr1 = "mac\#%"
fun g0int2string_llint (x: llint):<!wrt> Strptr1 = "mac\#%"
(*
fun g0int2string_ssize (x: ssize_t):<!wrt> Strptr1 = "mac\#%"
*)
//
#atscode_separator()
//
fun{tk:tk}
g0string2int (str: NSH(string)):<> g0int (tk)
//
fun g0string2int_int (x: NSH(string)):<> int = "mac\#%"
fun g0string2int_lint (x: NSH(string)):<> lint = "mac\#%"
fun g0string2int_llint (x: NSH(string)):<> llint = "mac\#%"
fun g0string2int_ssize (x: NSH(string)):<> ssize_t = "mac\#%"
//
#atscode_separator()

typedef
g0int_uop_type
  (tk: tkind) = (g0int (tk)) -<fun0> g0int (tk)
// end of [g0int_uop_type]

#atscode_separator()

fun{tk:tk}
g0int_neg : g0int_uop_type (tk)
overload ~ with g0int_neg of 0 // ~ for uminus
overload neg with g0int_neg of 0

fun{tk:tk}
g0int_abs : g0int_uop_type (tk)
overload abs with g0int_abs of 0

#atscode_separator()

fun{tk:tk}
g0int_succ : g0int_uop_type (tk)
overload succ with g0int_succ of 0

fun{tk:tk}
g0int_pred : g0int_uop_type (tk)
overload pred with g0int_pred of 0

#atscode_separator()

fun{tk:tk}
g0int_half : g0int_uop_type (tk)
overload half with g0int_half of 0

(*
fun{tk:tk}
g0int_double : g0int_uop_type (tk)
overload double with g0int_double of 0
*)

#atscode_separator()

typedef
g0int_aop_type (tk: tkind) =
   (g0int (tk), g0int (tk)) -<fun0> g0int (tk)
// end of [g0int_aop_type]

#fun_g0int_aop_decl("add")
#fun_g0int_aop_decl("sub")
#fun_g0int_aop_decl("mul")
#fun_g0int_aop_decl("div")
#fun_g0int_aop_decl("mod")

#atscode_separator()

fun{}
mul_int1_size0 {i:nat} (int(i), size_t):<> size_t
fun{}
mul_size0_int1 {j:nat} (size_t, int(j)):<> size_t

#atscode_separator()

overload * with mul_int1_size0 of 11
overload * with mul_size0_int1 of 11

#atscode_separator()

fun{tk:tk}
g0int_asl (x: g0int (tk), n: intGte(0)):<> g0int (tk)
overload << with g0int_asl
fun{tk:tk}
g0int_asr (x: g0int (tk), n: intGte(0)):<> g0int (tk)
overload >> with g0int_asr

#atscode_separator()

fun{tk:tk}
g0int_isltz (x: g0int (tk)):<> bool
overload isltz with g0int_isltz of 0
fun{tk:tk}
g0int_isltez (x: g0int (tk)):<> bool
overload isltez with g0int_isltez of 0
fun{tk:tk}
g0int_isgtz (x: g0int (tk)):<> bool
overload isgtz with g0int_isgtz of 0
fun{tk:tk}
g0int_isgtez (x: g0int (tk)):<> bool
overload isgtez with g0int_isgtez of 0
fun{tk:tk}
g0int_iseqz (x: g0int (tk)):<> bool
overload iseqz with g0int_iseqz of 0
fun{tk:tk}
g0int_isneqz (x: g0int (tk)):<> bool
overload isneqz with g0int_isneqz of 0

#atscode_separator()

typedef
g0int_cmp_type (tk:tk) =
  (g0int (tk), g0int (tk)) -<fun0> bool
// end of [g0int_cmp_type]

#fun_g0int_cmp_decl("lt")
#fun_g0int_cmp_decl("lte")

#fun_g0int_cmp_decl("gt")
#fun_g0int_cmp_decl("gte")

#fun_g0int_cmp_decl("eq")
#fun_g0int_cmp_decl("neq")
overload <> with g0int_neq of 0

#atscode_separator()

fun{tk:tk}
g0int_compare
  (x: g0int (tk), y: g0int (tk)):<> int
overload compare with g0int_compare of 0

#atscode_separator()

fun{tk:tk}
g0int_max : g0int_aop_type (tk)
overload max with g0int_max of 0
fun{tk:tk}
g0int_min : g0int_aop_type (tk)
overload min with g0int_min of 0

#atscode_separator()

fun{tk:tk}
lt_g0int_int (x: g0int (tk), y: int):<> bool
overload < with lt_g0int_int of 11
fun{tk:tk}
lte_g0int_int (x: g0int (tk), y: int):<> bool
overload <= with lte_g0int_int of 11
//
fun{tk:tk}
gt_g0int_int (x: g0int (tk), y: int):<> bool
overload > with gt_g0int_int of 11
fun{tk:tk}
gte_g0int_int (x: g0int (tk), y: int):<> bool
overload >= with gte_g0int_int of 11
//
fun{tk:tk}
eq_g0int_int (x: g0int (tk), y: int):<> bool
overload = with eq_g0int_int of 11
fun{tk:tk}
neq_g0int_int (x: g0int (tk), y: int):<> bool
overload != with neq_g0int_int of 11
overload <> with neq_g0int_int of 11
//
fun{tk:tk}
compare_g0int_int (x: g0int (tk), y: int):<> int
overload compare with compare_g0int_int of 11

#atscode_separator()
//
// HX: for indexed integer types
//
castfn
g0ofg1_int {tk:tk} (x: g1int tk):<> g0int (tk)
castfn
g1ofg0_int {tk:tk} (x: g0int tk):<> g1int (tk)
overload g0ofg1 with g0ofg1_int // index-erasing
overload g1ofg0 with g1ofg0_int // index-inducing
//
#atscode_separator()
//
fun{k1,k2:tk}
g1int2int // i2i
  {i:int} (x: g1int (k1, i)):<> g1int (k2, i)
//
fun g1int2int_int_int {i:int} (x: int i):<> int (i) = "mac\#%"
fun g1int2int_int_lint {i:int} (x: int i):<> lint (i) = "mac\#%"
fun g1int2int_int_llint {i:int} (x: int i):<> llint (i) = "mac\#%"
fun g1int2int_int_ssize {i:int} (x: int i):<> ssize_t (i) = "mac\#%"
//
#atscode_separator()

fun{tk:tk}
g1string2int (str: NSH(string)):<> g1int (tk)

#atscode_separator()

prfun
g1int_get_index
  {tk:tk}{i1:int}
  (x: g1int (tk, i1)): [i2:int] EQINT (i1, i2)
// end of [g1int_get_index]

#atscode_separator()

typedef
g1int_neg_type (tk:tk) =
  {i:int} g1int (tk, i) -<fun0> g1int (tk, ~i)
fun{tk:tk}
g1int_neg : g1int_neg_type (tk)
overload ~ with g1int_neg of 10 // ~ for uminus
overload neg with g1int_neg of 10

typedef
g1int_abs_type (tk:tk) =
  {i:int} g1int (tk, i) -<fun0> g1int (tk, abs(i))
fun{tk:tk}
g1int_abs : g1int_abs_type (tk)
overload abs with g1int_abs of 10

#atscode_separator()

typedef
g1int_succ_type (tk:tk) =
  {i:int} g1int (tk, i) -<fun0> g1int (tk, i+1)
fun{tk:tk}
g1int_succ : g1int_succ_type (tk)
overload succ with g1int_succ of 10

typedef
g1int_pred_type (tk:tk) =
  {i:int} g1int (tk, i) -<fun0> g1int (tk, i-1)
fun{tk:tk}
g1int_pred : g1int_pred_type (tk)
overload pred with g1int_pred of 10

typedef
g1int_half_type (tk:tk) =
  {i:int} g1int (tk, i) -<fun0> g1int (tk, i/2)
fun{tk:tk}
g1int_half : g1int_half_type (tk)
overload half with g1int_half of 10

(*
typedef
g1int_double_type (tk:tk) =
  {i:int} g1int (tk, i) -<fun0> g1int (tk, 2*i)
fun{tk:tk}
g1int_double : g1int_double_type (tk)
overload double with g1int_double of 10
*)

#atscode_separator()

typedef
g1int_add_type (tk:tk) =
  {i,j:int} (g1int (tk,i), g1int (tk,j)) -<fun0> g1int (tk, i+j)
fun{tk:tk}
g1int_add : g1int_add_type (tk)

fun{}
add_size1_int1
  {i,j:int | i+j >= 0} (x: size_t (i), j: int (j)):<> size_t (i+j)

#atscode_separator()

overload + with g1int_add of 20
overload + with add_size1_int1 of 22

#atscode_separator()

typedef
g1int_sub_type (tk:tk) =
  {i,j:int} (g1int (tk,i), g1int (tk,j)) -<fun0> g1int (tk, i-j)
fun{tk:tk}
g1int_sub : g1int_sub_type (tk)

fun{}
sub_size1_int1
  {i,j:int | i-j >= 0} (x: size_t (i), j: int (j)):<> size_t (i-j)

#atscode_separator()

overload - with g1int_sub of 20
overload - with sub_size1_int1 of 22

#atscode_separator()

typedef
g1int_mul_type (tk:tk) =
  {i,j:int} (g1int (tk,i), g1int (tk,j)) -<fun0> g1int (tk, i*j)
fun{tk:tk}
g1int_mul : g1int_mul_type (tk)

fun{tk:tk}
g1int_mul2
  {i,j:int}
(
  x: g1int (tk, i)
, y: g1int (tk, j)
) :<> [ij:int]
  (MUL (i, j, ij) | g1int (tk, ij))
// end of [g1int_mul2]

fun{}
mul_int1_size1
  {i,j:int | i >= 0} (x: int (i), j: size_t (j)):<> size_t (i*j)
fun{}
mul_size1_int1
  {i,j:int | j >= 0} (x: size_t (i), j: int (j)):<> size_t (i*j)

#atscode_separator()

overload * with g1int_mul of 20
overload * with mul_int1_size1 of 22
overload * with mul_size1_int1 of 22

#atscode_separator()

typedef
g1int_div_type (tk:tk) =
  {i,j:int | j != 0} (g1int (tk, i), g1int (tk, j)) -<fun0> g1int (tk)

fun{tk:tk}
g1int_div : g1int_div_type (tk)

typedef
g1int_ndiv_type (tk:tk) =
  {i,j:int | i >= 0; j > 0}
  (g1int (tk, i), g1int (tk, j)) -<fun0> g1int (tk, ndiv_int_int (i, j))

fun{tk:tk}
g1int_ndiv : g1int_ndiv_type (tk)

fun{tk:tk}
g1int_ndiv2
  {i,j:int | i >= 0; j > 0}
(
  x: g1int (tk, i), y: g1int (tk, j)
) :<>
[
  q,r:int | 0 <= r; r < j
] (
  DIVMOD (i, j, q, r) | g1int (tk, q)
) // end of [g1int_ndiv2]

#atscode_separator()

overload / with g1int_div of 20
overload ndiv with g1int_ndiv of 20

#atscode_separator()

(*
** HX: [g1int_mod] is intentionally skipped
*)

#atscode_separator()

typedef
g1int_nmod_type
  (tk:tk) =
  {i,j:int | i >= 0; j > 0}
  (g1int (tk, i), g1int (tk, j)) -<fun0> [r:nat | r < j] g1int (tk, r)
// end of [g1int_nmod_type]

fun{tk:tk}
g1int_nmod : g1int_nmod_type (tk)

fun{tk:tk}
g1int_nmod2
  {i,j:int | i >= 0; j > 0}
(
  x: g1int (tk, i), y: g1int (tk, j)
) :<> [q,r:int | 0 <= r; r < j] (DIVMOD (i, j, q, r) | g1int (tk, r))

fun{tk:tk}
nmod_g1int_int1
  {i,j:int | i >= 0; j > 0} (x: g1int (tk, i), y: int (j)):<> natLt (j)

#atscode_separator()

overload nmod with g1int_nmod of 20
overload nmod with nmod_g1int_int1 of 21

#atscode_separator()

typedef
g1int_ngcd_type
  (tk:tk) =
  {i,j:int | i >= 0; j >= 0}
  (g1int (tk, i), g1int (tk, j)) -<fun0> [r:nat] g1int (tk, r)
// end of [g1int_ngcd_type]

fun{tk:tk}
g1int_ngcd : g1int_ngcd_type (tk)
(*
overload ngcd with g1int_ngcd of 20 // HX: [ngcd] is no longer pre-declared
*)

#atscode_separator()

typedef
g1int_isltz_type (tk:tk) =
  {i:int} (g1int (tk, i)) -<fun0> bool (i < 0)
typedef
g1int_isltez_type (tk:tk) =
  {i:int} (g1int (tk, i)) -<fun0> bool (i <= 0)
fun{tk:tk}
g1int_isltz : g1int_isltz_type (tk)
overload isltz with g1int_isltz of 10
fun{tk:tk}
g1int_isltez : g1int_isltez_type (tk)
overload isltez with g1int_isltez of 10

typedef
g1int_isgtz_type (tk:tk) =
  {i:int} (g1int (tk, i)) -<fun0> bool (i > 0)
typedef
g1int_isgtez_type (tk:tk) =
  {i:int} (g1int (tk, i)) -<fun0> bool (i >= 0)
fun{tk:tk}
g1int_isgtz : g1int_isgtz_type (tk)
overload isgtz with g1int_isgtz of 10
fun{tk:tk}
g1int_isgtez : g1int_isgtez_type (tk)
overload isgtez with g1int_isgtez of 10

typedef
g1int_iseqz_type (tk:tk) =
  {i:int} (g1int (tk, i)) -<fun0> bool (i > 0)
typedef
g1int_isneqz_type (tk:tk) =
  {i:int} (g1int (tk, i)) -<fun0> bool (i >= 0)
fun{tk:tk}
g1int_iseqz : g1int_iseqz_type (tk)
overload iseqz with g1int_iseqz of 10
fun{tk:tk}
g1int_isneqz : g1int_isneqz_type (tk)
overload isneqz with g1int_isneqz of 10

#atscode_separator()

typedef
g1int_lt_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> bool (i < j)
typedef
g1int_lte_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> bool (i <= j)
fun{tk:tk}
g1int_lt : g1int_lt_type (tk)
overload < with g1int_lt of 20
fun{tk:tk}
g1int_lte : g1int_lte_type (tk)
overload <= with g1int_lte of 20

typedef
g1int_gt_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> bool (i > j)
typedef
g1int_gte_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> bool (i >= j)
fun{tk:tk}
g1int_gt : g1int_gt_type (tk)
overload > with g1int_gt of 20
fun{tk:tk}
g1int_gte : g1int_gte_type (tk)
overload >= with g1int_gte of 20

typedef
g1int_eq_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> bool (i == j)
typedef
g1int_neq_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> bool (i != j)
fun{tk:tk}
g1int_eq : g1int_eq_type (tk)
overload = with g1int_eq of 20
fun{tk:tk}
g1int_neq : g1int_neq_type (tk)
overload != with g1int_neq of 20
overload <> with g1int_neq of 20

typedef
g1int_compare_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> int (sgn(i-j))
fun{tk:tk}
g1int_compare : g1int_compare_type (tk)
overload compare with g1int_compare of 20

#atscode_separator()

typedef
g1int_max_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> g1int (tk, max(i, j))
fun{tk:tk}
g1int_max : g1int_max_type (tk)
overload max with g1int_max of 20

typedef
g1int_min_type (tk:tk) =
  {i,j:int} (g1int (tk, i), g1int (tk, j)) -<fun0> g1int (tk, min(i, j))
fun{tk:tk}
g1int_min : g1int_min_type (tk)
overload min with g1int_min of 20

#atscode_separator()

fun{tk:tk}
lt_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> bool (i < j)
overload < with lt_g1int_int of 21
fun{tk:tk}
lte_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> bool (i <= j)
overload <= with lte_g1int_int of 21
//
fun{tk:tk}
gt_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> bool (i > j)
overload > with gt_g1int_int of 21
fun{tk:tk}
gte_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> bool (i >= j)
overload >= with gte_g1int_int of 21
//
fun{tk:tk}
eq_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> bool (i == j)
overload = with eq_g1int_int of 21
fun{tk:tk}
neq_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> bool (i != j)
overload != with neq_g1int_int of 21
overload <> with neq_g1int_int of 21
//
fun{tk:tk}
compare_g1int_int {i,j:int}
  (x: g1int (tk, i), y: int (j)):<> int (sgn(i-j))
overload compare with compare_g1int_int of 21

#atscode_separator()

fun{tk:tk}
g1int_sgn {i:int} (x: g1int (tk, i)):<> int(sgn(i))

#atscode_separator()
//
// HX: for unsigned unindexed integer types
//
#atscode_separator()

fun{k1,k2:tk}
g0int2uint (x: g0int (k1)):<> g0uint (k2)
//
fun g0int2uint_int_uint (x: int):<> uint = "mac\#%"
fun g0int2uint_int_ulint (x: int):<> ulint = "mac\#%"
fun g0int2uint_int_ullint (x: int):<> ullint = "mac\#%"
fun g0int2uint_int_size (x: int):<> size_t = "mac\#%"
//
fun g0int2uint_lint_ulint (x: lint):<> ulint = "mac\#%"
fun g0int2uint_lint_ullint (x: lint):<> ullint = "mac\#%"
fun g0int2uint_lint_size (x: lint):<> size_t = "mac\#%"
//
fun g0int2uint_llint_ullint (x: llint):<> ullint = "mac\#%"
//
fun g0int2uint_ssize_size (x: ssize_t):<> size_t = "mac\#%"
//
#atscode_separator()

fun{k1,k2:tk}
g0uint2int (x: g0uint (k1)):<> g0int (k2)
//
fun g0uint2int_uint_int (x: uint):<> int = "mac\#%"
fun g0uint2int_uint_lint (x: uint):<> lint = "mac\#%"
fun g0uint2int_uint_llint (x: uint):<> llint = "mac\#%"
fun g0uint2int_uint_ssize (x: uint):<> ssize_t = "mac\#%"
//
fun g0uint2int_size_int (x: size_t):<> int = "mac\#%"
fun g0uint2int_size_lint (x: size_t):<> lint = "mac\#%"
fun g0uint2int_size_llint (x: size_t):<> llint = "mac\#%"
fun g0uint2int_size_ssize (x: size_t):<> ssize_t = "mac\#%"
//
#atscode_separator()

fun{k1,k2:tk}
g0uint2uint (x: g0uint (k1)):<> g0uint (k2)
//
fun g0uint2uint_uint_uint (x: uint):<> uint = "mac\#%"
fun g0uint2uint_uint_ulint (x: uint):<> ulint = "mac\#%"
fun g0uint2uint_uint_ullint (x: uint):<> ullint = "mac\#%"
fun g0uint2uint_uint_size (x: uint):<> size_t = "mac\#%"
//
fun g0uint2uint_ulint_uint (x: ulint):<> uint = "mac#%"
fun g0uint2uint_ulint_ulint (x: ulint):<> ulint = "mac#%"
fun g0uint2uint_ulint_ullint (x: ulint):<> ullint = "mac#%"
fun g0uint2uint_ulint_size (x: ulint):<> size_t = "mac#%"
//
fun g0uint2uint_size_uint (x: size_t):<> uint = "mac\#%"
fun g0uint2uint_size_ulint (x: size_t):<> ulint = "mac\#%"
fun g0uint2uint_size_ullint (x: size_t):<> ullint = "mac\#%"
fun g0uint2uint_size_size (x: size_t):<> size_t = "mac\#%"
//
fun g0uint2uint_usint_uint (x: usint):<> uint = "mac\#%"
//
#atscode_separator()

fun{tk:tk}
g0string2uint (str: NSH(string)):<> g0uint (tk)
//
fun g0string2uint_uint (x: NSH(string)):<> uint = "mac\#%"
fun g0string2uint_ulint (x: NSH(string)):<> ulint = "mac\#%"
fun g0string2uint_ullint (x: NSH(string)):<> ullint = "mac\#%"
fun g0string2uint_size (x: NSH(string)):<> size_t = "mac\#%"
//
#atscode_separator()

fun{tk:tk}
g0uint_succ (x: g0uint (tk)):<> g0uint (tk)
overload succ with g0uint_succ of 0
fun{tk:tk}
g0uint_pred (x: g0uint (tk)):<> g0uint (tk)
overload pred with g0uint_pred of 0

fun{tk:tk}
g0uint_half (x: g0uint (tk)):<> g0uint (tk)
overload half with g0uint_half of 0

(*
fun{tk:tk}
g0uint_double (x: g0uint (tk)):<> g0uint (tk)
overload double with g0uint_double of 0
*)

#atscode_separator()

#fun_g0uint_aop_decl("add")
#fun_g0uint_aop_decl("sub")
#fun_g0uint_aop_decl("mul")
#fun_g0uint_aop_decl("div")
#fun_g0uint_aop_decl("mod")

#atscode_separator()

fun{tk:tk}
g0uint_lsl (x: g0uint (tk), n: intGte(0)):<> g0uint (tk)
overload << with g0uint_lsl
fun{tk:tk}
g0uint_lsr (x: g0uint (tk), n: intGte(0)):<> g0uint (tk)
overload >> with g0uint_lsr

#atscode_separator()

fun{tk:tk}
g0uint_lnot (x: g0uint (tk)):<> g0uint (tk)
overload ~ with g0uint_lnot
overload lnot with g0uint_lnot
fun{tk:tk}
g0uint_lor (x: g0uint (tk), y: g0uint (tk)):<> g0uint (tk)
overload lor with g0uint_lor
fun{tk:tk}
g0uint_lxor (x: g0uint (tk), y: g0uint (tk)):<> g0uint (tk)
overload lxor with g0uint_lxor
fun{tk:tk}
g0uint_land (x: g0uint (tk), y: g0uint (tk)):<> g0uint (tk)
overload land with g0uint_land

#atscode_separator()

fun{tk:tk}
g0uint_isgtz (x: g0uint (tk)):<> bool
overload isgtz with g0uint_isgtz of 0
fun{tk:tk}
g0uint_iseqz (x: g0uint (tk)):<> bool
overload iseqz with g0uint_iseqz of 0
fun{tk:tk}
g0uint_isneqz (x: g0uint (tk)):<> bool
overload isneqz with g0uint_isneqz of 0

#atscode_separator()

#fun_g0uint_cmp_decl("lt")
#fun_g0uint_cmp_decl("lte")

#fun_g0uint_cmp_decl("gt")
#fun_g0uint_cmp_decl("gte")

#fun_g0uint_cmp_decl("eq")
#fun_g0uint_cmp_decl("neq")
overload <> with g0uint_neq of 0

fun{tk:tk}
g0uint_compare (x: g0uint (tk), y: g0uint (tk)):<> int
overload compare with g0uint_compare of 0

#atscode_separator()

fun{tk:tk}
g0uint_max
  (x: g0uint (tk), y: g0uint (tk)):<> g0uint (tk)
overload max with g0uint_max of 0

fun{tk:tk}
g0uint_min
  (x: g0uint (tk), y: g0uint (tk)):<> g0uint (tk)
overload min with g0uint_min of 0

#atscode_separator()

fun{tk:tk}
lt_g0uint_int (x: g0uint (tk), y: int):<> bool
overload < with lt_g0uint_int of 11
fun{tk:tk}
lte_g0uint_int (x: g0uint (tk), y: int):<> bool
overload <= with lte_g0uint_int of 11

fun{tk:tk}
gt_g0uint_int (x: g0uint (tk), y: int):<> bool
overload > with gt_g0uint_int of 11
fun{tk:tk}
gte_g0uint_int (x: g0uint (tk), y: int):<> bool
overload >= with gte_g0uint_int of 11

fun{tk:tk}
eq_g0uint_int (x: g0uint (tk), y: int):<> bool
overload = with eq_g0uint_int of 11
fun{tk:tk}
neq_g0uint_int (x: g0uint (tk), y: int):<> bool
overload != with neq_g0uint_int of 11
overload <> with neq_g0uint_int of 11

#atscode_separator()
//
// HX: for unsigned indexed integer types
//
praxi
lemma_g1uint_param
  {tk:tk} {i:int} (x: g1uint (tk, i)):<> [i >= 0] void
// end of [lemma_g1uint_param]

#atscode_separator()

castfn
size_of_int {i:nat} (x: int i):<> size_t (i)
castfn
ssize_of_int {i:int} (x: int i):<> ssize_t (i)

#atscode_separator()
//
castfn
g0ofg1_uint {tk:tk} (x: g1uint tk):<> g0uint (tk)
castfn
g1ofg0_uint {tk:tk} (x: g0uint tk):<> g1uint0 (tk)
//
overload g0ofg1 with g0ofg1_uint // index-erasing
overload g1ofg0 with g1ofg0_uint // index-inducing
//
#atscode_separator()
//
fun{k1,k2:tk}
g1int2uint // i2u
  {i:nat} (x: g1int (k1, i)):<> g1uint (k2, i)
//
fun g1int2uint_int_uint{i:nat} (x: int i):<> uint (i) = "mac\#%"
fun g1int2uint_int_ulint{i:nat} (x: int i):<> ulint (i) = "mac\#%"
fun g1int2uint_int_ullint{i:nat} (x: int i):<> ullint (i) = "mac\#%"
fun g1int2uint_int_size{i:nat} (x: int i):<> size_t (i) = "mac\#%"
//
fun g1int2uint_ssize_size{i:nat} (x: ssize_t(i)):<> size_t(i) = "mac\#%"
//
#atscode_separator()

typedef
g1uint2int_type
  (k1:tk, k2:tk) = 
  {u:int} (g1uint (k1, u)) -<fun0> [u>=0] g1int (k2, u)
//
fun{k1,k2:tk} g1uint2int : g1uint2int_type (k1, k2)
//
fun g1uint2int_uint_int : g1uint2int_type (uintknd, intknd) = "mac\#%"
fun g1uint2int_uint_lint : g1uint2int_type (uintknd, lintknd) = "mac\#%"
fun g1uint2int_uint_llint : g1uint2int_type (uintknd, llintknd) = "mac\#%"
fun g1uint2int_uint_ssize : g1uint2int_type (uintknd, ssizeknd) = "mac\#%"
//
fun g1uint2int_size_int : g1uint2int_type (sizeknd, intknd) = "mac\#%"
fun g1uint2int_size_lint : g1uint2int_type (sizeknd, lintknd) = "mac\#%"
fun g1uint2int_size_llint : g1uint2int_type (sizeknd, llintknd) = "mac\#%"
fun g1uint2int_size_ssize : g1uint2int_type (sizeknd, ssizeknd) = "mac\#%"
//
#atscode_separator()
//
typedef
g1uint2uint_type
  (k1:tk, k2:tk) =
  {u:int} (g1uint (k1, u)) -<fun0> g1uint (k2, u)
//
fun{k1,k2:tk} g1uint2uint : g1uint2uint_type (k1, k2)
//
fun g1uint2uint_uint_uint : g1uint2uint_type (uintknd, uintknd) = "mac\#%"
fun g1uint2uint_uint_ulint : g1uint2uint_type (uintknd, ulintknd) = "mac\#%"
fun g1uint2uint_uint_ullint : g1uint2uint_type (uintknd, ullintknd) = "mac\#%"
fun g1uint2uint_uint_size : g1uint2uint_type (uintknd, sizeknd) = "mac\#%"
//
fun g1uint2uint_ulint_uint : g1uint2uint_type (uintknd, uintknd) = "mac\#%"
fun g1uint2uint_ulint_ulint : g1uint2uint_type (uintknd, ulintknd) = "mac\#%"
fun g1uint2uint_ulint_ullint : g1uint2uint_type (uintknd, ullintknd) = "mac\#%"
fun g1uint2uint_ulint_size : g1uint2uint_type (uintknd, sizeknd) = "mac\#%"
//
fun g1uint2uint_size_uint : g1uint2uint_type (sizeknd, uintknd) = "mac\#%"
fun g1uint2uint_size_ulint : g1uint2uint_type (sizeknd, ulintknd) = "mac\#%"
fun g1uint2uint_size_ullint : g1uint2uint_type (sizeknd, ullintknd) = "mac\#%"
fun g1uint2uint_size_size : g1uint2uint_type (sizeknd, sizeknd) = "mac\#%"
//
#atscode_separator()

fun{tk:tk}
g1string2uint (str: NSH(string)):<> g1uint (tk)

#atscode_separator()

prfun
g1uint_get_index
  {tk:tk}{i1:int}
  (x: g1uint (tk, i1)): [i2:int] EQINT (i1, i2)
// end of [g1uint_get_index]

#atscode_separator()

typedef
g1uint_succ_type (tk:tk) =
  {i:int} (g1uint (tk, i)) -<fun0> g1uint (tk, i+1)
fun{tk:tk}
g1uint_succ : g1uint_succ_type (tk)
overload succ with g1uint_succ of 10

typedef
g1uint_pred_type (tk:tk) =
  {i:int | i > 0} (g1uint (tk, i)) -<fun0> g1uint (tk, i-1)
fun{tk:tk}
g1uint_pred : g1uint_pred_type (tk)
overload pred with g1uint_pred of 10

typedef
g1uint_half_type (tk:tk) =
  {i:int} (g1uint (tk, i)) -<fun0> g1uint (tk, i/2)
fun{tk:tk}
g1uint_half : g1uint_half_type (tk)
overload half with g1uint_half of 10

(*
typedef
g1uint_double_type (tk:tk) =
  {i:int} (g1uint (tk, i)) -<fun0> g1uint (tk, 2*i)
fun{tk:tk}
g1uint_double : g1uint_double_type (tk)
overload double with g1uint_double of 10
*)

#atscode_separator()

typedef
g1uint_add_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> g1uint (tk, i+j)
fun{tk:tk}
g1uint_add : g1uint_add_type (tk)
overload + with g1uint_add of 20

typedef
g1uint_sub_type (tk:tk) =
  {i,j:int | i >= j} (g1uint (tk, i), g1uint (tk, j)) -<fun0> g1uint (tk, i-j)
fun{tk:tk}
g1uint_sub : g1uint_sub_type (tk)
overload - with g1uint_sub of 20

#atscode_separator()

typedef
g1uint_mul_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> g1uint (tk, i*j)
fun{tk:tk}
g1uint_mul : g1uint_mul_type (tk)
overload * with g1uint_mul of 20

fun{tk:tk}
g1uint_mul2 {i,j:int}
(
  x: g1uint (tk, i), y: g1uint (tk, j)
) :<> [ij:int] (MUL (i, j, ij) | g1uint (tk, ij))

#atscode_separator()

typedef
g1uint_div_type (tk:tk) =
  {i,j:int | j > 0} (g1uint (tk, i), g1uint (tk, j)) -<fun0> g1uint (tk)
fun{tk:tk}
g1uint_div : g1uint_div_type (tk)
overload / with g1uint_div of 20

fun{tk:tk}
g1uint_div2 {i,j:int | j > 0}
(
  x: g1uint (tk, i), y: g1uint (tk, j)
) :<> [q,r:int | 0 <= r; r < j] (DIVMOD (i, j, q, r) | g1uint (tk, q))

#atscode_separator()

typedef
g1uint_mod_type
  (tk:tk) =
  {i,j:int | j > 0}
  (g1uint (tk, i), g1uint (tk, j)) -<fun0> [r:nat | r < j] g1uint (tk, r)
// end of [g1uint_mod_type]

fun{tk:tk}
g1uint_mod : g1uint_mod_type (tk)
overload mod with g1uint_mod of 20

fun{tk:tk}
g1uint_mod2
  {i,j:int | j > 0}
(
  x: g1uint (tk, i), y: g1uint (tk, j)
) :<>
[
  q,r:int | 0 <= r; r < j
] (
  DIVMOD (i, j, q, r) | g1uint (tk, r)
) // end of [g1uint_mod2]

#atscode_separator()

typedef
g1uint_isgtz_type (tk:tk) =
  {i:int} (g1uint (tk, i)) -<fun0> bool (i > 0)
fun{tk:tk}
g1uint_isgtz : g1uint_isgtz_type (tk)
overload isgtz with g1uint_isgtz of 10

typedef
g1uint_iseqz_type (tk:tk) =
  {i:int} (g1uint (tk, i)) -<fun0> bool (i > 0)
typedef
g1uint_isneqz_type (tk:tk) =
  {i:int} (g1uint (tk, i)) -<fun0> bool (i >= 0)
fun{tk:tk}
g1uint_iseqz : g1uint_iseqz_type (tk)
overload iseqz with g1uint_iseqz of 10
fun{tk:tk}
g1uint_isneqz : g1uint_isneqz_type (tk)
overload isneqz with g1uint_isneqz of 10

#atscode_separator()

typedef
g1uint_lt_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> bool (i < j)
fun{tk:tk}
g1uint_lt : g1uint_lt_type (tk)
overload < with g1uint_lt of 20
typedef
g1uint_lte_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> bool (i <= j)
fun{tk:tk}
g1uint_lte : g1uint_lte_type (tk)
overload <= with g1uint_lte of 20

typedef
g1uint_gt_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> bool (i > j)
fun{tk:tk}
g1uint_gt : g1uint_gt_type (tk)
overload > with g1uint_gt of 20
typedef
g1uint_gte_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> bool (i >= j)
fun{tk:tk}
g1uint_gte : g1uint_gte_type (tk)
overload >= with g1uint_gte of 20

typedef
g1uint_eq_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> bool (i == j)
typedef
g1uint_neq_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> bool (i != j)
fun{tk:tk}
g1uint_eq : g1uint_eq_type (tk)
overload = with g1uint_eq of 20
fun{tk:tk}
g1uint_neq : g1uint_neq_type (tk)
overload != with g1uint_neq of 20
overload <> with g1uint_neq of 20

typedef
g1uint_compare_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> int (sgn(i-j))
fun{tk:tk}
g1uint_compare : g1uint_compare_type (tk)
overload compare with g1uint_compare of 20

#atscode_separator()

typedef
g1uint_max_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> g1uint (tk, max(i, j))
fun{tk:tk}
g1uint_max : g1uint_max_type (tk)
overload max with g1uint_max of 20

typedef
g1uint_min_type (tk:tk) =
  {i,j:int} (g1uint (tk, i), g1uint (tk, j)) -<fun0> g1uint (tk, min(i, j))
fun{tk:tk}
g1uint_min : g1uint_min_type (tk)
overload min with g1uint_min of 20

#atscode_separator()
//
fun{tk:tk}
lt_g1uint_int {i:int;j:nat}
  (x: g1uint (tk, i), y: int (j)):<> bool (i < j)
overload < with lt_g1uint_int of 21
fun{tk:tk}
lte_g1uint_int {i:int;j:nat}
  (x: g1uint (tk, i), y: int (j)):<> bool (i <= j)
overload <= with lte_g1uint_int of 21
//
fun{tk:tk}
gt_g1uint_int {i:int;j:nat}
  (x: g1uint (tk, i), y: int (j)):<> bool (i > j)
overload > with gt_g1uint_int of 21
fun{tk:tk}
gte_g1uint_int {i:int;j:nat}
  (x: g1uint (tk, i), y: int (j)):<> bool (i >= j)
overload >= with gte_g1uint_int of 21
//
fun{tk:tk}
eq_g1uint_int {i:int;j:nat}
  (x: g1uint (tk, i), y: int (j)):<> bool (i == j)
overload = with eq_g1uint_int of 21
fun{tk:tk}
neq_g1uint_int {i:int;j:nat}
  (x: g1uint (tk, i), y: int (j)):<> bool (i != j)
overload != with neq_g1uint_int of 21
//
#atscode_separator()
//
#fun_g0int_type_aop_cmp_decl("int", "int")\
//
#fun_g0int_type_aop_cmp_decl("lint", "lint")\
//
#fun_g0int_type_aop_cmp_decl("llint", "llint")\
//
#fun_g0int_type_aop_cmp_decl("ssize", "ssize_t")\
//
#atscode_separator()
//
#fprint_print_prerr_decl("int", "int")\
//
#fprint_print_prerr_decl("lint", "lint")\
//
#fprint_print_prerr_decl("llint", "llint")\
//
#fprint_print_prerr_decl("ssize", "ssize_t")\
//
#atscode_separator()
//
#fun_g0uint_type_aop_cmp_decl("uint", "uint")\
//
#fun_g0uint_type_aop_cmp_decl("ulint", "ulint")\
//
#fun_g0uint_type_aop_cmp_decl("ullint", "ullint")\
//
#fun_g0uint_type_aop_cmp_decl("size", "size_t")\
//
#atscode_separator()
//
#fprint_print_prerr_decl("uint", "uint")\
//
#fprint_print_prerr_decl("ulint", "ulint")\
//
#fprint_print_prerr_decl("ullint", "ullint")\
//
#fprint_print_prerr_decl("size", "size_t")\
//
#atscode_separator()
//
#fun_g1int_type_aop_cmp_decl("int", "int")\
//
#fun_g1int_type_aop_cmp_decl("lint", "lint")\
//
#fun_g1int_type_aop_cmp_decl("llint", "llint")\
//
#fun_g1int_type_aop_cmp_decl("ssize", "ssize_t")\
//
#atscode_separator()
//
#fun_g1uint_type_aop_cmp_decl("uint", "uint")\
//
#fun_g1uint_type_aop_cmp_decl("ulint", "ulint")\
//
#fun_g1uint_type_aop_cmp_decl("ullint", "ullint")\
//
#fun_g1uint_type_aop_cmp_decl("size", "size_t")\
//
#atscode_separator()
//
macdef g0i2i (x) = g0int2int (,(x))
macdef g1i2i (x) = g1int2int (,(x))
//
macdef g0i2u (x) = g0int2uint (,(x))
macdef g1i2u (x) = g1int2uint (,(x))
//
macdef g0u2i (x) = g0uint2int (,(x))
macdef g1u2i (x) = g1uint2int (,(x))
//
macdef g0u2u (x) = g0uint2uint (,(x))
macdef g1u2u (x) = g1uint2uint (,(x))
//
macdef i2u (x) = g1int2uint_int_uint (,(x))
macdef i2sz (x) = g1int2uint_int_size (,(x))
macdef i2ssz (x) = g1int2int_int_ssize (,(x))
//
#atscode_separator()
//
macdef u2i (x) = g1uint2int_uint_int (,(x))
macdef u2sz (x) = g1uint2uint_uint_size (,(x))
//
#atscode_separator()
//
(*
macdef sz2i (x) = g1uint2int_size_int (,(x))
macdef sz2u (x) = g1uint2uint_size_uint (,(x))
*)
//
symintr sz2i
overload sz2i with g0uint2int_size_int of 0
overload sz2i with g1uint2int_size_int of 10
//
symintr sz2u
overload sz2u with g0uint2uint_size_uint of 0
overload sz2u with g1uint2uint_size_uint of 10
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "integer_atxt.txt")
%}\
