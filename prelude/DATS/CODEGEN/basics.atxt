%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"basics.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/basics.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("March, 2012")

#atscode_separator()

primplmnt
false_elim () = case+ 0 of _ =/=> ()

#atscode_separator()

primplmnt eqint_make () = EQINT ()
primplmnt eqint_make_gint (x) = EQINT ()
primplmnt eqint_make_guint (x) = EQINT ()

#atscode_separator()

primplmnt eqaddr_make () = EQADDR ()
primplmnt eqaddr_make_ptr (x) = EQADDR ()

#atscode_separator()

primplmnt eqbool_make () = EQBOOL ()
primplmnt eqbool_make_bool (x) = EQBOOL ()

#atscode_separator()

primplmnt prop_verify () = ()
primplmnt prop_verify_and_add () = ()

#atscode_separator()

primplmnt pridentity_v (x) = ()
primplmnt pridentity_vt (x) = ()

#atscode_separator()

implement
{a}(*tmp*)
lazy_force (lazyval) = !lazyval
implement
{a}(*tmp*)
lazy_vt_force (lazyval) = !lazyval

#atscode_separator()

primplmnt
unit_v_elim (pf) = let
  prval unit_v () = pf in (*nothing*)
end // end of [unit_v_elim]

#atscode_separator()
//
// HX:
// See prelude/basics_dyn.sats
//
implement
{a}(*tmp*)
opt_unsome_get (x) =
  let prval () = opt_unsome (x) in x end
//
#atscode_separator()

(*
//
// HX: [atspre_argv_at_at] in basics.cats
//
implement
argv_get_at
  (argv, i) = x where {
  val (pf, fpf | p) =
    argv_takeout_strarr (argv)
  val x = !p.[i]
  prval () = minus_addback (fpf, pf | argv)
} // end of [argv_get_at]
*)

#atscode_separator()

implement{}
assertexn_bool0 (b) = if not(b) then $raise AssertExn()
implement{}
assertexn_bool1 (b) = if not(b) then $raise AssertExn()

#atscode_separator()

implement{a} gidentity (x) = x
implement{a} gidentity_vt (x) = x

#atscode_separator()
//
implement
(a:t@ype)
gequal_ref<a> (x, y) = gequal_val<a> (x, y)
//
implement gequal_val<int> (x, y) = (x = y)
implement gequal_val<bool> (x, y) = (x = y)
implement gequal_val<char> (x, y) = (x = y)
implement gequal_val<double> (x, y) = (x = y)
implement gequal_val<string> (x, y) = (x = y)
//
#atscode_separator()

implement
{a}(*tmp*)
tostring_val (x) =
  strptr2string (tostrptr_val<a> (x))
// end of [tostring_val]

#atscode_separator()

implement
{a}(*tmp*)
fprint_val (out, x) = let
  val str = tostrptr_val<a> (x)
  val ((*void*)) = fprint_strptr (out, str)
  val ((*void*)) = strptr_free (str)
in
  // nothing
end // end of [fprint_val]

#atscode_separator()

implement
(a:t@ype)
fprint_ref<a> (out, x) = fprint_val<a> (out, x)

#atscode_separator()

(*
//
// HX-2014-02-25: commented out
//
implement{a}
print_val (x) = fprint_val<a> (stdout_ref, x)
implement{a}
prerr_val (x) = fprint_val<a> (stderr_ref, x)
implement{a}
print_ref (x) = fprint_ref<a> (stdout_ref, x)
implement{a}
prerr_ref (x) = fprint_ref<a> (stderr_ref, x)
*)

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "basics_atxt.txt")
%}\
