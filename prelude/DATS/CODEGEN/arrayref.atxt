%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"arrayref.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/arrayref.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("May, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

implement{a}
arrayref_make_elt (asz, x) =
  arrayptr_refize(arrayptr_make_elt<a> (asz, x))
// end of [arrayref_make_elt]

#atscode_separator()

implement{}
arrayref_make_intrange (l, r) =
  arrayptr_refize{int}(arrayptr_make_intrange (l, r))
// end of [arrayref_make_intrange]

#atscode_separator()

implement{a}
arrayref_make_list (asz, xs) =
  arrayptr_refize(arrayptr_make_list<a> (asz, xs))
// end of [arrayref_make_list]

implement{a}
arrayref_make_rlist (asz, xs) =
  arrayptr_refize(arrayptr_make_rlist<a> (asz, xs))
// end of [arrayref_make_rlist]

#atscode_separator()
//
implement{a}
arrayref_head(A) = $UN.ptr0_get<a> (arrayref2ptr(A))
implement{a}
arrayref_tail{n}(A) =
  $UN.cast{arrayref(a,n-1)}(ptr_succ<a>(arrayref2ptr(A)))
//
#atscode_separator()

implement
{a}{tk}(*tmp*)
arrayref_get_at_gint
  (A, i) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_get_at_gint (!p, i)
end // end of [arrayref_get_at_gint]
implement
{a}{tk}(*tmp*)
arrayref_get_at_guint
  (A, i) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_get_at_guint (!p, i)
end // end of [arrayref_get_at_guint]

#atscode_separator()

implement
{a}{tk}(*tmp*)
arrayref_set_at_gint
  (A, i, x) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_set_at_gint (!p, i, x)
//
end // end of [arrayref_set_at_gint]
implement
{a}{tk}(*tmp*)
arrayref_set_at_guint
  (A, i, x) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_set_at_guint (!p, i, x)
//
end // end of [arrayref_set_at_guint]

#atscode_separator()

implement
{a}{tk}(*tmp*)
arrayref_exch_at_gint
  (A, i, x) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_exch_at_gint (!p, i, x)
//
end // end of [arrayref_exch_at_gint]
implement
{a}{tk}(*tmp*)
arrayref_exch_at_guint
  (A, i, x) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_exch_at_guint (!p, i, x)
//
end // end of [arrayref_exch_at_guint]

#atscode_separator()

implement{a}
arrayref_interchange
  (A, i, j) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_interchange (!p, i, j)
//
end // end of [arrayref_interchange]

#atscode_separator()

implement{a}
arrayref_subcirculate
  (A, i, j) = let
//
val (vbox pf | p) =
  arrayref_get_viewptr (A) in array_subcirculate (!p, i, j)
//
end // end of [arrayref_subcirculate]

#atscode_separator()

implement{a}
fprint_arrayref
  (out, A, n) = let
  val (
    vbox pf | p
  ) = arrayref_get_viewptr (A)
in
  $effmask_ref (fprint_array (out, !p, n))
end // end of [fprint_arrayref]

implement{a}
fprint_arrayref_sep
  (out, A, n, sep) = let
  val (
    vbox pf | p
  ) = arrayref_get_viewptr (A)
in
  $effmask_ref (fprint_array_sep (out, !p, n, sep))
end // end of [fprint_arrayref_sep]

#atscode_separator()

implement
{a}(*tmp*)
arrayref_copy
  {n} (A, n) = let
  val (pf, fpf | p) =
    $UN.ptr0_vtake{array(a,n)}(ptrcast(A))
  val (pf2, pf2gc | p2) = array_ptr_alloc<a> (n)
  val ((*void*)) = array_copy<a> (!p2, !p, n)
  prval () = fpf (pf)
in
  $UN.castvwtp0{arrayptr(a,n)}((pf2, pf2gc | p2))
end // end of [arrayref_copy]

#atscode_separator()

implement{a}
arrayref_tabulate
  (asz) = arrayptr_refize (arrayptr_tabulate<a> (asz))
// end of [arrayref_tabulate]

implement{a}
arrayref_tabulate_cloref
  (asz, f) = arrayptr_refize (arrayptr_tabulate_cloref<a> (asz, f))
// end of [arrayref_tabulate_cloref]

#atscode_separator()

implement{a}
arrayref_foreach
  (A, asz) = let
  var env: void = ()
  in arrayref_foreach_env<a><void> (A, asz, env)
end // end of [arrayref_foreach]

implement
{a}{env}
arrayref_foreach_env
  (A, asz, env) = let
  val (vbox pf | p) = arrayref_get_viewptr (A)
in
  $effmask_ref (array_foreach_env<a><env> (!p, asz, env))
end // end of [arrayref_foreach_env]

#atscode_separator()

implement{a}
arrayref_iforeach
  (A, asz) = let
  var env: void = () in
  arrayref_iforeach_env<a><void> (A, asz, env)
end // end of [arrayref_iforeach]

implement
{a}{env}
arrayref_iforeach_env
  (A, asz, env) = let
  val (vbox pf | p) = arrayref_get_viewptr (A)
in
  $effmask_ref (array_iforeach_env<a><env> (!p, asz, env))
end // end of [arrayref_iforeach_env]

#atscode_separator()

implement{a}
arrayref_rforeach
  (A, asz) = let
  var env: void = () in
  arrayref_rforeach_env<a><void> (A, asz, env)
end // end of [arrayref_rforeach]

implement
{a}{env}
arrayref_rforeach_env
  (A, asz, env) = let
  val (vbox pf | p) = arrayref_get_viewptr (A)
in
  $effmask_ref (array_rforeach_env<a><env> (!p, asz, env))
end // end of [arrayref_rforeach_env]

#atscode_separator()

local

datatype
arrszref
(
  a:viewt@ype
) =
  {n:int}
  ARRSZREF of (arrayref (a, n), size_t (n))
// end of [arrszref]

assume
arrszref_vt0ype_type = arrszref

in (* in of [local] *)

implement{}
arrszref_make_arrpsz
  (psz) = let
//
var asz: size_t
val A = arrpsz_get_ptrsize (psz, asz)
val A = arrayptr_refize (A)
//
in
  ARRSZREF (A, asz)
end // end of [arrszref_make_arrpsz]

implement{}
arrszref_make_arrayref (A, asz) = ARRSZREF (A, asz)

#atscode_separator()

implement{}
arrszref_get_ref
  (ASZ) = let
//
val+ARRSZREF
  (A, asz) = ASZ in $UN.cast2Ptr1(A)
//
end // end of [arrszref_get_size]

#atscode_separator()

implement{}
arrszref_get_size (ASZ) =
  let val+ARRSZREF (A, asz) = ASZ in asz end 
// end of [arrszref_get_size]

#atscode_separator()

implement{}
arrszref_get_refsize
  (ASZ, asz_r) = let
//
val+ARRSZREF (A, asz) = ASZ
prval () = lemma_arrayref_param (A)
//
in
  asz_r := asz; A(*arrayref*)
end // end of [arrszref_get_refsize]

end // end of [local]

#atscode_separator()

implement{a}
arrszref_make_elt
  (asz, x) = let
  val asz = g1ofg0_uint (asz)
  val A = arrayref_make_elt<a> (asz, x)
in
  arrszref_make_arrayref (A, asz)
end // end of [arrszref_make_elt]

#atscode_separator()

implement{a}
arrszref_make_list
  (xs) = let
//
prval () = lemma_list_param (xs)
//
val n = list_length<a> (xs)
val A = arrayref_make_list (n, xs)
val asz = (i2sz)n
//
in
  arrszref_make_arrayref (A, asz)
end // end of [arrszref_make_list]

implement{a}
arrszref_make_rlist
  (xs) = let
//
prval () = lemma_list_param (xs)
//
val n = list_length<a> (xs)
val A = arrayref_make_rlist (n, xs)
val asz = (i2sz)n
//
in
  arrszref_make_arrayref (A, asz)
end // end of [arrszref_make_rlist]

#atscode_separator()

implement{a}
arrszref_get_at_size
  (ASZ, i) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (ASZ, n)
val i = g1ofg0_uint (i)
//
in
//
if n > i
then arrayref_get_at_guint (A, i)
else $raise ArraySubscriptExn((*void*))
//
end // end of [arrszref_get_at_size]

implement
{a}{tk}
arrszref_get_at_gint
  (ASZ, i) = let
in
//
if (
i >= 0
) then (
  arrszref_get_at_size (ASZ, g0i2u(i))
) else (
  $raise ArraySubscriptExn((* i < 0 *))
) // end of [if]
end // end of [arrszref_get_at_gint]

implement
{a}{tk}
arrszref_get_at_guint
  (ASZ, i) = let
in
  arrszref_get_at_size (ASZ, g0u2u(i))
end // end of [arrszref_get_at_guint]

#atscode_separator()

implement{a}
arrszref_set_at_size
  (ASZ, i, x) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (ASZ, n)
val i = g1ofg0_uint (i)
//
in
//
if n > i
then arrayref_set_at_guint (A, i, x)
else $raise ArraySubscriptExn((*void*))
//
end // end of [arrszref_set_at_size]

implement
{a}{tk}
arrszref_set_at_gint
  (ASZ, i, x) = let
in
//
if (
i >= 0
) then (
  arrszref_set_at_size (ASZ, g0i2u(i), x)
) else $raise ArraySubscriptExn((*i < 0*))
//
end // end of [arrszref_set_at_gint]

implement
{a}{tk}
arrszref_set_at_guint
  (ASZ, i, x) = let
in
  arrszref_set_at_size (ASZ, g0u2u(i), x)
end // end of [arrszref_set_at_guint]

#atscode_separator()

implement{a}
arrszref_exch_at_size
  (ASZ, i, x) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (ASZ, n)
val i = g1ofg0_uint (i)
//
in
//
if n > i
then arrayref_exch_at_guint (A, i, x)
else $raise ArraySubscriptExn((*void*))
// end of [if]
//
end // end of [arrszref_exch_at_size]

implement
{a}{tk}
arrszref_exch_at_gint
  (ASZ, i, x) = let
in
//
if (
i >= 0
) then (
  arrszref_exch_at_size (ASZ, g0i2u(i), x)
) else $raise ArraySubscriptExn((*i < 0*))
//
end // end of [arrszref_exch_at_gint]

implement
{a}{tk}
arrszref_exch_at_guint
  (ASZ, i, x) = let
in
  arrszref_exch_at_size (ASZ, g0u2u(i), x)
end // end of [arrszref_exch_at_guint]

#atscode_separator()

implement{a}
arrszref_interchange
(
  ASZ, i, j
) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (ASZ, n)
val i = g1ofg0_uint (i)
val j = g1ofg0_uint (j)
//
in
//
if n > i
then (
  if n > j
  then arrayref_interchange (A, i, j)
  else $raise ArraySubscriptExn((*void*))
) else $raise ArraySubscriptExn((*void*))
//
end // end of [arrszref_interchange]

#atscode_separator()

implement{a}
arrszref_subcirculate
(
  ASZ, i, j
) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (ASZ, n)
val i = g1ofg0_uint (i)
val j = g1ofg0_uint (j)
//
in
//
if n > i
then (
  if n > j
  then arrayref_subcirculate (A, i, j)
  else $raise ArraySubscriptExn((*void*))
) else $raise ArraySubscriptExn((*void*))
//
end // end of [arrszref_subcirculate]

#atscode_separator()

implement{a}
fprint_arrszref
  (out, ASZ) = let
//
var asz: size_t
val A = arrszref_get_refsize (ASZ, asz)
//
in
  fprint_arrayref (out, A, asz)
end // end of [fprint_arrszref]

implement{a}
fprint_arrszref_sep
  (out, ASZ, sep) = let
//
var asz: size_t
val A = arrszref_get_refsize (ASZ, asz)
//
in
  fprint_arrayref_sep (out, A, asz, sep)
end // end of [fprint_arrszref_sep]

#atscode_separator()
//
implement{a}
arrszref_tabulate (asz) = let
  val asz = g1ofg0_uint (asz)
  val A = arrayref_tabulate<a> (asz) in arrszref_make_arrayref(A, asz)
end // end of [arrszref_tabulate]
//
implement{a}
arrszref_tabulate_cloref (asz, f) = let
  val A = arrayref_tabulate_cloref<a> (asz, f) in arrszref_make_arrayref(A, asz)
end // end of [arrszref_tabulate_cloref]
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "arrayref_atxt.txt")
%}\
