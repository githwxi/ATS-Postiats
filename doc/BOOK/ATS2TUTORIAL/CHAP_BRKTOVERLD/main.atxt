%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="bracket-overload">
#title("Bracket Overloading")

#para('\

In many programming languages, bracket-notation is commonly associated
with array subscripting. For instance, #dyncode("A[i]") is a left-value
in C that refers to array-cell #dyncode("i") in the array referred to by
#dyncode("A").  There is support in ATS for overloading brackets with
multiple function names so that bracket-notation can be employed to call
these functions, resulting in code that reads like some form of subscripting.
It is expected that this style of calling functions can, sometimes, make
the code written in ATS more easily accessible.\

')#comment("para")

#para('\

Let us now see a simple example of bracket-notation in overloading.
In the followng code, a linear abstract type #dyncode("lock") is
introduced together with two functions:

#atscode('\
//
absvtype lock(a:vt@ype)
//
extern
fun{a:vt0p} lock_acquire(!lock(a)): a
extern
fun{a:vt0p} lock_release(!lock(a), a): void
//
')#comment("atscode")

As one can imagine, #dyncode("lock_acquire") is called to obtain the value
stored in a given lock while #dyncode("lock_release") is called to return a
value to a given lock.\

')#comment("para")

#para('\

Suppose that we now introduce the following overloading declarations:

#atscode('\
//
overload [] with lock_acquire
overload [] with lock_release
//
')#comment("atscode")

With these declarations, the following code typechecks:

#atscode('\
//
val
mylock = $extval(lock(int), "mylock")
//
val x0 = mylock[] // = lock_acquire (myclok)
val () = mylock[] := x0 // = lock_release (myclok, x0)
//
')#comment("atscode")

Note that the bracket-notation in any assigement is only allowed to
refer to a function that returns the void-value. In the above example, the
function #dyncode("lock_release") returns the void-value.\

')#comment("para")

#para('\

In ATS, bracket-notation is already overloaded with functions performing
list-subscripting, array-subscripting and matrix-subscripting, and it can
also be used to access and update a given reference.\

')#comment("para")

#para("\

Please find #mycodelink("chap_brktoverld.dats", "on-line") the entirety of the
code presented in this chapter.\

")#comment("para")

</chapter><!--"bracket-overload"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
