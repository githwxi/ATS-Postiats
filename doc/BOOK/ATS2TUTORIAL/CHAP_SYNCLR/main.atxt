%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="syntax-coloring">
#title("Syntax-Coloring for ATS code")

#para('\

The syntax of ATS is highly involved, which can be a daunting obstacle for
beginners trying to read and write ATS code. In order to alleviate this
problem, I may employ colors to differentiate various syntactical entities
in ATS code.  The convention I adopt for coloring ATS syntax is given as
follows:\

')

<itemizedlist>
<listitem>
#para('
The keywords in ATS are all colored
<phrase role="color: BLACK; style: BOLD">black</phrase>
(and possibly written in bold face).
')
</listitem>
<listitem>
#para('
The comments in ATS are all colored
<phrase role="\\\#787878\\\; stype NORMAL">gray</phrase>.
')
</listitem>
<listitem>
#para('
The code in the statics of ATS is colored
<phrase role="BLUE; stype NORMAL">blue</phrase>.
')
</listitem>
<listitem>
#para('
The code in the dynamics of ATS is colored
<phrase role="\\\#E80000; stype NORMAL">red</phrase>
unless it represents proofs, for which the color
<phrase role="\\\#009000; stype NORMAL">dark green</phrase>
is used.
')
</listitem>
<listitem>
#para('
The external code (in C) is colored
<phrase role="\\\#A52A2A; stype NORMAL">deep brown</phrase>.
')
</listitem>
</itemizedlist>

#para('\

Please find an example of ATS code #mycodelink("fact_dats.html", "on-line")
that involves all of the syntax-coloring mentioned above.\

')

</chapter><!--id="syntax-coloring"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
