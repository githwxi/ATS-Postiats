%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="filename-extensions">
#title("Filename Extensions")

#para("\

In ATS, the filename extensions #emphasis(".sats") and #emphasis(".dats")
are reserved to indicate static and dynamic files, respectively. As these
two extensions have some special meaning attached to them, which can be
interpreted by the command #command("atscc"), they should not be replaced
arbitrarily.\

")

#para("\

A static file may contain sort definitions, datasort declarations, static
definitions, abstract type declarations, exception declarations, datatype
declarations, macro definitions, interfaces for dynamic values and
functions, etc.  In terms of functionality, a static file in ATS is
somewhat similar to a header file (with the extension #emphasis(".h")) in C
or an interface file (with the extension #emphasis(".mli")) in OCaml.\

")

#para("\

A dynamic file may contain everything in a static file. In addition, it may
also contain definitions for dynamic values and functions. However,
interfaces for functions and values in a dynamic file should follow the
keyword #dyncode("extern"), which on the other hand should not be present when
such interfaces are declared in a static file. For instance, the following
syntax declares interfaces (or types) in a static file for a value named
#dyncode("pi") and a function named #dyncode("area_of_circle"):

#atscode("\
val pi : double
fun area_of_circle (radius: double): double
")

When the same interfaces are declared in a #emphasis("dynamic") file, the
following slightly different syntax should be used:

#atscode("\
extern val pi : double
extern fun area_of_circle (radius: double): double
")

Please note that a static file is essentially a special case of a dynamic
file. It is entirely possible to replace a static file with a dynamic one.

")#comment("para")

#para("\

As a convention, we often use the filename extension #emphasis(".cats") to
indicate that a file contains some C code that is supposed to be combined
with ATS code in certain manner. There is also the filename extension
#emphasis(".hats"), which we occassionally use for a file that should be
included in ATS code stored in another file.  However, the use of these two
filename extensions are not mandatory, that is, they can be replaced if
needed or wanted.\

")

</chapter><!--"filename-extensions"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
