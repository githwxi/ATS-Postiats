%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="dot-overload">
#title("Dot-Symbol Overloading")

#para('\

In many programming languages, the so-called dot-notation is commonly
associated with selecting a field from a given tuple-value, record-value or
object-value.  In ATS, field selection can be done through either pattern
matching or the use of dot-notation. For example, the following code
constructs a flat tuple and also a boxed one, and then uses dot-notation to
select their components:

#atscode('\
//
val tup_flat = @("a", "b")
val tup_boxed = $tup("a", "b")
//
val-"a" = tup_flat.0 and "b" = tup_flat.1
val-"a" = tup_boxed.0 and "b" = tup_boxed.1
//
')

There is support in ATS for overloading a specified dot-symbol with
multiple function names so that dot-notation can be employed to call these
functions, resulting in code that reads like field selection from tuples or
records. This style of calling functions can, sometimes, make the code
written in ATS more easily accessible, and it is especially so when
ATS interacts with languages that support object-oriented programming.\

')

#para('\

As an example of dot-notation in overloading, let us introduce a non-linear
abstract type #stacode("point") for points in a 2-dimensional space and also
declare some associated functions:

#atscode('\
//
abstype point = ptr // boxed
//
extern
fun
point_make
  (x: double, y: double): point
//
extern
fun point_get_x (p: point): double
and point_get_y (p: point): double
//
extern
fun point_set_x (p: point, x: double): void
and point_set_y (p: point, x: double): void
//
')

For getting the x-coordinate and y-coordinate of a given point, the
functions #dyncode("point_get_x") and #dyncode("point_get_y") can be
called, respectively.  For setting the x-coordinate and y-coordinate of a
given point, the functions #dyncode("point_set_x") and
#dyncode("point_set_y") can be called, respectively. By introducing two
dot-symbols #dyncode(".x") and #dyncode(".y") and then overloading them
with certain function names as follows:

#atscode('\
symintr .x .y
overload .x with point_get_x
overload .x with point_set_x
overload .y with point_get_y
overload .y with point_set_y
')

we can use dot-notation to call the corresponding get-functions and
set-functions as is shown in the following code:

#atscode('\
val p0 = point_make (1.0, ~1.0)
val x0 = p0.x // point_get_x (p0)
and y0 = p0.y // point_get_y (p0)
val () = p0.x := y0 // point_set_x (p0, y0)
and () = p0.y := x0 // point_set_y (p0, x0)
')

Note that the dot-notation in any assigement is only allowed to refer to a
function that returns the void-value. In the above example, both
#dyncode("point_set_x") and #dyncode("point_set_y") return the void-value.
Also, it should be emphasized that overloaded dot-notation as is shown
above can only be applied to non-linear values. For handling linear values,
a slight restriction needs to be imposed, which I explain as follows.

')

#para("\

Let us introduce a linear abstract type #stacode("counter") for counter
objects and a few functions associated with it:

#atscode('\
')

As can be expected, the
functions #dyncode("counter_make") and #dyncode("counter_free") are for
creating and destroying a counter object, respectively. The function
#dyncode("counter_get") returns the current count stored in a give counter,
and the function #dyncode("counter_incby") increase that count by a given
integer value.

")#comment("para")

#para("\

Suppose that we now introduce the following overloading declarations:

#atscode('\
//
overload .get with counter_get
overload .incby with counter_incby
//
')

One may expect the following line of code to typecheck:

#atscode('\
val n0 = c0.get
')

But this is not the case due to #dyncode("c0") being a linear
value. Instead, one needs to use #dyncode("c0.get") as the function
inside a function call in order to call #dyncode("counter_get") on
#dyncode("c0"):

#atscode('\
val n0 = c0.get() // = counter_get(c0)
')

Similarly, one can call #dyncode("counter_incby") as follows to increase
the count stored in #dyncode("c0") by 1:

#atscode('\
val () = c0.incby(1) // = counter_incby(c0, 1)
')

If we revisit the previous example involving (non-linear) points, then
we can see that the following code also typechecks:

#atscode('\
val p0 = point_make (1.0, ~1.0)
val x0 = p0.x() // point_get_x (p0)
and y0 = p0.y() // point_get_y (p0)
val () = p0.x(y0) // point_set_x (p0, y0)
and () = p0.y(x0) // point_set_y (p0, x0)
')

I may use the phrase #emphasis("functional dot-notation") to refer to
this form of dot-notation so as to differentiate it from the general form of
dot-notation.

")#comment("para")

#para("\

Please find #mycodelink("chap_dotoverld.dats", "on-line") the entirety of the
code presented in this chapter plus some testing code.\

")#comment("para")

</chapter><!--"dot-overload"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
