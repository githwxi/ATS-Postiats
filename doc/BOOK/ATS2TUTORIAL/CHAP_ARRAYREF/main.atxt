%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from CHAP_ARRAYREF/main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="arrayref">
#title("Persistent Arrays")

#para("\

A persistent array of size n is just n heap-allocated cells (or references)
in a row.  It is persistent in the sense that the memory allocated for the
array cannot be freed manually. Instead, it can only be safely reclaimed
through garbage collection (GC).\

")

#para("\

Given a viewtype VT, the type for persistent arrays containing N values of
viewtype VT is #stacode("arrayref(VT, N)").  Note that arrays in ATS are
the same as those in C: There is no size information attached to them. The
interfaces for various functions on persistent arrays can be found in
the SATS file
#myatscodelink("prelude/SATS/arrayref.sats", "prelude/SATS/arrayref.sats"),
which is automatically loaded by #command("atsopt").

")#comment("para")

#para("\

There are various functions for array creation. For instance, the following
two are commonly used:

#atscode("\
fun{a:t@ype}
arrayref_make_elt
  {n:nat} (asz: size_t n, elt: a):<!wrt> arrayref (a, n)
// end of [arrayref_make_elt]

fun{a:t@ype}
arrayref_make_listlen
  {n:int} (xs: list (a, n), n: int n):<!wrt> arrayref (a, n)
// end of [arrayref_make_listlen]
")

Applied to a size and an element, #dyncode("arrayref_make_elt") returns an
array of the given size in which each cell is initialized with the given
element.  Applied to a list of elements and the length of the list,
#dyncode("arrayref_make_listlen") returns an array of size equal to the
given length in which each cell is initialized with the corresponding
element in the given list.\

")

#para("\

For reading from and writing to an array, the function templates
#dyncode("arrayref_get_at") and #dyncode("arrayref_set_at") can be used,
respectively, which are assigned the following interfaces:

#atscode('\
fun{a:t@ype}
arrayref_get_at
  {n:int} (A: arrayref (a, n), i: sizeLt (n)):<!ref> a

fun{a:t@ype}
arrayref_set_at
  {n:int} (A: arrayref (a, n), i: sizeLt (n), x: a):<!ref> void
')

Given an array #dyncode("A"), an index #dyncode("i") and a value
#dyncode("v"), #dyncode("arrayref_get_at(A, i)") and
#dyncode("arrayref_set_at(A, i, v)") can be written as #dyncode("A[i]")
and #dyncode("A[i] := v"), respectively.\

")

#para("

As an example, the following function template reverses the content of a
given array:\

#atscode_extract('\
fun{a:t@ype}
arrayref_reverse{n:nat}
(
  A: arrayref (a, n), n: size_t (n)
) : void = let
//
fun loop
  {i: nat | i <= n} .<n-i>.
(
  A: arrayref (a, n), n: size_t n, i: size_t i
) : void = let
  val n2 = half (n)
in
  if i < n2 then let
    val tmp = A[i]
    val ni = pred(n)-i
  in
    A[i] := A[ni]; A[ni] := tmp; loop (A, n, succ(i))
  end else () // end of [if]
end // end of [loop]
//
in
  loop (A, n, (i2sz)0)
end // end of [arrayref_reverse]
')

")

#para("\

If the test #dyncode("i < n2") is changed to #dyncode("i <= n2"), a type-error
is to be reported. Why? The reason is that #dyncode("A[n-1-i]") becomes
out-of-bounds array subscripting in the case where #dyncode("n") and
#dyncode("i") both equal zero. Given that it is very unlikely to encounter a
case where an array of size 0 is involved, a bug like this, if not detected
early, can be buried so scarily deep!\

")

#para("\

The careful reader may have already noticed that the sort #dyncode("t@ype")
is assigned to the template parameter #dyncode("a"). In other words, the
above implementation of #dyncode("arrayref_reverse") cannot handle a case
where the values stored in a given array are of some linear type. The
reason for choosing the sort #dyncode("t@ype") is that both
#dyncode("arrayref_get_at") and #dyncode("arrayref_set_at") can only be
applied to an array containing values of a nonlinear type. In the following
implementation, the template parameter is given the sort #dyncode("vt@ype")
so that an array containing linear values, that is, values of some linear
type can be handled:\

")

#atscode_extract('\
fun{a:vt@ype}
arrayref_reverse{n:nat}
(
  A: arrayref (a, n), n: size_t (n)
) : void = let
//
fun loop
  {i: nat | i <= n} .<n-i>.
(
  A: arrayref (a, n), n: size_t n, i: size_t i
) : void = let
  val n2 = half (n)
in
  if i < n2 then let
    val () = arrayref_interchange (A, i, pred(n)-i) in loop (A, n, succ(i))
  end else () // end of [if]
end // end of [loop]
//
in
  loop (A, n, (i2sz)0)
end // end of [arrayref_reverse]
')

#para('

The interface for the function template #dyncode("arrayref_interchange") is
given below:

#atscode('\
fun{a:vt@ype}
arrayref_interchange{n:int}
  (A: arrayref (a, n), i: sizeLt n, j: sizeLt n):<!ref> void
// end of [arrayref_interchange]
')

Note that #dyncode("arrayref_interchange") can not be implemented in terms
of #dyncode("arrayref_get_at") and #dyncode("arrayref_set_at") (unless some
form of type-unsafe code is employed).\

')

#para('\

There are various functions available for traversing an array from left to
right or from right to left. Also, the following two functions can be conveniently
called to traverse an array from left to right:

#atscode('\
//
fun{a:t0p}
arrayref_head{n:pos} (A: arrayref (a, n)): (a) // A[0]
fun{a:t0p}
arrayref_tail{n:pos} (A: arrayref (a, n)): arrayref (a, n-1)
//
overload .head with arrayref_head
overload .tail with arrayref_tail
')

For instance, the fold-left function for arrays can be implemented
as follows:

#atscode_extract('
fun{a,b:t@ype}
arrayref_foldleft{n:int}
(
  f: (a, b) -> a, x: a, A: arrayref (b, n), n: size_t(n)
) : a =
(
if n > 0
  then arrayref_foldleft<a,b> (f, f (x, A.head), A.tail, pred(n))
  else x
// end of [if]
) (* end of [arrayref_foldleft] *)
')

As can be expected, #dyncode("A.head") and #dyncode("A.tail") translate
into #dyncode("A[0]") and #dyncode('ptr_succ&lt;T&gt;(p0)'), respectively, where T
is the type for the elements stored in A and p0 is the starting address of
A.

')

#para("\

Please find #mycodelink("chap_arrayref.dats", "on-line") the entirety of the
code used in this chapter.\

")#comment("para")

</chapter><!--"arrayref"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_arrayref.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} // end of [main]
%}
