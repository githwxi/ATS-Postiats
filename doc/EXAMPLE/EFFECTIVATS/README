######
#
# HX-2013-04-25:
#
######

While ATS is a rich and powerful programming language, it is also a complex
and demanding language. For most people, learning ATS can be difficult and
time-consuming, especially, when there is little guidance available.

Every competent programmer should probably know very well that controlling
complexities in programming is of vital importance in general software
practice. This is especially so in the context where static program
verification is of a major concern.  Over the last few years, I have been
practicing a refinement-based style of programming, which I find to be
highly effective in managing programming complexities. Given the
availability of advanced types such as dependent types and linear types and
the support for abstract types, ATS is particularly well-suited to
accomodate this style of programming.

In this directory, I will present a variety of concrete examples to
demonstrate some common approaches to effectively employing programming
features of ATS in the construction of high-quality programs. I hope that
this effort can greatly help people both learn ATS and make effective use
of it in practice.

######

file-copying: copying files

loop-as-tailrec: loop as tail-recursive functions

stack-array: array-based stack implementation
queue-sllist2: two-list-based queue implementation

word-counting: couting the ocurrences of words in a given file

Producer-Consumer: implementing the Producer-Consumer problem

DiningPhil:
  implementing the 5-Dining-Philosophers problem by Dijkstra
DiningPhil2:
  implementing a slight variant of the 5-Dining-Philosophers problem

IPC-redis:
  A simple example of inter-process communication based on redis

Readers-and-Writers:
  implementing the classical Readers-and-Writers problem in concurrent
  programming

mergesort: 
  A concrete example that demonstrates a natural style of refinement-based
  programming.

sorting-linear-lists:
  A concrete example that demonstrates a typical way of programming with
  abstract types.

######

###### end of [README] ######
