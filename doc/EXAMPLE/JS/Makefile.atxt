%{
//
staload
STDIO = "libc/SATS/stdio.sats"
staload TIME = "libc/SATS/time.sats"
//
dynload "libatsdoc/dynloadall.dats"
//
staload "libatsdoc/SATS/libatsdoc_atext.sats"
//
%}\
%{

fun comment
  (x: string): atext = atext_nil ()
// end of [comment]

fun make_entry
  (nm: string): atext = let
//
val ent = sprintf ("\
all:: %s\n\
%s: %s.js\n\
%s.js: %s_dats.c ; \
  $(CCOPT) --pre-js pre.js -D_GNU_SOURCE -I$(PATSHOMEQ) -I$(PATSHOMEQ)/ccomp/runtime -o $@ $<\n\
%s_dats.c: %s.dats ; \
  $(PATSOPT) -IATS$(PATSHOMEQ)/contrib --output %s_dats.c --dynamic %s.dats\n\
clean:: ; $(RMF) %s_dats.o\n\
clean:: ; $(RMF) %s_dats.c\n\
cleanall:: ; $(RMF) %s %s.js\n\
", @(nm, nm, nm, nm, nm, nm, nm, nm, nm, nm, nm, nm, nm)
) // end of [val]
//
val ent = string_of_strptr (ent)
//
in
  atext_strcst (ent)
end // end of [make_entry]

fun make2_entry
  (nm: string, cflags: string, libs: string): atext = let
//
val ent = sprintf ("\
all:: %s\n\
%s: %s.js\n\
%s.js: %s_dats.c ; \
  $(CCOPT) --pre-js pre.js --js-library $(PATSHOMEQ)/contrib/HTML/JS/HTMLdocument.js \
    -D_GNU_SOURCE -I$(PATSHOMEQ) -I$(PATSHOMEQ)/ccomp/runtime %s -o $@ $< %s\n\
%s_dats.c: %s.dats ; \
  $(PATSOPT) -IATS$(PATSHOMEQ)/contrib --output %s_dats.c --dynamic %s.dats\n\
clean:: ; $(RMF) %s_dats.o\n\
clean:: ; $(RMF) %s_dats.c\n\
cleanall:: ; $(RMF) %s %s.js\n\
", @(nm, nm, nm, nm, nm, cflags, libs, nm, nm, nm, nm, nm, nm, nm, nm)
) // end of [val]
//
val ent = string_of_strptr (ent)
//
in
  atext_strcst (ent)
end // end of [make2_entry]

%}\
#
#
# This Makefile is automatically generated
# from executing the following command-line:
#
# make -f Makefile.gen
#
#

######

CCOPT=emcc -std=c99
PATSHOMEQ="$(PATSHOME)"
PATSOPT=$(PATSHOMEQ)/bin/patsopt
PATSLIB=$(PATSHOMEQ)/ccomp/atslib/lib

######

all::

######

LNS=ln -s
RMF=rm -f

######

#make2_entry("fact", "-DATS_MEMALLOC_LIBC", "")

######

clean:: ; $(RMF) *~
clean:: ; $(RMF) *_?ats.o *_?ats.c
clean:: ; $(RMF) *_atxt.txt
clean:: ; $(RMF) *_atxt.dats
clean:: ; $(RMF) *.map
clean:: ; $(RMF) Makefile.exe

cleanall:: clean

###### end of [Makefile] ######
\
%{
implement main () = fprint_filsub (stdout_ref, "Makefile_atxt.txt")
%}\
