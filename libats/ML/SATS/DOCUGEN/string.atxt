(* ****** ****** *)

%{
implement srcfilename_get () = "../string.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_string")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/string\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for processing
C-style strings in functional programming.

")

(* ****** ****** *)

#declnamesynop("itoa")
#decldescrpt("\

This function is for turning integers into their string representations.\

")

(* ****** ****** *)

#declnamesynop("string_sing")
#decldescrpt("\

Given a non-null character, this function returns a singleton string
consisting of the character.\

")

(* ****** ****** *)

#declnamesynop("string_copy")
#decldescrpt("Given a string, this function returns a copy of it.")
#declexample("\

The following code tests that #dyncode("string_copy") indeed returns a copy
of a given string:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/string.sats"
//
implement
main () = 0 where {
  val str = "abcdefg"
  val () = assertloc (str = string_copy (str))
} // end of [main]
')
")

#declnamesynop("string_make_substring")
#decldescrpt("\

Given a string str of length n and integers st and ln, this function
returns a string consisting of chars str[st], str[st+1], ...,
str[st+min(n-st,ln)-1] if st is less than n. Otherwise, it returns the
empty string.

")
#declexample("\

The following code makes a simple use of #dyncode("substring_copy"):

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/string.sats"
//
implement
main () = 0 where {
  val str = "abcdefg"
  val str2 = substring_copy (str, g1int2uint(0), string_length(str))
  val () = assertloc (str = str2)
} // end of [main]
')
")

(* ****** ****** *)

#declnamesynop("string_append")
#decldescrpt("\

This function, which overload the symbol #dyncode("+"), returns the
concatenation of two given strings.

")
#declexample("\

The following code shows a typical way of combining strings:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/string.sats"
//
implement
main0 () =
{
  val Hello = "H"+"e"+"l"+"l"+"o"
  val () = print (Hello + ", world!\\\n")
} (* end of [main0] *)
')\

Note that the evaluation of the expression
#dyncode('"H" + "e" + "l" + "l" + "o"')
generates the following intermediate strings \"H\", \"He\", \"Hel\", and
\"Hell\", which all become garbage once the evaluation returns the string
\"Hello\".

")

#declnamesynop("stringlst_concat")
#decldescrpt("\

Given a list xs of strings, this function returns the concatenation of
xs[0], xs[1], ,,,, xs[n-1], where n is the length of xs and the notation
xs[i] refers element i in xs.  ")

#declexample("\

The following code shows a way to form the string \"Hello\" by
concatenating a list of singleton strings:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
staload "libats/ML/SATS/string.sats"
//
implement
main0 () =
{
//
val Hello =
stringlst_concat
(
  (list0)$arrpsz{string}("H","e","l","l","o")
) (* end of [val] *)
//
val ((*void*)) = print (Hello + ", world!\\\n")
//
} (* end of [main0] *)
')\

Note that the call to #dyncode("stringlst_concat") constructs the string
\"Hello\" #emph("without") generating any intermediate substrings.

")

(* ****** ****** *)

#declnamesynop("string_explode")
#decldescrpt("\

Given a string str of length n, this function returns a list consisting
of str[0], str[1], ..., and str[n-1], where each str[i] refers to char i in
str. ")
#declexample("\

The following code checks that the length of the list obtained from calling
#dyncode("string_explode") on a given string equals the length of the string:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
staload "libats/ML/SATS/string.sats"
//
implement
main () = 0 where {
  val str = "abcdefg"
  val cs = string_explode (str)
  val () = assertloc (string_length (str) = g0i2u(list0_length (cs)))
} // end of [main]
')
")

#declnamesynop("string_implode")
#decldescrpt("\

Given a list cs of chars, this functions returns a string consisting of
cs[0], cs[1], ..., and cs[n-1], where n is the length of cs and each cs[i]
refers to char i in cs. Note that the length of the returned string is n
only if there is no null char in cs.

")
#declexample("\

The following code checks that the string obtained from calling
#dyncode("string_implode") on the list returned from a call to
#dyncode("string_explode") on a given string equals the given string:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
staload "libats/ML/SATS/string.sats"
//
implement
main () = 0 where {
  val str = "abcdefg"
  val cs = string_explode (str)
  val str2 = string_implode (cs)
  val () = assertloc (str = str2)
} // end of [main]
')
")

(* ****** ****** *)

#declnamesynop("string_tabulate")

(* ****** ****** *)

#declnamesynop("string_foreach")
#decldescrpt("\

This function traverses its first argument (a string) and applies to each
encountered character its second argument (a closure-function).  ")
#declexample("\

The following code prints a given string onto the standard output channel:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/string.sats"
//
implement
main0 () = {
  val str = "abcdefg"
  val () = string_foreach (str, lam (c) => print_char (c))
  val () = print_newline ()
} // end of [main]
')
")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("+")

(* ****** ****** *)

(* end of [string.atxt] *)
