(* ****** ****** *)

%{
implement srcfilename_get () = "../array0.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_array0")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/array0\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for supporting
ML-style processing of persisten arrays. Note that a plain array (as is in
C) is not available in languages such as Java and ML due to the need for
performing array-bounds checking at run-time. Instead, arrays in these
languages are always bundled together with their sizes. In ATS, the type
#stacode("array0(T)") is for an array paired with its size in which
elements of the type T are stored.

")

(* ****** ****** *)

#declnamesynop("array0")
#declnamesynop("array0_vt0ype_type")

(* ****** ****** *)

#declnamesynop("array0_of_arrszref")
#declnamesynop("arrszref_of_array0")

(* ****** ****** *)

#declnamesynop("array0_make_arrpsz")
#declexample("\

The following code builds an array of digits and then print them out:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/array0.sats"
//
implement
main0 ((*void*)) =
{
//
val xs =
  (array0)$arrpsz{int}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
val () = array0_foreach<int> (xs, lam (x) => print_int (x))
val () = print_newline ()
//
} (* end of [main0] *)
')
")

(* ****** ****** *)

#declnamesynop("array0_get_ref")
#decldescrpt('\

Tis function returns a pointer to the beginning of the array associated
with a given array0-value.\

')

(* ****** ****** *)

#declnamesynop(".size")
#declnamesynop("array0_get_size")
#decldescrpt('\

This function returns the size of the array associated with a given
array0-value.\

')

(* ****** ****** *)

#declnamesynop("array0_get_refsize")
#decldescrpt('\

This function returns a pair that are essentially obtained by calling
#dyncode("array0_get_ref") and #dyncode("array0_get_size").\

')

(* ****** ****** *)

#declnamesynop("array0_make_elt")
#decldescrpt('\

This function creates an array0-value of a given size (1st argument) in
which each array-cell is initialized with a given value (2nd argument).\

')

(* ****** ****** *)

#declnamesynop("array0_make_list")
#decldescrpt('\

Given a list xs of length n, this function returns an array0-value A of the
same size such that A[i] equals xs[i] for i ranging from 0 until n-1,
inclusive.\

')
#declexample("\

Given a file handle, the following function returns an array containing
all of the chars stored in the file referred to by the file handle:

#pats2xhtmld_tryit('\
//
staload
UN = "prelude/SATS/unsafe.sats"
//
staload "libats/ML/SATS/basis.sats"
staload "libats/ML/SATS/array0.sats"
//
fun
array0_make_fileref
(
  inp: FILEref
) : array0 (char) = A0 where
{
  val cs =
    fileref_get_file_charlst (inp)
  val A0 = array0_make_list ($UN.castvwtp1{list0(char)}(cs))
  val ((*freed*)) = list_vt_free (cs)
} (* end of [array0_make_fileref] *)
//
')
")

(* ****** ****** *)

#declnamesynop("array0_make_rlist")
#decldescrpt('\

Given a list xs of length n, this function returns an array0-value A of the
same size such that A[i] equals xs[n-i-1] for i ranging from 0 until n-1,
inclusive.\

')

(* ****** ****** *)

#declnamesynop("array0_make_subarray")
#decldescrpt('\

Given an array0-value A of size n and two non-negative integers st and ln,
this function returns another array0-value A2 of size ln2 such that the
value in each A2[i] equals the value in A[st2+i], where st2 and ln2 equal
min(st,n) and min(ln,n-st2), respectively, and i ranges from 0 until ln2-1,
inclusive. Please note that the returned array0-value A2 is of size 0 if st
is greater than or equal to n.

')


(* ****** ****** *)

#declnamesynop("array0_get_at")

#declnamesynop("array0_get_at_gint")
#decldescrpt('\

Given an array0-value A of size n and an index i, this function returns
A[i] if i is valid (that is, 0 <= i < n), or it raises the exception
#dyncode("ArraySubscriptExn").

')

#declnamesynop("array0_get_at_guint")
#decldescrpt('\

This function is like #dyncode("array0_get_at_gint") except for the given
index being an unsigned integer.

')

(* ****** ****** *)

#declnamesynop("array0_set_at")

#declnamesynop("array0_set_at_gint")
#decldescrpt('\

Given an array0-value A of size n, an index i and a value x, this function
assigns x to A[i] if i is valid (that is, 0 <= i < n), or it raises the
exception #dyncode("ArraySubscriptExn").

')

#declnamesynop("array0_set_at_guint")
#decldescrpt('\

This function is like #dyncode("array0_set_at_gint") except for the given
index being an unsigned integer.

')

(* ****** ****** *)

#declnamesynop("array0_exch_at")

#declnamesynop("array0_exch_at_gint")
#decldescrpt('\

Given an array0-value A of size n, an index i and a reference x, this
function exchanges the values of A[i] and x if i is valid (that is, 0 <= i < n),
or it raises the exception #dyncode("ArraySubscriptExn").

')

#declnamesynop("array0_exch_at_guint")
#decldescrpt('\

This function is like #dyncode("array0_exch_at_gint") except for the given
index being an unsigned integer.

')

(* ****** ****** *)

#declnamesynop("array0_copy")
#decldescrpt('\

Given an array0-value A of size n, this function returns another
array0-value B such that each B[i] is initialized with A[i], where i ranges
from i until n-1, inclusive.\

')

(* ****** ****** *)

#declnamesynop("array0_append")
#decldescrpt('\

Given two array0-values A1 and A2, this function returns another
array0-value B that contains the concatenation of the elements in A1 and
A2.\

')

(* ****** ****** *)

#declnamesynop("array0_map")
#decldescrpt('\

Given an array0-value A of size n and a function f, this function returns
another array0-value B of the same size such that each B[i] is initialized
with the value returned by f(A[i]), where i ranges from 0 until n-1,
inclusive.\

')

(* ****** ****** *)

#declnamesynop("array0_mapopt")
#decldescrpt('\

Given an array0-value A of size n and a function f, this function returns
another array0-value B that collects precisely every x whenever
#dyncode("Some0(x)") is returned by f(A[i]), where i ranges from 0 until
n-1, inclusive.\

')

(* ****** ****** *)

#declnamesynop("array0_tabulate")

#decldescrpt('\

Given a size asz and a function f, this function returns an array0-value A
of size asz such that each A[i] is initialized with the value returned by f(i),
where i ranges from 0 until asz-1, inclusive.\

')

(* ****** ****** *)

#declnamesynop("array0_tabulate_opt")
#decldescrpt('\

Given an integer asz and a function f, this function returns an array0-value
that collects precisely every x whenever #dyncode("Some0(x)") is returned
by f(i), where i ranges from 0 until asz-1, inclusive.\

')

(* ****** ****** *)

#declnamesynop("array0_find_exn")
#decldescrpt("\

This function returns the index of the first array-cell in a given array
that contains an element satisfiing a given predicate. If there is no such
an element, then the function raises an exception (#dyncode("NotFoundExn")).

")
#declnamesynop("array0_find_opt")
#decldescrpt("\
This function is just the optional version of #dyncode("array0_find_exn").
")

(* ****** ****** *)

#declnamesynop("array0_foreach")
#decldescrpt("\

Given an array0-value A of size n and a function f, this function applies f
to each A[i], where i ranges from 0 until n-1, inclusive.\

")

(* ****** ****** *)

#declnamesynop("array0_iforeach")
#decldescrpt("\

Given an array0-value A of size n and a function f, this function applies f
to each pair (i, A[i]), where i ranges from 0 until n-1, inclusive.\

")

(* ****** ****** *)

#declnamesynop("array0_foldleft")
#declnamesynop("array0_ifoldleft")

(* ****** ****** *)

#declnamesynop("array0_rforeach")
#decldescrpt("\

Given an array0-value A of size n and a function f, this function applies f
to each A[n-i-1], where i ranges from 0 until n-1, inclusive.\

")

(* ****** ****** *)

#declnamesynop("array0_foldright")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop(".size")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [array0.atxt] *)
