%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"socket_in.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_GPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/libc/sys/CATS/CODEGEN/socket_in.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("gmhwxiATgmailDOTcom")
#atscode_start_time("November, 2014")
*/

#atscode_separator_for_C()

\#ifndef ATSLIB_LIBC_SYS_CATS_SOCKET_IN
\#define ATSLIB_LIBC_SYS_CATS_SOCKET_IN

#atscode_separator_for_C()
//
\#include <sys/socket.h>
\#include <netinet/in.h>
//
#atscode_separator_for_C()

\#ifndef memset
extern void *memset (void *p, int c, size_t n) ;
\#endif // ifndef(memset)

/* ****** ****** */

ATSinline()
atsvoid_t0ype
atslib_sockaddr_in_init
(
  atstype_ptr sa
, sa_family_t af, in_addr_t inp, in_port_t port
) {
  struct sockaddr_in *sa2 = sa ;
  (void)memset(sa2, 0, sizeof(struct sockaddr_in)) ;
  sa2->sin_family = af ;
  sa2->sin_addr.s_addr = inp ;
  sa2->sin_port = port ;
} // end of [sockaddr_in_init]

#atscode_separator_for_C()

\#endif // ifndef ATSLIB_LIBC_SYS_CATS_SOCKET_IN

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "socket_in_atxt.txt")
%}\
