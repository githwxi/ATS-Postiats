%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"errno.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_GPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/libc/CATS/CODEGEN/errno.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2013")
*/

#atscode_separator_for_C()

\#ifndef ATSLIB_LIBC_CATS_ERRNO
\#define ATSLIB_LIBC_CATS_ERRNO

#atscode_separator_for_C()

\#include <errno.h>

#atscode_separator_for_C()

typedef int errno_t ;

#atscode_separator_for_C()

\#define ENONE 0

#atscode_separator_for_C()

\#define atslib_the_errno_get() (errno)
\#define atslib_the_errno_set(eno) (errno = (eno))
\#define atslib_the_errno_reset() (errno = ENONE)

ATSinline()
atstype_bool
atslib_the_errno_test(errno_t eno)
{
  return (errno==(eno)) ? atsbool_true : atsbool_false ;
}

#atscode_separator_for_C()

\#endif // ifndef ATSLIB_LIBC_CATS_ERRNO

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "errno_atxt.txt")
%}\
